##=============================================================================
## Common query macros
## included in velocimacro.library property - see QueryUtils
##=============================================================================

##-----------------------------------------------------------------------------
## Display the network information as:
## operator, country if these are known
## appropriate message displayed if these are not known, see below
## eg SmarTone,Hong Kong-PRC
##
## roamingTable : reference to the roaming look up table
## dataTable : reference to the table containing the data
##
##-----------------------------------------------------------------------------

#macro(DISPLAY_NETWORK $roamingTable)
(CASE
WHEN (${roamingTable}.MNC IS NULL AND ${roamingTable}.MCC IS NULL)
THEN '-'
WHEN ${roamingTable}.MNC IS NULL
THEN roamingRef.COUNTRY ||',-'
WHEN ${roamingTable}.MCC IS NULL
THEN '-,'||roamingRef.OPERATOR
ELSE
    ${roamingTable}.COUNTRY ||','|| ${roamingTable}.OPERATOR
END) AS NETWORK
#end

##-----------------------------------------------------------------------------
## Display the terminal information as:
## vendor name, marketing name, tac
## eg Apple,iPhone 4 (A1332),1253600
##
## tacTable : reference to the tac look up table
## dataTable : reference to the table containing the data
##
##-----------------------------------------------------------------------------

#macro(DISPLAY_TERMINAL $tacTable $dataTable)
(
CASE WHEN ${dataTable}.TAC IS NULL THEN '-' ELSE
(CASE WHEN (${tacTable}.VENDOR_NAME IS NULL OR ${tacTable}.Marketing_Name IS NULL) THEN ''||${dataTable}.TAC ELSE
    ${tacTable}.VENDOR_NAME ||','|| ${tacTable}.Marketing_Name END)END) as TERMINAL
#end


##-----------------------------------------------------------------------------
## Query the DIM_E_SGEH_HIER321_CELL table to fetch matching CID value
## for inputted parameters
##
## The following SQL parameters must be provided to query:
## $CELL            cell id, matches the CID column
## $HIERARCHY_3        node name, matches the HEIRARCHY_3 column
## $RAT                RAT of node (as integer)
## $VENDOR            vendor of node
##
##-----------------------------------------------------------------------------

#macro(SELECT_CID_FROM_DIM_E_SGEH_HIER321_CELL)
SELECT
DISTINCT CID
FROM
DIM_E_SGEH_HIER321_CELL
WHERE
CID = :$CELL
AND HIERARCHY_3 = :$BSC
AND RAT = :$RAT
AND VENDOR = :$VENDOR
#end

##-----------------------------------------------------------------------------
## Column specification for ranking queries
##
## type: key type
## TODO: the key types should have java constant analogues (or can we pluck these
## from a properties file ?
##-----------------------------------------------------------------------------

##-----------------------------------------------------------------------------
## Query raw tables, excluding Exclusive TACs, filtering on provided values, and not
## specifying a date/time filter
## rawtables : list of raw table partitions
## rawview : the view name to be created from this select
## columnsToIncludeInNewView : columns that should be included in this new view
## columns : the columns that should be used in the where clause when selecting from raw tables
##-----------------------------------------------------------------------------
#macro(REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_NO_DATETIME_FILTER $rawtables $rawview $columnsToIncludeInNewView $columns)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_COLUMNS_WHERE($columns)
    and #GET_TAC_EXCLUSION()
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro(RANKING_COLUMN_SPEC_RAW $type)
    #if($type==$ApplicationConstants.APN_PARAM)
    APN,
    #elseif ($type==$ApplicationConstants.TAC_PARAM)
    TAC,
    #elseif($type==$ApplicationConstants.SGSN_PARAM)
    EVENT_SOURCE_NAME,
    #elseif($type==$ApplicationConstants.BSC_PARAM)
    VENDOR, HIERARCHY_3,
    #elseif($type==$ApplicationConstants.CELL_PARAM)
    VENDOR,HIERARCHY_3,HIERARCHY_1
    #end
#end


##-----------------------------------------------------------------------------
## Returns the Manufacturer if the type is MAN
## groun_columns : field names
##-----------------------------------------------------------------------------
#macro(GET_MANUFACTURER)
    #if($type==$ApplicationConstants.TYPE_MAN)
    and tac.MANUFACTURER=:$ApplicationConstants.TYPE_MAN
    #end
#end

##-----------------------------------------------------------------------------
## Returns SQL for calculating #subscribers as NO_OF_TOTAL_ERR_SUBSCRIBERS
##
## type: node type
## column, column2, column2: field names
## useEventId: true/false
##-----------------------------------------------------------------------------
#macro(RETURN_NUM_SUBSCRIBERS_QUERY  $columns $extrawhere)
(select
count(distinct(IMSI))
from EVENT_E_SGEH_ERR_RAW raw
where
## q_ranking_cc_drilldown.vm does not have columns
    #if(!$columns)
        #GET_DATETIME_RANGE()
    #else
        #GET_COLUMNS_WHERE_TEST_BY_TABLE('raw' $columns)
        #AND_DATETIME_RANGE()
    #end
    $extrawhere
) as NO_OF_TOTAL_ERR_SUBSCRIBERS
#end

##-----------------------------------------------------------------------------
## Group Mgt Join Filter
##-----------------------------------------------------------------------------
#macro(GROUP_FILTER $groupType $groupname $sourceTable)
    #set($groupDef = $groupDefinitions.get($groupType))
    #set($joinTable = $groupDef.getTableName())
    #set($groupnameColumn = $groupDef.getGroupNameColumn())
    #set($joinKeys = $groupDef.getGroupKeys())
INNER JOIN $joinTable ON $joinTable.$groupnameColumn = '$groupname' and (
    #set( $index = 1 )
    #foreach ($keyName in $joinKeys)
        $sourceTable.$keyName = $joinTable.$keyName #if( $index < $keys.size())and
    #end
        #set( $index = $index + 1 )
    #end)
#end

##-----------------------------------------------------------------------------
## Date time range constraints
##-----------------------------------------------------------------------------
#macro(AND_DATETIME_RANGE)
and #GET_DATETIME_RANGE()
#end

##EVENT TIME range
#macro(AND_EVENTTIME_RANGE)
and #GET_EVENTTIME_RANGE()
#end

##-----------------------------------------------------------------------------
## Returns list of columns
##
## columns : field names
##-----------------------------------------------------------------------------
#macro(GET_COLUMNS $columns)
    #foreach ($column in $columns)
        $column,
    #end
#end
##-----------------------------------------------------------------------------
#macro(GET_COLUMNS_SYS_COL $columns)
    #foreach ($column in $columns)
       #if($column == "APN")
           #set($SYS_COL = "SYS_COL_APN")
           $SYS_COL,
       #elseif($column == "HIERARCHY_3" && ($columns.size()== 3 || $columns.size()== 4))
            #set($SYS_COL = "SYS_COL_HIERARCHY_3")
            $SYS_COL,
      #elseif($column == "VENDOR" && ($columns.size()== 3 || $columns.size()== 4))
            #set($SYS_COL = "SYS_COL_VENDOR")
            $SYS_COL,
      #elseif($column == "HIERARCHY_1" && $columns.size()== 4)
            #set($SYS_COL = "SYS_COL_HIERARCHY_1")
            $SYS_COL,
      #else
            $column,
      #end
    #end
#end
##-----------------------------------------------------------------------------
## Get the where caluse for specified columns
##
## columns : field name
##-----------------------------------------------------------------------------
#macro(GET_COLUMNS_WHERE_AND $columns)
    #foreach ($column in $columns)
    and $column = :$column
    #end
#end

##-----------------------------------------------------------------------------
## Returns list of columns
##
## columns : field names
##-----------------------------------------------------------------------------
#macro(GET_COLUMNS_BY_TABLE $table $columns)
    #foreach ($column in $columns)
        ${table}.$column,
    #end
#end

#macro(GET_COLUMNS_BY_TABLE_MSS $table $columns)
    #foreach ($column in $columns)
    #if($column == "EVENT_TIME")
     DATEADD(minute,$tzOffset,${table}.$column)AS 'EVENT_TIME',
    #else
     ${table}.$column,
    #end
    #end
#end

##-----------------------------------------------------------------------------
## Returns list of columns without tailing comma
##
## columns : field names
##-----------------------------------------------------------------------------
#macro(GET_COLUMNS_NO_COMMA_TRAILING $columns)
    #foreach ($column in $columns)
        #if ( $velocityCount <= 1)
            $column
        #else
        ,$column
        #end
    #end
#end

##-----------------------------------------------------------------------------
## Returns list of columns with table names without tailing comma
##
## columns : field names
##-----------------------------------------------------------------------------
#macro(GET_COLUMNS_WITH_TABLE_NAMES $tables $columns)
    #foreach ($column in $columns)
        #set($outerloop = $velocityCount)
        #foreach ($table in $tables)
            ${table}.$column
            #if (($velocityCount * $outerloop) < ($columns.size() * $tables.size()))
            ,
            #end
        #end
    #end
#end

##-----------------------------------------------------------------------------
## Returns list of columns without tailing comma
##
## columns : field names
##-----------------------------------------------------------------------------
#macro(GET_IMSI_JOIN_CONIDITION $error_table_alias $success_table_alias $event_source_table_alias $columns)
    #foreach ($column in $columns)
        #if ( $velocityCount <= 1)
        and #GET_MULTI_JOIN(["$error_table_alias","$success_table_alias"] "$event_source_table_alias" $columns)
        #end
    #end
#end

##-----------------------------------------------------------------------------
## Returns list of columns without tailing comma
##
## columns : field names
##-----------------------------------------------------------------------------
#macro(GET_COLUMNS_BY_TABLE_NO_COMMA_TRAILING $table $columns)
    #foreach ($column in $columns)
        #if ( $velocityCount <= 1)
            ${table}.$column
        #else
        ,${table}.$column
        #end
    #end
#end

##-----------------------------------------------------------------------------
## Return the not null value from the same column of different tables
##
## columns : field name
##-----------------------------------------------------------------------------
#macro(GET_NOT_NULL_COLUMN $tables $columns)
    #foreach ($column in $columns)
    isnull(
        #foreach ($table in $tables)
            ${table}.$column
            #if ( $velocityCount < $tables.size())
            ,
            #end
        #end
    ) as $column,
    #end
#end

##-----------------------------------------------------------------------------
## Returns the sentences for join based on two tables
##
## $atable, $btable: table names
## columns : field name
##-----------------------------------------------------------------------------
#macro(GET_JOIN $atable $btable $columns)
    #foreach ($column in $columns)
        $atable.$column = $btable.$column
        #if($velocityCount < $columns.size())
        and
        #end
    #end
#end

##-----------------------------------------------------------------------------
## Returns the sentences for outer join based on two tables
##
## $atable, $btable: table names
## columns : field name
##-----------------------------------------------------------------------------
#macro(GET_OUTER_JOIN $atable $btable $columns)
    #foreach ($column in $columns)
        #if ( $velocityCount > 1)
        and
        #end
        $atable.$column*=$btable.$column
    #end
#end

##-----------------------------------------------------------------------------
## Returns the sentences for join based on two tables
##
## $atable, $btable: table names
## columns : field name
##-----------------------------------------------------------------------------
#macro(GET_JOIN_TARGET $atable $btable $column1 $column2)
    $atable.$column1=$btable.$column2
#end

##-----------------------------------------------------------------------------
## Returns the sentences for join based on two tables
##
## $atable, $btable: table names
## columns : field name
##-----------------------------------------------------------------------------
#macro(GET_JOIN_ISNULL $atable $btable $columns)
    #foreach ($column in $columns)
        #if ( $velocityCount > 1)
        and
        #end
    isnull($atable.$column, -1) = isnull($btable.$column, -1)
    #end
#end

##-----------------------------------------------------------------------------
## Returns the sentences for join based on multi tables
##
## $tables: table names
## $jointable: table to be joined
## $columns : field name
##-----------------------------------------------------------------------------
#macro(GET_MULTI_JOIN $tables $jointable $columns)
    #foreach ($column in $columns)
        #if ( $velocityCount > 1)
        and
        #end
    isnull(
        #foreach ($table in $tables)
            ${table}.$column
            #if ( $velocityCount < $tables.size())
            ,
            #end
        #end
    )= $jointable.$column
    #end
#end

##-----------------------------------------------------------------------------
## Get the where caluse for specified columns
##
## columns : field name
##-----------------------------------------------------------------------------
#macro(GET_COLUMNS_WHERE $columns)
    #foreach ($column in $columns)
        #if ( $velocityCount <= 1)
            $column = :$column
        #else
        and $column = :$column
        #end
    #end
#end

##-----------------------------------------------------------------------------
## Get the not null where caluse for specified columns
##
## columns : field name
##-----------------------------------------------------------------------------
#macro(GET_COLUMNS_WHERE_NOT_NULL $columns)
    #foreach ($column in $columns)
        #if ( $velocityCount <= 1)
            $column is not null
        #else
        and $column is not null
        #end
    #end
#end


##-----------------------------------------------------------------------------
## Get the where caluse for specified columns for table
##
## columns : field name
##-----------------------------------------------------------------------------
#macro(GET_COLUMNS_WHERE_BY_TABLE $table $columns)
    #foreach ($column in $columns)
        #if ( $velocityCount <= 1)
            $table.$column = :$column
        #else
        and $table.$column = :$column
        #end
    #end
#end

##-----------------------------------------------------------------------------
## Get the where caluse for specified columns
##
## columns : field name
##-----------------------------------------------------------------------------
#macro(GET_COLUMNS_WHERE_TEST $columns)

    #foreach ($column in $columns)
        #if ( $velocityCount <= 1)
            #if ($velocityCount<$columns.size())
            ($column = :$column or $column is not null)
            #else
                $column = :$column
            #end
        #else
            #if ($velocityCount<$columns.size())
            and ($column = :$column or $column is not null)
            #else
            and $column = :$column
            #end
        #end
    #end

#end

##-----------------------------------------------------------------------------
## Get the where caluse for specified columns
##
## columns : field name
##-----------------------------------------------------------------------------
#macro(GET_COLUMNS_WHERE_TEST_BY_TABLE $table $columns)

    #foreach ($column in $columns)
        #if ( $velocityCount <= 1)
            #if ($velocityCount<$columns.size())
            ($table.$column = :$column or $table.$column is not null)
            #else
                $table.$column = :$column
            #end
        #else
            #if ($velocityCount<$columns.size())
            and ($table.$column = :$column or $table.$column is not null)
            #else
            and $table.$column = :$column
            #end
        #end
    #end

#end


##-----------------------------------------------------------------------------
## Date time range constraints without AND
##-----------------------------------------------------------------------------
#macro(GET_DATETIME_RANGE)
DATETIME_ID >= :dateFrom and DATETIME_ID < :dateTo
#end

##EVENT TIME range constraints without AND
#macro(GET_EVENTTIME_RANGE)
EVENT_TIME >= :eventTimeFrom and EVENT_TIME < :eventTimeTo
#end

##Date time range for LOCAL_DATE_ID constraints
#macro(GET_DATE_RANGE_LOCAL)
LOCAL_DATE_ID >= :localDateFrom and LOCAL_DATE_ID < :localDateTo
#end

#macro(GET_ADJUSTED_DATETIME_RANGE)
DATETIME_ID >= :adjustedDateFrom and DATETIME_ID < :adjustedDateTo
#end

#macro(SELECT_COLUMNS_FOR_VIEW  $rawtables $columnsToIncludeInView)
    select
        #foreach ($columnToInclude in $columnsToIncludeInView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInView.size())
            ,
            #end
        #end
    from dc.$rawtable
#end

##-----------------------------------------------------------------------------
## Date time range constraints without AND for specified table/view
##-----------------------------------------------------------------------------
#macro(GET_DATETIME_RANGE_BY_TABLE $table)
    ${table}.DATETIME_ID >= :dateFrom and ${table}.DATETIME_ID < :dateTo
#end

##-----------------------------------------------------------------------------
## Include GROUP_NAME to filter by gruup
##-----------------------------------------------------------------------------
#macro(GET_GROUP_INCLUSION $inclusionColumn $groupTable)
    $inclusionColumn in (select $inclusionColumn from dc.$groupTable where GROUP_NAME = :GROUP_NAME)
#end

##-----------------------------------------------------------------------------
## Include passed value unless its in the TAC exclusion group
##-----------------------------------------------------------------------------
#macro(GET_TAC_EXCLUSION)
ISNULL(TAC,-1) not in (select TAC from dc.GROUP_TYPE_E_TAC where GROUP_NAME = 'EXCLUSIVE_TAC')
#end

##-----------------------------------------------------------------------------
## Include passed value unless its in the TAC exclusion group
##-----------------------------------------------------------------------------
#macro(GET_TAC_EXCLUSION_BY_TABLE $table)
ISNULL(${table}.TAC,-1) not in (select TAC from dc.GROUP_TYPE_E_TAC where GROUP_NAME = 'EXCLUSIVE_TAC')
#end

##-----------------------------------------------------------------------------
## Obfuscate IMSI for showing in detail lists
##
##-----------------------------------------------------------------------------
#macro(OBFUSCATE_IMSI)
IMSI_MCC || IMSI_MNC || '******' || right(convert (varchar(16),IMSI), 4) as IMSI,
#end

##-----------------------------------------------------------------------------
## Obfuscate IMSI for showing in detail lists for specified table/view
##
##-----------------------------------------------------------------------------
#macro(OBFUSCATE_IMSI_BY_TABLE $table)
    ${table}.IMSI_MCC || ${table}.IMSI_MNC || '******' || right(convert (varchar(16),${table}.IMSI), 4) as IMSI,
#end

##-----------------------------------------------------------------------------
## Calculate the percentage based on fraction and denominator
##
## fraction: array
## denominator: array
##-----------------------------------------------------------------------------
#macro(CALCULATE_REMAINING_PERCENTAGE $fraction $denominator)
(cast (round(( 1- isnull((#foreach($a in $fraction) #if($velocityCount>1) +#end isnull($a,0) #end)/cast( #foreach($b in $denominator) #if($velocityCount>1) +#end isnull($b,0) #end AS DECIMAL(16)),0))*100, 2) as numeric(5,2)))
#end

##-----------------------------------------------------------------------------
## Calculate the percentage based on fraction and denominator
##
## fraction: array
## denominator: array
##-----------------------------------------------------------------------------
#macro(CALCULATE_PERCENTAGE $fraction $denominator)
(cast (round((isnull((#foreach($a in $fraction) #if($velocityCount>1) +#end isnull($a,0) #end)/cast( #foreach($b in $denominator) #if($velocityCount>1) +#end isnull($b,0) #end AS DECIMAL(16)),0))*100, 2) as numeric(5,2)))
#end

##-----------------------------------------------------------------------------
## Calculate the quotient based on fraction and denominator
##
## fraction: array
## denominator: array
##-----------------------------------------------------------------------------
#macro(CALCULATE_QUOTIENT $fraction $denominator)
(cast (round(isnull((#foreach($a in $fraction) #if($velocityCount>1) +#end isnull($a,0) #end)/cast( #foreach($b in $denominator) #if($velocityCount>1) +#end isnull($b,0) #end AS DECIMAL(16)),0), 2) as numeric(18,2)))
#end

##-----------------------------------------------------------------------------
## Calculate chart time range
##-----------------------------------------------------------------------------

#macro(GET_CHART_TIMES $starttime $endtime $interval)
(SELECT
tmp_st,
tmp_et
FROM
(
SELECT
DATEADD(mi, n * $interval, $starttime) AS tmp_st,
DATEADD(mi, $interval, tmp_st)         AS tmp_et
FROM
dc.DIM_E_NUMBERS_0_4095) t
WHERE
tmp_et <= $endtime) chart_times
#end

##-----------------------------------------------------------------------------
## Get the where caluse for specified columns
##
## columns : field name
##-----------------------------------------------------------------------------
#macro(GET_NOT_NULL_COLUMNS_WHERE $table $columns)
    #foreach ($column in $columns)
        #if ( $velocityCount <= 1)
            ${table}.$column is not null
        #else
        and ${table}.$column is not null
        #end
    #end
#end

##-----------------------------------------------------------------------------
## convert hex ip address to decimal dotted notation
##
## table name : column name
##-----------------------------------------------------------------------------
#macro(CONVERT_HEX_IP_ADDRESS_TO_DECIMAL_DOTTED_NOTATION $table $column)
cast(convert(unsigned int, substr(${table}.$column,1,1)) as varchar(30)) || '.' ||
cast(convert(unsigned int, substr(${table}.$column,2,1)) as varchar(30)) || '.' ||
cast(convert(unsigned int, substr(${table}.$column,3,1)) as varchar(30)) || '.' ||
cast(convert(unsigned int, substr(${table}.$column,4,2)) as varchar(30)))
#end


##-----------------------------------------------------------------------------
## Define column variables
##
##
##-----------------------------------------------------------------------------
#macro(DEFINE_CONSTANTS)
    #set($RAT = $ApplicationConstants.RAT_PARAM)
    #set($CAUSE_PROT_TYPE = $ApplicationConstants.TYPE_CAUSE_PROT_TYPE)
    #set($APN = $ApplicationConstants.APN_PARAM_UPPER_CASE)
    #set($SGSN = $ApplicationConstants.SGSN_SQL_NAME)
    #set($BSC = $ApplicationConstants.BSC_SQL_NAME)
    #set($CELL = $ApplicationConstants.CELL_SQL_NAME)
    #set($VENDOR = $ApplicationConstants.VENDOR_PARAM_UPPER_CASE)
    #set($CAUSE_CODE = $ApplicationConstants.CC_SQL_NAME)
    #set($SUBCAUSE_CODE = $ApplicationConstants.SCC_SQL_NAME)
    #set($INTERNAL_CAUSE_CODE = $ApplicationConstants.ICC_SQL_NAME)
    #set($IMSI = $ApplicationConstants.IMSI_PARAM_UPPER_CASE)
    #set($PTMSI = $ApplicationConstants.PTMSI_PARAM_UPPER_CASE)
    #set($TAC = $ApplicationConstants.TAC_PARAM_UPPER_CASE)
    #set($MSISDN = $ApplicationConstants.MSISDN_PARAM_UPPER_CASE)
    #set($TYPE_APN = $ApplicationConstants.TYPE_APN)
    #set($TYPE_BSC = $ApplicationConstants.TYPE_BSC)
    #set($TYPE_SGSN = $ApplicationConstants.TYPE_SGSN)
    #set($TYPE_CELL = $ApplicationConstants.TYPE_CELL)
    #set($TYPE_TAC = $ApplicationConstants.TYPE_TAC)
    #set($TYPE_IMSI = $ApplicationConstants.TYPE_IMSI)
    #set($TYPE_RNC = $ApplicationConstants.TYPE_RNC)
    #set($TYPE_PTMSI = $ApplicationConstants.TYPE_PTMSI)
    #set($TYPE_MSC = $ApplicationConstants.TYPE_MSC)
    #set($TYPE_GGSN = $ApplicationConstants.TYPE_GGSN)
    #set($TYPE_QOS = $ApplicationConstants.TYPE_QOS)
    #set($TYPE_MSISDN=$ApplicationConstants.TYPE_MSISDN)
    #set($TYPE_MAN = $ApplicationConstants.TYPE_MAN)
    #set($RAW_ERR_TABLES = ${rawErrTables})
    #set($RAW_SUC_TABLES = ${rawSucTables})
    #set($RAW_TABLES = ${rawtables})
    #set($DATETIME_ID=$ApplicationConstants.DATETIME_ID)
    #set($EVENT_ID=$ApplicationConstants.EVENT_ID_SQL_PARAM)
    #set($EVENT_RECURRING = $ApplicationConstants.EVENT_RECURRING)
#end

#macro(SET_GROUP_TYPE $type)
    #if(${type}==$TYPE_APN)
        #set($groupType = $ApplicationConstants.GROUP_TYPE_APN)
    #elseif (${type}==$TYPE_TAC)
        #set($groupType = $ApplicationConstants.GROUP_TYPE_TAC)
    #elseif(${type}==$TYPE_SGSN)
        #set($groupType = $ApplicationConstants.GROUP_TYPE_SGSN)
    #elseif(${type}==$TYPE_BSC)
        #set($groupType = $ApplicationConstants.GROUP_TYPE_HIER3)
    #elseif(${type}==$TYPE_CELL)
        #set($groupType = $ApplicationConstants.GROUP_TYPE_HIER1)
    #elseif(${type}==$TYPE_IMSI)
        #set($groupType = $ApplicationConstants.GROUP_TYPE_IMSI)
    #end
#end

#**
 * Calculate KPI ratio for event analysis summary
 *#
#macro(CALCULATE_KPI_RATIO)
    CASE
        WHEN((#CALCULATE_PERCENTAGE(["NO_OF_SUCCESSES"] ["NO_OF_ERRORS", "NO_OF_SUCCESSES"]) = 100) AND ((NO_OF_ERRORS + 0) > 0))
            THEN 99.99
        ELSE
            #CALCULATE_PERCENTAGE(["NO_OF_SUCCESSES"] ["NO_OF_ERRORS", "NO_OF_SUCCESSES"])
    END
#end


#**
 * Format (possibly multiple) event ids
 * will return something like:
 *             in (3,5)
 * or
 *            in(0)
 *
 *@param eventIDs - linked list, first element is the event id parameter from a URI, a comma separated list of event ids (eg 2,3)
 *#
#macro(FORMAT_EVENT_IDS_FOR_IN $eventIDs )
    #set($result = "in (")
    #set($eventIDsArray = $eventIDs.split($ApplicationConstants.COMMA))
    #foreach ($eventIdInArray in $eventIDsArray)
        #set($result = "$result$eventIdInArray$ApplicationConstants.COMMA")
    #end
    #set($indexOfLastChar = $result.length() - 1)
    #set($resultWithoutTrailingComma = $result.substring(0,$indexOfLastChar))
    $resultWithoutTrailingComma$ApplicationConstants.CLOSING_BRACKET
#end

##new function used to replace raw view with raw tables
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES $rawtables $rawview)
(
    #foreach ($rawtable in $rawtables)
    select
    *
    from dc.$rawtable
    where
        #GET_DATETIME_RANGE()
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

##new function used to replace raw view with raw tables with adjusted times
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_ADJUSTED_TIME $rawtables $rawview)
(
    #foreach ($rawtable in $rawtables)
    select
    *
    from dc.$rawtable
    where
        #GET_ADJUSTED_DATETIME_RANGE()
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

##new function used to replace raw view with raw tables
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WEEK $rawtables $rawview)
(
    #foreach ($rawtable in $rawtables)
    select
    *
    from dc.$rawtable
    where
        #GET_DATE_RANGE_LOCAL()
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end


##new function used to replace raw view with raw tables
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_COLUMNS $rawtables $rawview $rawcolumns $columns)
(
    #foreach ($rawtable in $rawtables)
    select
        #GET_COLUMNS($rawcolumns)
        #GET_COLUMNS($columns)
    DATETIME_ID, EVENT_ID, EVENT_SUBTYPE_ID
    from dc.$rawtable
    where
        #GET_DATETIME_RANGE()
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end


#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_SPECIFY_COLUMNS_IMSI0_EXCLUSION $rawtables $rawview $columnsToIncludeInResult)
    #PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_SPECIFY_COLUMNS($rawtables $rawview $columnsToIncludeInResult true)
#end
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_SPECIFY_COLUMNS $rawtables $rawview $columnsToIncludeInResult)
    #PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_SPECIFY_COLUMNS($rawtables $rawview $columnsToIncludeInResult false)
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_SPECIFY_COLUMNS_WEEK $rawtables $rawview $columnsToIncludeInResult)
    #PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_SPECIFY_COLUMNS_WEEK($rawtables $rawview $columnsToIncludeInResult false)
#end

##-----------------------------------------------------------------------------
## function used to iterate over list of raw tables
##
## rawtables: list of raw tables
## rawview: what to call the final result
## columnsToIncludeInResult: columns from raw tables that should be included in select from
##-----------------------------------------------------------------------------
#macro (PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_SPECIFY_COLUMNS $rawtables $rawview $columnsToIncludeInResult $useImsiZeroExclusion)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInResult)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInResult.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATETIME_RANGE()
        #if ($useImsiZeroExclusion)
        and #GET_IMSI0_EXCLUSION($rawtable)
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_SPECIFY_COLUMNS_WEEK $rawtables $rawview $columnsToIncludeInResult $useImsiZeroExclusion)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInResult)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInResult.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATE_RANGE_LOCAL()
        #if ($useImsiZeroExclusion)
        and #GET_IMSI0_EXCLUSION($rawtable)
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

##new function used to replace raw view with raw tables with filter columns (more efficient)
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS $rawtables $rawview $columns)
(
    #foreach ($rawtable in $rawtables)
    select
    *
    from dc.$rawtable
    where
        #GET_DATETIME_RANGE()
    and #GET_COLUMNS_WHERE($columns)
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end


##new function used to replace raw view with raw tables with tac exclusion
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION $rawtables $rawview)
(
    #foreach ($rawtable in $rawtables)
    select
    *
    from dc.$rawtable
    where
        #GET_DATETIME_RANGE()
    and #GET_TAC_EXCLUSION()
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

##new function used to replace raw view with raw tables with tac exclusion
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_WEEK $rawtables $rawview)
(
    #foreach ($rawtable in $rawtables)
    select
        *
    from dc.$rawtable
    where
        #GET_DATE_RANGE_LOCAL()
    and #GET_TAC_EXCLUSION()
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

##new function used to replace raw view with raw tables with tac exclusion
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_OPTIONAL_TAC_EXCLUSION $rawtables $rawview)
(
    #foreach ($rawtable in $rawtables)
    select
    *
    from dc.$rawtable
    where
        #if ($timerange == "TR_4")
            #GET_ADJUSTED_DATETIME_RANGE()
        #else
            #GET_DATETIME_RANGE()
        #end
        #if ($useTACExclusion)
        and #GET_TAC_EXCLUSION()
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_MANUFACTURER_WITH_OPTIONAL_TAC_EXCLUSION $rawtables $rawview)
(
    #foreach ($rawtable in $rawtables)
    select
    *
    from dc.$rawtable raw,
    dc.DIM_E_SGEH_TAC tac
    where
    raw.tac = tac.tac
    and  tac.MANUFACTURER=:MANUFACTURER
    and #GET_DATETIME_RANGE()
        #if ($useTACExclusion)
        and #GET_TAC_EXCLUSION_BY_TABLE("raw")
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

##new function used to replace raw view with raw tables without tac exclusion and columns without NULL values
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITHOUT_TAC_EXCLUSION_SPECIFY_COLUMNS_AND_NOT_NULL_COLUMNS $rawtables $rawview $columnsToIncludeInNewView $notNullColumns)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATETIME_RANGE()
    and #GET_COLUMNS_WHERE_NOT_NULL($notNullColumns)
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

##new function used to replace raw view with raw tables with filter columns and tac exclusion
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_WITH_TAC_EXCLUSION $rawtables $rawview $columns)
(
    #foreach ($rawtable in $rawtables)
    select
    *
    from dc.$rawtable
    where
        #GET_DATETIME_RANGE()
    and #GET_COLUMNS_WHERE($columns)
    and #GET_TAC_EXCLUSION()
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_WITH_TAC_EXCLUSION_WITH_TIMERANGE $rawtables $rawview $columns)
(
    #foreach ($rawtable in $rawtables)
    select
    *
    from dc.$rawtable
    where
        #if ($timerange == "TR_4")
        #GET_DATE_RANGE_LOCAL()
        #else
        #GET_DATETIME_RANGE()
        #end
    and #GET_COLUMNS_WHERE($columns)
    and #GET_TAC_EXCLUSION()
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_WITH_TAC_EXCLUSION_WEEK $rawtables $rawview $columns)
(
    #foreach ($rawtable in $rawtables)
    select
            *
    from dc.$rawtable
    where
        #GET_DATE_RANGE_LOCAL()
    and #GET_COLUMNS_WHERE($columns)
    and #GET_TAC_EXCLUSION()
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end


##new function used to replace raw view with raw tables with filter columns and tac exclusion
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_WITH_TAC_EXCLUSION_ROAMING_MCC $rawtables $rawview $columns)
(
    #foreach ($rawtable in $rawtables)
    select
        ${rawtable}.*
    from dc.$rawtable
    where
    IMSI_MCC = '${MCC}'
    and ROAMING = 1
    and EVENT_ID = :eventID
    and
    #if ($timerange == "TR_4")
    #GET_DATE_RANGE_LOCAL()
    #else
    #GET_DATETIME_RANGE()
    #end
    and #GET_TAC_EXCLUSION()
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end


##new function used to replace raw view with raw tables with filter columns and tac exclusion
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_WITH_TAC_EXCLUSION_ROAMING_MCC_MNC $rawtables $rawview $columns)
(
    #foreach ($rawtable in $rawtables)
    select
        ${rawtable}.*
    from dc.$rawtable
    where
    IMSI_MCC= '${MCC}'
    and IMSI_MNC= '${MNC}'
    and ROAMING = 1
    and EVENT_ID = :eventID
    and
        #if ($timerange == "TR_4")
        #GET_DATE_RANGE_LOCAL()
        #else
        #GET_DATETIME_RANGE()
        #end
    and #GET_TAC_EXCLUSION()
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end



##new function used to replace raw view with raw tables with tac exclusion and roaming
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_AND_ROAMING $rawtables $rawview $columnsToIncludeInNewView)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATETIME_RANGE()
    and #GET_TAC_EXCLUSION()
    and ROAMING = 1
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

##new function used to replace raw view with raw tables with tac exclusion and roaming
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_AND_ROAMING_WEEK $rawtables $rawview $columnsToIncludeInNewView)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
    #GET_DATE_RANGE_LOCAL()
    and #GET_TAC_EXCLUSION()
    and ROAMING = 1
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end


##new function used to replace raw view with raw tables with tac exclusion and roaming
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_AND_ROAMING_MCC $rawtables $rawview $columnsToIncludeInNewView)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #if ($timerange == "TR_4")
        #GET_DATE_RANGE_LOCAL()
        #else
        #GET_DATETIME_RANGE()
        #end
    and #GET_TAC_EXCLUSION()
    and ROAMING = 1
    and IMSI_MCC = '${MCC}'
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end


##new function used to replace raw view with raw tables with tac exclusion and roaming
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_AND_ROAMING_MCC_MNC $rawtables $rawview $columnsToIncludeInNewView)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #if ($timerange == "TR_4")
        #GET_DATE_RANGE_LOCAL()
        #else
        #GET_DATETIME_RANGE()
        #end
    and #GET_TAC_EXCLUSION()
    and ROAMING = 1
    and IMSI_MCC = '${MCC}'
    and IMSI_MNC = '${MNC}'
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end




#macro (RAW_TABLE_TO_VIEW_SELECT $networkType)
select
DATETIME_ID,
    #if ($networkType != $ApplicationConstants.LTE)
    OLD_SGSN_IPADDRESS,
    PDP_GGSN_IPADDRESS_2,
    PDP_GGSN_IPADDRESS_1,
    PDP_GGSN_NAME_1,
    GGSN_NAME,
    #else
    null as OLD_SGSN_IPADDRESS,
    #end

    RAT,
    SUBCAUSE_CODE,
    SERVICE_REQ_TRIGGER,
    DETACH_TYPE,
    DETACH_TRIGGER,
    DEACTIVATION_TRIGGER,
    CAUSE_CODE,
    CAUSE_PROT_TYPE,
    ATTACH_TYPE,
    EVENT_RESULT,
    EVENT_ID,
    #if($csv == true)
        DATEADD(minute,$tzOffset,EVENT_TIME)AS 'EVENT_TIME',
       #else
     EVENT_TIME AS 'EVENT_TIME',
       #end
    IMSI,
    #if ($networkType != $ApplicationConstants.LTE)
    PTMSI,
    #else
    null as PTMSI,
    #end

TAC,
EVENT_SOURCE_NAME,
HIERARCHY_3,
HIERARCHY_2,
HIERARCHY_1,
VENDOR,

    #if ($networkType != $ApplicationConstants.LTE)
    LINKED_NSAPI,
    PDP_NSAPI_1,
    PDP_MS_IPADDRESS_1,
    PDP_NSAPI_2,
    PDP_GGSN_NAME_2,
    PDP_MS_IPADDRESS_2 ,
    #else
    null as LINKED_NSAPI,
    null as PDP_NSAPI_1,
    null as PDP_NSAPI_2,
    #end

PAGING_ATTEMPTS,
REQUEST_RETRIES ,
APN,
IMSI_MCC,
IMSI_MNC,

    #if ($networkType != $ApplicationConstants.LTE)
    RAC,
    LAC,
    UPDATE_TYPE,
    OLD_RAC,
    OLD_LAC,
    TRANSFERRED_PDP,
    DROPPED_PDP,
    HLR,
    #else
    null as RAC,
    null as LAC,
    null as UPDATE_TYPE,
    null as OLD_RAC,
    null as OLD_LAC,
    null as TRANSFERRED_PDP,
    null as DROPPED_PDP,
    null as HLR,

    #end

OLD_MCC,
OLD_MNC,
DURATION
#end




##new function used to replace raw view with raw tables with tac exclusion roaming and event id
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_ROAMING_EVENTID_MCC $networkType $rawtables $rawview $columnsToIncludeInNewView $columnsNotNull)
(
    #foreach ($rawtable in $rawtables)
        #RAW_TABLE_TO_VIEW_SELECT($networkType)
    from dc.$rawtable,
    DIM_E_SGEH_MCCMNC mccmncref
    where
    COUNTRY='${countryName}'
    and dc.${rawtable}.IMSI_MCC = mccmncref.MCC
    and #GET_DATETIME_RANGE()
    and #GET_TAC_EXCLUSION()
    and ROAMING = 1
    and EVENT_ID = :eventID
        #foreach ($columnNotNull in $columnsNotNull)
        and $columnNotNull is not null
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end


##new function used to replace raw view with raw tables with tac exclusion roaming and event id
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_ROAMING_EVENTID_MCC_MNC $networkType $rawtables $rawview $columnsToIncludeInNewView $columnsNotNull)
(
    #foreach ($rawtable in $rawtables)
        #RAW_TABLE_TO_VIEW_SELECT($networkType)
    from dc.$rawtable,
    DIM_E_SGEH_MCCMNC mccmncref
    where
    COUNTRY='${countryName}' and
    OPERATOR='${operatorName}'
    and dc.${rawtable}.IMSI_MCC = mccmncref.MCC
    and dc.${rawtable}.IMSI_MNC = mccmncref.MNC
    and #GET_DATETIME_RANGE()
    and #GET_TAC_EXCLUSION()
    and ROAMING = 1
    and EVENT_ID = :eventID
        #foreach ($columnNotNull in $columnsNotNull)
        and $columnNotNull is not null
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end


##-----------------------------------------------------------------------------
## Macro used to select columns from raw tables according to datetime range,
## $columnsNotNull are not null, roaming = 1 and tac group is not EXCLUSIVE_TAC
##
## rawtables        list of raw tables to query
## rawview          result of this query will be called rawview
## columnsToIncludeInResult         columns to select from raw tables, and include in final view
## columnsNotNull  columns are not null
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_SPECIFY_COLUMNS_NOT_NULL_WITH_TAC_EXCLUSION_AND_ROAMING $rawtables $rawview $columnsToIncludeInResult $columnsNotNull)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInResult)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInResult.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATETIME_RANGE()
    and #GET_TAC_EXCLUSION()
    and roaming = 1

        #foreach ($columnNotNull in $columnsNotNull)
        and $columnNotNull is not null
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
)
    #if ($rawview != "")
    as $rawview
    #end
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_IMSI0_EXCLUSION $rawtables $rawview $columnsToIncludeInNewView)
    #PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS($rawtables $rawview $columnsToIncludeInNewView true)
#end
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS $rawtables $rawview $columnsToIncludeInNewView)
    #PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS($rawtables $rawview $columnsToIncludeInNewView false)
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_WEEK $rawtables $rawview $columnsToIncludeInNewView)
    #PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_WEEK($rawtables $rawview $columnsToIncludeInNewView false)
#end

##new function used to replace raw view with raw tables with tac exclusion
#macro (PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS $rawtables $rawview $columnsToIncludeInNewView $useImsiZeroExclusion)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATETIME_RANGE()
    and #GET_TAC_EXCLUSION()
        #if ($useImsiZeroExclusion)
        and #GET_IMSI0_EXCLUSION($rawtable)
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

##new function used to replace raw view with raw tables with tac exclusion
#macro (PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_WEEK $rawtables $rawview $columnsToIncludeInView $useImsiZeroExclusion)
(
    #foreach ($rawtable in $rawtables)
    #SELECT_COLUMNS_FOR_VIEW($rawtables $columnsToIncludeInView)
    where
        #GET_DATE_RANGE_LOCAL()
    and #GET_TAC_EXCLUSION()
        #if ($useImsiZeroExclusion)
        and #GET_IMSI0_EXCLUSION($rawtable)
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end


#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AND_NOT_NULL_COLUMNS $rawtables $rawview $columnsToIncludeInNewView $notNullColumns)
    #PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AND_NOT_NULL_COLUMNS($rawtables $rawview $columnsToIncludeInNewView $notNullColumns false)
#end
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AND_NOT_NULL_COLUMNS_AND_IMSI0_EXCLUSION $rawtables $rawview $columnsToIncludeInNewView $notNullColumns)
    #PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AND_NOT_NULL_COLUMNS($rawtables $rawview $columnsToIncludeInNewView $notNullColumns true)
#end

##new function used to replace raw view with raw tables with tac exclusion and columns without NULL values
#macro (PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AND_NOT_NULL_COLUMNS $rawtables $rawview $columnsToIncludeInNewView $notNullColumns $useImsiZeroExclusion)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATETIME_RANGE()
        #if ($useImsiZeroExclusion)
        and #GET_IMSI0_EXCLUSION($rawtable)
        #end
    and #GET_TAC_EXCLUSION()
    and #GET_COLUMNS_WHERE_NOT_NULL($notNullColumns)
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

##new function used to replace raw view with raw tables with tac exclusion and columns without NULL values for groups
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AND_NOT_NULL_COLUMNS_GROUPS $rawtables $rawview $columnsToIncludeInNewView $notNullColumns)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable ,
        $groupTable group_table
    where
        #GET_DATETIME_RANGE()
    and #GET_TAC_EXCLUSION_BY_TABLE($rawtable)
    and #GET_JOIN($rawtable "group_table" $joinKeys)
    and group_table.${groupnameColumn} = :$ApplicationConstants.GROUP_NAME_PARAM
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

##new function used to replace raw view with raw tables with tac exclusion and columns without NULL values for groups
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AND_NOT_NULL_COLUMNS_GROUPS $rawtables $rawview $columnsToIncludeInNewView $notNullColumns)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable ,
        $groupTable group_table
    where
        #GET_DATETIME_RANGE()
    and #GET_TAC_EXCLUSION_BY_TABLE($rawtable)
    and #GET_JOIN($rawtable "group_table" $joinKeys)
    and group_table.${groupnameColumn} = :$ApplicationConstants.GROUP_NAME_PARAM
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (UNION_ALL_RAW_TABLES $rawtables $rawview)
(
    #foreach ($rawtable in $rawtables)
    select *
    from dc.$rawtable
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end


#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS $rawtables $rawview $columnsToIncludeInNewView)
    #PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS($rawtables $rawview $columnsToIncludeInNewView false)
#end
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WEEK $rawtables $rawview $columnsToIncludeInNewView)
    #PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WEEK($rawtables $rawview $columnsToIncludeInNewView false)
#end
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_CELL_ANALYSIS $rawtables $groupTable $groupnameColumn $joinKeys $rawview $columnsToIncludeInNewView)
    #PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_CELL_ANALYSIS($rawtables $groupTable $groupnameColumn $joinKeys $rawview $columnsToIncludeInNewView false)
#end
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WITH_IMSI0_EXCLUSION $rawtables $rawview $columnsToIncludeInNewView)
    #PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS($rawtables $rawview $columnsToIncludeInNewView true)
#end

##new function to replace raw views with raw tables and specify columns to be contained in the result set
##this function filters only on the datetime range
#macro (PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS $rawtables $rawview $columnsToIncludeInNewView $useImsiZeroExclusion)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATETIME_RANGE()
        #if ($useImsiZeroExclusion)
        and #GET_IMSI0_EXCLUSION($rawtable)
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

##new function to replace raw views with raw tables and specify columns to be contained in the result set
##this function filters only on the datetime range
#macro (PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WEEK $rawtables $rawview $columnsToIncludeInNewView $useImsiZeroExclusion)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATE_RANGE_LOCAL()
        #if ($useImsiZeroExclusion)
        and #GET_IMSI0_EXCLUSION($rawtable)
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

##new function to replace raw views with raw tables and specify columns to be contained in the result set
##this function filters only on the datetime range
#macro (PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_CELL_ANALYSIS $rawtables $groupTable $groupnameColumn $joinKeys $rawview $columnsToIncludeInNewView $useImsiZeroExclusion)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable AS raw, dc.$groupTable groupref
    where
        #GET_JOIN("raw" "groupref" $joinKeys)
    AND $groupnameColumn = :$ApplicationConstants.GROUP_NAME_PARAM
    AND
        #if ($timerange == "TR_4")
        #GET_DATE_RANGE_LOCAL()
        #else
        #GET_DATETIME_RANGE()
        #end
        #if ($useImsiZeroExclusion)
        AND #GET_IMSI0_EXCLUSION($rawtable)
        #end
    group by
    RAT,
    VENDOR,
    HIERARCHY_3,
    HIERARCHY_2,
    HIERARCHY_1
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

##new function to replace raw views with raw tables and specify columns to be contained in the result set
##this function filters only on the datetime range
#macro (PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WITH_TAC_EXCLUSION $rawtables $rawview $columnsToIncludeInNewView $useImsiZeroExclusion $useImsiNullExclusion)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATETIME_RANGE()
    and #GET_TAC_EXCLUSION()
        #if ($useImsiZeroExclusion)
        and #GET_IMSI0_EXCLUSION($rawtable)
        #end
        #if ($useImsiNullExclusion)
        and #GET_IMSINULL_EXCLUSION($rawtable)
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end


##new function to replace raw views with raw tables and specify columns to be contained in the result set
##this function filters only on the datetime range
#macro (PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WITH_TAC_EXCLUSION_SUC $rawtables $rawview $columnsToIncludeInNewView $useImsiZeroExclusion $useImsiNullExclusion)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATETIME_RANGE()
    and #GET_TAC_EXCLUSION()
        #if ($useImsiZeroExclusion)
        and #GET_IMSI0_EXCLUSION($rawtable)
        #end
        #if ($useImsiNullExclusion)
        and #GET_IMSINULL_EXCLUSION($rawtable)
        #end
    and dc.${rawtable}.IMSI in (select IMSI from temp_imsi_ranking_table)
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end


##new function to replace raw views with raw tables and specify columns to be contained in the result set
##this function filters only on the datetime range
#macro (PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WITH_TAC_EXCLUSION $rawtables $rawview $columnsToIncludeInNewView $useImsiZeroExclusion $useImsiNullExclusion)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATETIME_RANGE()
    and #GET_TAC_EXCLUSION()
        #if ($useImsiZeroExclusion)
        and #GET_IMSI0_EXCLUSION($rawtable)
        #end
        #if ($useImsiNullExclusion)
        and #GET_IMSINULL_EXCLUSION($rawtable)
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WITH_TAC_EXCLUSION_IMSI0_EXCLUSION_IMSINULL_EXCLUSION $rawtables $rawview $columnsToIncludeInNewView)
    #PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WITH_TAC_EXCLUSION($rawtables $rawview $columnsToIncludeInNewView true true)
#end


#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WITH_TAC_EXCLUSION_IMSI0_EXCLUSION $rawtables $rawview $columnsToIncludeInNewView)
    #PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WITH_TAC_EXCLUSION($rawtables $rawview $columnsToIncludeInNewView true false)
#end
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WITH_TAC_EXCLUSION $rawtables $rawview $columnsToIncludeInNewView)
    #PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WITH_TAC_EXCLUSION($rawtables $rawview $columnsToIncludeInNewView false false)
#end
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WITH_TAC_EXCLUSION_IMSI0_EXCLUSION_IMSINULL_EXCLUSION $rawtables $rawview $columnsToIncludeInNewView)
    #PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WITH_TAC_EXCLUSION($rawtables $rawview $columnsToIncludeInNewView true true)
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WITH_TAC_EXCLUSION_IMSI0_EXCLUSION_SUC $rawtables $rawview $columnsToIncludeInNewView)
    #PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WITH_TAC_EXCLUSION_SUC($rawtables $rawview $columnsToIncludeInNewView true false)
#end

##new function used to replace raw view with raw tables with filter columns and tac exclusion
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS $rawtables $rawview $columns $columnsToIncludeInNewView)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_COLUMNS_WHERE($columns)
    and #GET_DATETIME_RANGE()
    and #GET_TAC_EXCLUSION()
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

##new function used to replace raw view with raw tables with filter columns and tac exclusion
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_WEEK $rawtables $rawview $columns $columnsToIncludeInView)
(
    #foreach ($rawtable in $rawtables)
    #SELECT_COLUMNS_FOR_VIEW($rawtables $columnsToIncludeInView)
    where
        #GET_COLUMNS_WHERE($columns)
    and #GET_DATE_RANGE_LOCAL()
    and #GET_TAC_EXCLUSION()
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

##new function used to replace raw view with raw tables with filter columns and tac exclusion
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_WITH_TAC_EXCLUSION_IMSI0_EXCLUSION_SPECIFY_COLUMNS $rawtables $rawview $columns $columnsToIncludeInNewView)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_COLUMNS_WHERE($columns)
    and
    #if ($timerange=="TR_4")
         #GET_DATE_RANGE_LOCAL()
         #else
         #GET_DATETIME_RANGE()
    #end
    and #GET_TAC_EXCLUSION()
    and #GET_IMSI0_EXCLUSION($rawtable)
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end


##new function used to replace raw view with raw tables with filter columns
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_SPECIFY_COLUMNS $rawtables $rawview $columns $columnsToIncludeInNewView)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATETIME_RANGE()
    and #GET_COLUMNS_WHERE($columns)
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

##new function used to replace raw view with raw tables with filter columns
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_SPECIFY_COLUMNS_WEEK $rawtables $rawview $columns $columnsToIncludeInView)
(
    #foreach ($rawtable in $rawtables)
    #SELECT_COLUMNS_FOR_VIEW($rawtables $columnsToIncludeInView)
    where
        #GET_DATE_RANGE_LOCAL()
    and #GET_COLUMNS_WHERE($columns)
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_SPECIFY_COLUMNS_WITH_EVENT_TIME $rawtables $rawview $columns $columnsToIncludeInNewView)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATETIME_RANGE()
    and #GET_COLUMNS_WHERE($columns)
        #AND_EVENTTIME_RANGE()
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

##used to replace raw view with raw tables with filter columns and extra where conditions
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_SPECIFY_COLUMNS_EXTRA_WHERE_COND $rawtables $rawview $columnsToSelect $columnsToFilter $extraWhereConditions)
    #if($rawview!="")
    (
    #end
    #foreach ($rawtable in $rawtables)
    SELECT
        #foreach ($columnToSelect in $columnsToSelect)
            $columnToSelect
            #if($velocityCount < $columnsToSelect.size())
            ,
            #end
        #end
    FROM dc.$rawtable raw
    WHERE
        #GET_COLUMNS_WHERE($columnsToFilter)
        #foreach ($extraWhereCondition in $extraWhereConditions)
        AND $extraWhereCondition
        #end
    AND #GET_DATETIME_RANGE()

        #if($velocityCount < $rawtables.size())
        UNION ALL
        #end
    #end
    #if($rawview!="")
    ) AS $rawview
    #end
#end

##used to replace raw view with raw tables with filter columns and extra where conditions
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_SPECIFY_COLUMNS_EXTRA_WHERE_COND_AND_TAC_EXCLUSION $rawtables $rawview $joinTables $columnsToSelect $columnsToFilter $extraWhereConditions)
(
    #foreach ($rawtable in $rawtables)
    SELECT
        #foreach ($columnToSelect in $columnsToSelect)
            $columnToSelect
            #if($velocityCount < $columnsToSelect.size())
            ,
            #end
        #end
    FROM dc.$rawtable raw
        #foreach ($joinTable in $joinTables)
        , $joinTable
        #end
    WHERE
        #if($columnsToFilter.size()>0)
            #GET_COLUMNS_WHERE($columnsToFilter) AND
        #end
        #foreach ($extraWhereCondition in $extraWhereConditions)
            $extraWhereCondition AND
        #end
        #GET_DATETIME_RANGE()
    AND #GET_TAC_EXCLUSION()
        #if($velocityCount < $rawtables.size())
        UNION ALL
        #end
    #end
) AS $rawview
#end


##new function used to replace raw view with raw tables with filter columns, columns without NULL values and tac exclusion
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AND_NOT_NULL_COLUMNS $rawtables $rawview $columns $columnsToIncludeInNewView $notNullColumns)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATETIME_RANGE()
    and #GET_COLUMNS_WHERE($columns)
    and #GET_COLUMNS_WHERE_NOT_NULL($notNullColumns)
    and #GET_TAC_EXCLUSION()
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AND_NOT_NULL_COLUMNS_WEEK $rawtables $rawview $columns $columnsToIncludeInNewView $notNullColumns)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATE_RANGE_LOCAL()
    and #GET_COLUMNS_WHERE($columns)
    and #GET_COLUMNS_WHERE_NOT_NULL($notNullColumns)
    and #GET_TAC_EXCLUSION()
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_SPECIFY_COLUMNS_WITH_TAC_EXCLUSION_AND_NOT_NULL_COLUMNS $rawtables $rawview  $columnsToIncludeInNewView $notNullColumns)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATETIME_RANGE()
    and #GET_COLUMNS_WHERE_NOT_NULL($notNullColumns)
    and #GET_TAC_EXCLUSION()
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

##-----------------------------------------------------------------------------
## Query list of raw tables and group table for given parameters
##
## As well as method parameters below, method requires the group related parameters to be set
## eg $groupTable, $groupnameColumn
## It also requires the group name parameter to be set for the query
##
## rawtables        list of raw tables to query
## rawview            result of this query will be called rawview
## columnsToIncludeInNewView            columns to select from raw tables, and include in final view
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_GROUPS $rawtables $rawview $columnsToIncludeInNewView)
(
    #foreach ($rawtable in $rawtables)
    select
    GROUP_NAME,
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $rawtable.$columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable,
        $groupTable group_table
    where
        #GET_DATETIME_RANGE()
    and #GET_TAC_EXCLUSION_BY_TABLE($rawtable)
    and #GET_JOIN($rawtable "group_table" $joinKeys)
    and group_table.${groupnameColumn} = :$ApplicationConstants.GROUP_NAME_PARAM
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_GROUPS_WEEK $rawtables $rawview $columnsToIncludeInNewView)
(
    #foreach ($rawtable in $rawtables)
    select
    GROUP_NAME,
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $rawtable.$columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable,
        $groupTable group_table
    where
        #GET_DATE_RANGE_LOCAL()
    and #GET_TAC_EXCLUSION_BY_TABLE($rawtable)
    and #GET_JOIN($rawtable "group_table" $joinKeys)
    and group_table.${groupnameColumn} = :$ApplicationConstants.GROUP_NAME_PARAM
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_SPECIFY_COLUMNS_GROUPS $rawtables $rawview $columnsToIncludeInNewView)
(
    #foreach ($rawtable in $rawtables)
    select
    GROUP_NAME,
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $rawtable.$columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable,
        $groupTable group_table
    where
        #GET_DATETIME_RANGE()
    and #GET_JOIN($rawtable "group_table" $joinKeys)
    and group_table.${groupnameColumn} = :$ApplicationConstants.GROUP_NAME_PARAM
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_SPECIFY_COLUMNS_GROUPS_WEEK $rawtables $rawview $columnsToIncludeInNewView)
(
    #foreach ($rawtable in $rawtables)
    select
    GROUP_NAME,
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $rawtable.$columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable,
        $groupTable group_table
    where
        #GET_DATE_RANGE_LOCAL()
    and #GET_JOIN($rawtable "group_table" $joinKeys)
    and group_table.${groupnameColumn} = :$ApplicationConstants.GROUP_NAME_PARAM
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

##-----------------------------------------------------------------------------
## Query list of raw tables and group table for given parameters
##
## As well as method parameters below, method requires the group related parameters to be set
## eg $groupTable, $groupnameColumn
## It also requires the group name parameter to be set for the query
##
## rawtables        list of raw tables to query
## rawview            result of this query will be called rawview
## columnsToIncludeInNewView            columns to select from raw tables, and include in final view
## $conditionColumns        condition columns for tables represented by $rawtables parameter
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_WITH_TAC_EXCLUSION_CONDITION_COLUMNS_GROUPS $rawtables $rawview $conditionColumns $columnsToIncludeInNewView)
(
    #foreach ($rawtable in $rawtables)
    select
    GROUP_NAME,
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $rawtable.$columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable,
        $groupTable group_table
    where
        #GET_DATETIME_RANGE()
    and #GET_COLUMNS_WHERE_BY_TABLE($rawtable $conditionColumns)
    and #GET_TAC_EXCLUSION_BY_TABLE($rawtable)
    and #GET_JOIN($rawtable "group_table" $joinKeys)
    and group_table.${groupnameColumn} = :$ApplicationConstants.GROUP_NAME_PARAM
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_WITH_TAC_EXCLUSION_CONDITION_COLUMNS_GROUPS_WEEK $rawtables $rawview $conditionColumns $columnsToIncludeInNewView)
(
    #foreach ($rawtable in $rawtables)
    select
    GROUP_NAME,
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $rawtable.$columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable,
        $groupTable group_table
    where
        #GET_DATE_RANGE_LOCAL()
    and #GET_COLUMNS_WHERE_BY_TABLE($rawtable $conditionColumns)
    and #GET_TAC_EXCLUSION_BY_TABLE($rawtable)
    and #GET_JOIN($rawtable "group_table" $joinKeys)
    and group_table.${groupnameColumn} = :$ApplicationConstants.GROUP_NAME_PARAM
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end


##-----------------------------------------------------------------------------
## Query list of raw tables and group table for given parameters
##
## As well as method parameters below, method requires the group related parameters to be set
## eg $groupTable, $groupnameColumn
## It also requires the group name parameter to be set for the query
##
## rawtables        list of raw tables to query
## rawview            result of this query will be called rawview
## columnsToIncludeInNewView            columns to select from raw tables, and include in final view
## $conditionColumns        condition columns for tables represented by $rawtables parameter
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_CONDITION_COLUMNS_GROUPS $rawtables $rawview $conditionColumns $columnsToIncludeInNewView)
(
    #foreach ($rawtable in $rawtables)
    select
    GROUP_NAME,
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $rawtable.$columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable,
        $groupTable group_table
    where
        #GET_DATETIME_RANGE()
    and #GET_COLUMNS_WHERE_BY_TABLE($rawtable $conditionColumns)
    and #GET_JOIN($rawtable "group_table" $joinKeys)
    and group_table.${groupnameColumn} = :$ApplicationConstants.GROUP_NAME_PARAM
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_CONDITION_COLUMNS_GROUPS_WEEK $rawtables $rawview $conditionColumns $columnsToIncludeInNewView)
(
    #foreach ($rawtable in $rawtables)
    select
    GROUP_NAME,
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $rawtable.$columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable,
        $groupTable group_table
    where
        #GET_DATE_RANGE_LOCAL()
    and #GET_COLUMNS_WHERE_BY_TABLE($rawtable $conditionColumns)
    and #GET_JOIN($rawtable "group_table" $joinKeys)
    and group_table.${groupnameColumn} = :$ApplicationConstants.GROUP_NAME_PARAM
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

##new function used to replace raw view with raw tables with tac exclusion and columns without NULL values
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AND_NOT_NULL_COLUMNS_GROUPS $rawtables $rawview $columnsToIncludeInNewView $notNullColumns)
(
    #foreach ($rawtable in $rawtables)
    select
    GROUP_NAME,
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $rawtable.$columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable,
        $groupTable group_table
    where
        #GET_DATETIME_RANGE()
    and #GET_TAC_EXCLUSION_BY_TABLE($rawtable)
    and #GET_JOIN($rawtable "group_table" $joinKeys)
    and #GET_COLUMNS_WHERE_NOT_NULL($notNullColumns)
    and group_table.${groupnameColumn} = :$ApplicationConstants.GROUP_NAME_PARAM
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AND_NOT_NULL_COLUMNS_GROUPS_WEEK $rawtables $rawview $columnsToIncludeInNewView $notNullColumns)
(
    #foreach ($rawtable in $rawtables)
    select
    GROUP_NAME,
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $rawtable.$columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable,
        $groupTable group_table
    where
        #GET_DATE_RANGE_LOCAL()
    and #GET_TAC_EXCLUSION_BY_TABLE($rawtable)
    and #GET_JOIN($rawtable "group_table" $joinKeys)
    and #GET_COLUMNS_WHERE_NOT_NULL($notNullColumns)
    and group_table.${groupnameColumn} = :$ApplicationConstants.GROUP_NAME_PARAM
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

##new function used to replace raw view with raw tables with filter columns (more efficient)
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_SPECIFY_COLUMNS $rawtables $rawview $columns $columnsToIncludeInNewView)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable rawview
        #if($isgroup)
        ,dc.$groupTable groupref
        #end
    where
        #GET_DATETIME_RANGE()
        #if($isgroup)
        and #GET_JOIN("rawview" "groupref" $joinKeys)
        and $groupnameColumn = :$ApplicationConstants.GROUP_NAME_PARAM
        #else
        and #GET_COLUMNS_WHERE($columns)
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (REPLACE_IMSI_SUC_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_SPECIFY_COLUMNS $rawtables $rawview $columns $columnsToIncludeInNewView)
(

    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    ,sum(NO_OF_SUCCESSES) as NO_OF_SUCCESSES
    from dc.$rawtable rawview
        #if($isgroup)
        ,dc.$groupTable groupref
        #end
    where
        #GET_DATETIME_RANGE()
        #if($isgroup)
        and #GET_JOIN("rawview" "groupref" $joinKeys)
        and $groupnameColumn = :$ApplicationConstants.GROUP_NAME_PARAM
        #else
        and #GET_COLUMNS_WHERE($columns)
        group by

            #foreach ($columnToInclude in $columnsToIncludeInNewView)
                $columnToInclude
                #if($velocityCount < $columnsToIncludeInNewView.size())
                ,
                #end
            #end

        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (REPLACE_IMSI_SUC_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_SPECIFY_COLUMNS_WEEK $rawtables $rawview $columns $columnsToIncludeInNewView)
(

    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    ,sum(NO_OF_SUCCESSES) as NO_OF_SUCCESSES
    from dc.$rawtable rawview
        #if($isgroup)
        ,dc.$groupTable groupref
        #end
    where
        #GET_ADJUSTED_DATETIME_RANGE()
        #if($isgroup)
        and #GET_JOIN("rawview" "groupref" $joinKeys)
        and $groupnameColumn = :$ApplicationConstants.GROUP_NAME_PARAM
        #else
        and #GET_COLUMNS_WHERE($columns)
        group by

            #foreach ($columnToInclude in $columnsToIncludeInNewView)
                $columnToInclude
                #if($velocityCount < $columnsToIncludeInNewView.size())
                ,
                #end
            #end

        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end


#macro (REPLACE_IMSI_SUC_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_SPECIFY_COLUMNS_WITH_EVENT_ID $rawtables $rawview $columns $columnsToIncludeInNewView $event_id)
(

    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    ,sum(NO_OF_SUCCESSES) as NO_OF_SUCCESSES
    from dc.$rawtable rawview
        #if($isgroup)
        ,dc.$groupTable groupref
        #end
    where
        #if ($timerange == "TR_4")
        #GET_ADJUSTED_DATETIME_RANGE()
        #else
        #GET_DATETIME_RANGE()
        #end
        #if($isgroup)
        and #GET_JOIN("rawview" "groupref" $joinKeys)
        and $groupnameColumn = :$ApplicationConstants.GROUP_NAME_PARAM
        #else
        and #GET_COLUMNS_WHERE($columns)
        and EVENT_ID = $event_id
        group by

            #foreach ($columnToInclude in $columnsToIncludeInNewView)
                $columnToInclude
                #if($velocityCount < $columnsToIncludeInNewView.size())
                ,
                #end
            #end

        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end


#macro (REPLACE_ERR_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_SPECIFY_COLUMNS $rawtables $rawview $columns $columnsToIncludeInNewView)
(

    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    ,count(*) as no_of_errors
    from dc.$rawtable rawview
        #if($isgroup)
        ,dc.$groupTable groupref
        #end
    where
        #GET_DATETIME_RANGE()
        #if($isgroup)
        and #GET_JOIN("rawview" "groupref" $joinKeys)
        and $groupnameColumn = :$ApplicationConstants.GROUP_NAME_PARAM
        #else
        and #GET_COLUMNS_WHERE($columns)
        group by

            #foreach ($columnToInclude in $columnsToIncludeInNewView)
                $columnToInclude
                #if($velocityCount < $columnsToIncludeInNewView.size())
                ,
                #end
            #end

        #end
        #if($velocityCount < $rawtables.size())


        union all
        #end
    #end
) as $rawview
#end

#macro (REPLACE_ERR_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_SPECIFY_COLUMNS_WEEK $rawtables $rawview $columns $columnsToIncludeInNewView)
(

    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    ,count(*) as no_of_errors
    from dc.$rawtable rawview
        #if($isgroup)
        ,dc.$groupTable groupref
        #end
    where
        #GET_DATE_RANGE_LOCAL()
        #if($isgroup)
        and #GET_JOIN("rawview" "groupref" $joinKeys)
        and $groupnameColumn = :$ApplicationConstants.GROUP_NAME_PARAM
        #else
        and #GET_COLUMNS_WHERE($columns)
        group by

            #foreach ($columnToInclude in $columnsToIncludeInNewView)
                $columnToInclude
                #if($velocityCount < $columnsToIncludeInNewView.size())
                ,
                #end
            #end

        #end
        #if($velocityCount < $rawtables.size())


        union all
        #end
    #end
) as $rawview
#end

#macro (REPLACE_ERR_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_SPECIFY_COLUMNS_WITH_EVENT_ID $rawtables $rawview $columns $columnsToIncludeInNewView $event_id)
(

    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    ,count(*) as no_of_errors
    from dc.$rawtable rawview
        #if($isgroup)
        ,dc.$groupTable groupref
        #end
    where
        #if ($timerange == "TR_4")
        #GET_DATE_RANGE_LOCAL()
        #else
        #GET_DATETIME_RANGE()
        #end
        #if($isgroup)
        and #GET_JOIN("rawview" "groupref" $joinKeys)
        and $groupnameColumn = :$ApplicationConstants.GROUP_NAME_PARAM
        #else
        and #GET_COLUMNS_WHERE($columns)
        and EVENT_ID = $event_id
        group by

            #foreach ($columnToInclude in $columnsToIncludeInNewView)
                $columnToInclude
                #if($velocityCount < $columnsToIncludeInNewView.size())
                ,
                #end
            #end

        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (REPLACE_ERR_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS $rawtables $rawview $columnsToIncludeInNewView)
(

    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $rawview.$columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    ,count(*) as no_of_errors
    from dc.$rawtable $rawview
        #GET_EXTRA_TABLES_IN_FROM()
    where
        #GET_DATETIME_RANGE()
        #GET_EXTRA_WHERE_CLAUSE($rawview)
    group by
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $rawview.$columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (REPLACE_ERR_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WEEK $rawtables $rawview $columnsToIncludeInNewView)
(

    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $rawview.$columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    ,count(*) as no_of_errors
    from dc.$rawtable $rawview
        #GET_EXTRA_TABLES_IN_FROM()
    where
        #GET_DATE_RANGE_LOCAL()
        #GET_EXTRA_WHERE_CLAUSE($rawview)
    group by
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $rawview.$columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end


#macro (REPLACE_IMSI_SUC_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS $rawtables $rawview $columnsToIncludeInNewView)
(

    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $rawview.$columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    ,sum(NO_OF_SUCCESSES) as NO_OF_SUCCESSES
    from dc.$rawtable $rawview
        #GET_EXTRA_TABLES_IN_FROM()
    where
        #GET_DATETIME_RANGE()
        #GET_EXTRA_WHERE_CLAUSE($rawview)
    group by
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $rawview.$columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (REPLACE_IMSI_SUC_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WEEK $rawtables $rawview $columnsToIncludeInNewView)
(

    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $rawview.$columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    ,sum(NO_OF_SUCCESSES) as NO_OF_SUCCESSES
    from dc.$rawtable $rawview
        #GET_EXTRA_TABLES_IN_FROM()
    where
        #GET_ADJUSTED_DATETIME_RANGE()
        #GET_EXTRA_WHERE_CLAUSE($rawview)
    group by
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $rawview.$columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (GET_EXTRA_TABLES_IN_FROM)
    #if($isgroup)
    ,$groupTable groupref
    #elseif($ismsisdn)
    ,dc.DIM_E_IMSI_MSISDN msisdnMap
    #end
#end


#macro (GET_EXTRA_WHERE_CLAUSE $tablename)
and
    #if($isgroup)
        #GET_JOIN($tablename "groupref" $joinKeys)
    and $groupnameColumn = :$ApplicationConstants.GROUP_NAME_PARAM
    #elseif($ismsisdn)
        #GET_JOIN($tablename "msisdnMap" $joinKeys)
    and msisdnMap.MSISDN = :$ApplicationConstants.MSISDN_PARAM.toUpperCase()
    #else
        #GET_COLUMNS_WHERE($columns)
    #end
#end

#macro(PRINT_AND_FORMAT_IPV4_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL $type $view $column)
    #if ($type == $ApplicationConstants.LTE)
    (case when ($view.$column is not null) then(
        #CONVERT_HEX_IP_ADDRESS_TO_DECIMAL_DOTTED_NOTATION($view $column)
    else '' end) as $column,
    #else
    null as $column,
    #end
#end

#macro(PRINT_AND_FORMAT_IPV6_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL $type $view $column)
    #if ($type == $ApplicationConstants.LTE)
    (case when ($view.$column is not null)
    then(
    inttohex(cast(reverse(substring($view.$column,1,8)) as unsigned bigint)) || inttohex(cast(reverse(substring($view.$column,9,8)) as unsigned bigint))
    ) else ''
    end
    ) as ${column}_tmp,
    replace(ltrim(replace(substring(${column}_tmp,1,4), '0', ' ')), ' ', '0') as ${column}_tmp_1,
    replace(ltrim(replace(substring(${column}_tmp,5,4), '0', ' ')), ' ', '0') as ${column}_tmp_2,
    replace(ltrim(replace(substring(${column}_tmp,9,4), '0', ' ')), ' ', '0') as ${column}_tmp_3,
    replace(ltrim(replace(substring(${column}_tmp,13,4), '0', ' ')), ' ', '0') as ${column}_tmp_4,
    replace(ltrim(replace(substring(${column}_tmp,17,4), '0', ' ')), ' ', '0') as ${column}_tmp_5,
    replace(ltrim(replace(substring(${column}_tmp,21,4), '0', ' ')), ' ', '0') as ${column}_tmp_6,
    replace(ltrim(replace(substring(${column}_tmp,25,4), '0', ' ')), ' ', '0') as ${column}_tmp_7,
    replace(ltrim(replace(substring(${column}_tmp,29,4), '0', ' ')), ' ', '0') as ${column}_tmp_8,
    (case when ($view.$column is not null)
    then(
    case when (length(${column}_tmp_1) > 0) then(${column}_tmp_1) else '0' end  || ':' ||
    case when (length(${column}_tmp_2) > 0) then(${column}_tmp_2) else '0' end || ':' ||
    case when (length(${column}_tmp_3) > 0) then(${column}_tmp_3) else '0' end || ':' ||
    case when (length(${column}_tmp_4) > 0) then(${column}_tmp_4) else '0' end || ':' ||
    case when (length(${column}_tmp_5) > 0) then(${column}_tmp_5) else '0' end || ':' ||
    case when (length(${column}_tmp_6) > 0) then(${column}_tmp_6) else '0' end || ':' ||
    case when (length(${column}_tmp_7) > 0) then(${column}_tmp_7) else '0' end || ':' ||
    case when (length(${column}_tmp_8) > 0) then(${column}_tmp_8) else '0' end
    ) else '' end
    ) as $column,
    #else
    null as ${column}_tmp,
    null as ${column}_tmp_1,
    null as ${column}_tmp_2,
    null as ${column}_tmp_3,
    null as ${column}_tmp_4,
    null as ${column}_tmp_5,
    null as ${column}_tmp_6,
    null as ${column}_tmp_7,
    null as ${column}_tmp_8,
    null as ${column},
    #end
#end



##-----------------------------------------------------------------------------
## Returns sum(column) for each column in the aggregation_columns
##
## groun_columns : field names
##-----------------------------------------------------------------------------
#macro(GET_AGG_COLUMNS $columns)
    #foreach ($column in $columns)
    sum($column),
    #end
#end


##2G3G ONLY MACRO
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_SPECIFY_COLUMNS_2G3G_TP_ONLY $type $rawtables $rawview $columns $columnsToIncludeInNewView)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable rawview
        #if($isgroup)
        ,dc.$groupTable groupref
        #elseif(${type}==$TYPE_MSISDN)
        ,dc.DIM_E_IMSI_MSISDN imsiMap
        #end
    where
        #GET_DATETIME_RANGE()
        #if($isgroup)
        and $groupnameColumn = :$ApplicationConstants.GROUP_NAME_PARAM

            and #GET_JOIN("rawview" "groupref" $joinKeys)

        #elseif(${type}==$TYPE_MSISDN)
        and #GET_JOIN("rawview" "imsiMap" ["IMSI"])
        and imsiMap.MSISDN = :$ApplicationConstants.MSISDN_PARAM.toUpperCase()
        #else

            and #GET_COLUMNS_WHERE($columns)

        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end

    #end
) as $rawview
#end





##-----------------------------------------------------------------------------
## Returns sum(column) for each column in he group_columns
##
## groun_columns : field names
##-----------------------------------------------------------------------------
#macro(GET_GROUP_COLUMNS $columns)
    #foreach ($column in $columns)
    sum($column),
    #end
#end

#macro(GET_TAC_MANUFACTURER_OR_PLAIN_GET_COLUMNS $type)
    #if($type==$ApplicationConstants.TYPE_MAN)
    tac.MANUFACTURER,
    #else
        #GET_COLUMNS($columns)
    #end
#end

#macro(GET_TAC_MANUFACTURER_OR_PLAIN_GET_COLUMNS_WHERE $type $eventTableName)
    #if($type==$ApplicationConstants.TYPE_MAN)
    tac.MANUFACTURER=:$ApplicationConstants.TYPE_MAN
    and
        ${eventTableName}.TAC = tac.TAC
    #else
        #GET_COLUMNS_WHERE($columns)
    #end
#end

#macro(SUM_TACS_FROM_AGGREGATION_VIEW $view $columnToSum)
select
TAC,
sum($columnToSum)
from
    $view
where
    #GET_DATETIME_RANGE()
group by
TAC
#end

#macro(SUM_TAC_SUCCESSES $shouldUseAggregationTables $aggTables $rawTables)
    #if($shouldUseAggregationTables)
    ##need to sum on the union of the sums from the aggregation tables (otherwise get duplicate results
    ##on joining these results with the success counts from the subquery below)
    select
    TAC,
    sum(NO_OF_SUCCESSES) as NO_OF_SUCCESSES
    from (
        #foreach ($aggView in $aggTables.getSucTables())
            #SUM_TACS_FROM_AGGREGATION_VIEW($aggView "NO_OF_SUCCESSES")
            #if ( $velocityCount < $aggTables.getSucTables().size())
            union all
            #end
        #end
    ) as total_successes(TAC, NO_OF_SUCCESSES)
    group by
    TAC
    #else
    select
    TAC,
    count(*)
    from
        #REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS($rawTables.getSucTables() "temp_suc" ["TAC"])
    group by
    TAC
    #end
#end

#macro(SUM_TAC_ERRORS $shouldUseAggregationTables $aggTables $rawTables)
    #if($shouldUseAggregationTables)
    ##need to sum on the union of the sums from the aggregation tables (otherwise get duplicate results
    ##on joining these results with the success counts from the subquery below)
    select
    TAC,
    sum(NO_OF_ERRORS) as NO_OF_ERRORS
    from (
        #foreach ($aggView in $aggTables.getErrTables())
            #SUM_TACS_FROM_AGGREGATION_VIEW($aggView "NO_OF_ERRORS")
            #if ( $velocityCount < $aggTables.getErrTables().size())
            union all
            #end
        #end
    ) as total_errors(TAC, NO_OF_ERRORS)
    group by
    TAC
    #else
    select
    TAC,
    count(*)
    from
        #REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS($rawTables.getErrTables() "temp_err" ["TAC"])
    group by
    TAC
    #end
#end

##-----------------------------------------------------------------------------
## Returns sum(column) for each column in he dtput tables
##
##
##-----------------------------------------------------------------------------
#macro(SUM_TACS_DTPUT_FROM_AGGREGATION_VIEW $view $dtputcolumns $isgroup $isDrilldown)
select
    #if($isgroup&&!$isGroupDrilldown)
    GROUP_NAME,
    #else
    temp_aggview.TAC AS TAC,
    #end
    #foreach($columnToSum in $dtputcolumns)
        #if ($velocityCount <= 1)
        sum($columnToSum)
        #else
        ,sum($columnToSum)
        #end
    #end
from
    $view temp_aggview
    #if($isgroup)
    ,dc.GROUP_TYPE_E_TAC tacgroup
    #end
where
    #if($isgroup)
    temp_aggview.TAC = tacgroup.TAC AND
    #end
    #if($isDrilldown)
    tacgroup.GROUP_NAME = :groupname AND
    #end
    #GET_DATETIME_RANGE()
group by
    #if($isgroup&&!$isGroupDrilldown)
    GROUP_NAME
    #else
    TAC
    #end
#end

##-----------------------------------------------------------------------------
## Returns sum datavol section
##
##
##-----------------------------------------------------------------------------
#macro(SUM_TAC_DATAVOLS $shouldUseAggregationTables $aggTables $rawTables $isgroup $isGroupDrilldown)
(#if($shouldUseAggregationTables)
select
    #if($isgroup&&!$isGroupDrilldown)
    GROUP_NAME,
    #else
    TAC,
    #end
SUM(DATAVOL_UL),
SUM(DATAVOL_DL)
from
(
    #foreach ($aggView in $aggTables.getDtTables())
        #SUM_TACS_DTPUT_FROM_AGGREGATION_VIEW($aggView ["DATAVOL_UL","DATAVOL_DL"] $isgroup $isGroupDrilldown)
        #if ( $velocityCount < $aggTables.getDtTables().size())
        union all
        #end
    #end
)as total_datavol(
    #if($isgroup&&!$isGroupDrilldown)
    GROUP_NAME,
    #else
    TAC,
    #end
DATAVOL_UL,
DATAVOL_DL)
group by
    #if($isgroup&&!$isGroupDrilldown)
    GROUP_NAME
    #else
    TAC
    #end
#else
select
    #if($isgroup&&!$isGroupDrilldown)
    GROUP_NAME,
    #else
    TAC,
    #end
SUM(DATAVOL_UL),
SUM(DATAVOL_DL)
from
(
    #foreach ($rawtable in $rawTables.getDtTables())
    select
        #if($isgroup&&!$isGroupDrilldown)
        GROUP_NAME,
        #else
        rawview.TAC AS TAC,
        #end
    SUM(DATAVOL_UL),
    SUM(DATAVOL_DL)
    from
    dc.$rawtable rawview
        #if($isgroup)
        ,dc.GROUP_TYPE_E_TAC tacgroup
        #end
    where
        #if($isGroupDrilldown)
        tacgroup.GROUP_NAME = :groupname AND
        #end
        #if($isgroup)
        rawview.TAC = tacgroup.TAC AND
            #GET_TAC_EXCLUSION_BY_TABLE("rawview") AND
        #end
        #GET_DATETIME_RANGE()
    GROUP BY
        #if($isgroup&&!$isGroupDrilldown)
        GROUP_NAME
        #else
        TAC
        #end
        #if($velocityCount < $rawTables.getDtTables().size())
        union all
        #end
    #end
)as dtRaw(
    #if($isgroup&&!$isGroupDrilldown)
    GROUP_NAME,
    #else
    TAC,
    #end
DATAVOL_UL,
DATAVOL_DL
)
group by
    #if($isgroup&&!$isGroupDrilldown)
    GROUP_NAME
    #else
    TAC
    #end
#end
)
#end

#macro(PRINT_COLUMN_IF_IS_NON_LTE_NETWORK_TYPE_ELSE_NULL $nwtype $view $column)
    #if($nwtype == $ApplicationConstants.SGEH)
        $view.$column,
    #else
    null as $column,
    #end
#end

#macro(PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL $type $view $column)
    #if ($type == $ApplicationConstants.LTE)
        $view.$column,
    #else
    null as $column,
    #end
#end

#macro(EVENT_ANAYLYSIS_ROAMING_COLUMNS $networkType $rawview_name)
select
    ${rawview_name}.EVENT_TIME,
    ${rawview_name}.IMSI,
    ${rawview_name}.PTMSI,
    ${rawview_name}.TAC,
MANUFACTURER,
Marketing_Name,
EVENT_ID_DESC,
EVENT_RESULT_DESC,
CAUSE_PROT_TYPE_DESC,
CAUSE_CODE_DESC,
SUBCAUSE_CODE_DESC,
EVENT_SOURCE_NAME,
RAT_DESC,
    ${rawview_name}.HIERARCHY_3,
    ${rawview_name}.HIERARCHY_2,
    ${rawview_name}.HIERARCHY_1,
    ${rawview_name}.VENDOR,
ATTACH_TYPE_DESC,
DETACH_TRIGGER_DESC,
DETACH_TYPE_DESC,
    ${rawview_name}.LINKED_NSAPI,
    ${rawview_name}.PDP_NSAPI_1,
    #if ($networkType != $ApplicationConstants.LTE)

    ##get the decimal of PDP_GGSN_IPADDRESS_1
    (case when (${rawview_name}.PDP_GGSN_IPADDRESS_1 is not null) then (case when (${rawview_name}.PDP_GGSN_NAME_1 is null) then isnull(ggsnref.GGSN_NAME,
        #CONVERT_HEX_IP_ADDRESS_TO_DECIMAL_DOTTED_NOTATION(${rawview_name} "PDP_GGSN_IPADDRESS_1")
    else ${rawview_name}.PDP_GGSN_NAME_1 end)else null end) as PDP_GGSN_NAME_1,
    #else
    null as PDP_GGSN_NAME_1,
    #end


    #if ($networkType != $ApplicationConstants.LTE)
    (case when (${rawview_name}.PDP_MS_IPADDRESS_1 is not null) then(
        #CONVERT_HEX_IP_ADDRESS_TO_DECIMAL_DOTTED_NOTATION(${rawview_name} "PDP_MS_IPADDRESS_1")
    else null end) as PDP_MS_IPADDRESS_1,
    #else
    null as PDP_MS_IPADDRESS_1,
    #end


    ${rawview_name}.PDP_NSAPI_2,

    #if ($networkType != $ApplicationConstants.LTE)
    ##get the decimal of PDP_GGSN_IPADDRESS_2
    (case when (${rawview_name}.PDP_GGSN_IPADDRESS_2 is not null) then (case when (${rawview_name}.PDP_GGSN_NAME_2 is null) then isnull(ggsnref.GGSN_NAME,
        #CONVERT_HEX_IP_ADDRESS_TO_DECIMAL_DOTTED_NOTATION(${rawview_name} "PDP_GGSN_IPADDRESS_2")
    else ${rawview_name}.PDP_GGSN_NAME_2 end)else null end) as PDP_GGSN_NAME_2,
    #else
    null as PDP_GGSN_NAME_2,
    #end


    #if ($networkType != $ApplicationConstants.LTE)
    (case when (${rawview_name}.PDP_MS_IPADDRESS_2 is not null) then(
        #CONVERT_HEX_IP_ADDRESS_TO_DECIMAL_DOTTED_NOTATION(${rawview_name} "PDP_MS_IPADDRESS_2")
    else null end) as PDP_MS_IPADDRESS_2,
    #else
    null as PDP_MS_IPADDRESS_2,
    #end

    ${rawview_name}.PAGING_ATTEMPTS,
SERVICE_REQ_TRIGGER_DESC,
    ${rawview_name}.REQUEST_RETRIES,
    ${rawview_name}.APN,
    ${rawview_name}.IMSI_MCC,
    ${rawview_name}.IMSI_MNC,
    ${rawview_name}.RAC,
    ${rawview_name}.LAC,
    ${rawview_name}.UPDATE_TYPE,

    #if ($networkType != $ApplicationConstants.LTE)
    ##get the decimal of OLD_SGSN_IPADDRESS
    (case when (${rawview_name}.OLD_SGSN_IPADDRESS is not null) then isnull(sgsnref.SGSN_NAME,
        #CONVERT_HEX_IP_ADDRESS_TO_DECIMAL_DOTTED_NOTATION(${rawview_name} "OLD_SGSN_IPADDRESS")
    else null end) as OLD_SGSN_NAME,
    #else
    null as OLD_SGSN_NAME,
    #end


    ${rawview_name}.OLD_MCC,
    ${rawview_name}.OLD_MNC,
    ${rawview_name}.OLD_RAC,
    ${rawview_name}.OLD_LAC,
    ${rawview_name}.TRANSFERRED_PDP,
    ${rawview_name}.DROPPED_PDP,
    ${rawview_name}.HLR,
    ${rawview_name}.DEACTIVATION_TRIGGER,
    ${rawview_name}.CAUSE_CODE,
    ${rawview_name}.SUBCAUSE_CODE,
    ${rawview_name}.EVENT_RESULT,
    ${rawview_name}.CAUSE_PROT_TYPE,
    ${rawview_name}.RAT as RAT,
    ${rawview_name}.DURATION,
    ${rawview_name}.DATETIME_ID


#end


#macro(PRINT_COLUMN_WITH_NEW_NAME_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL $type $view $column $columnName)
    #if ($type == $ApplicationConstants.LTE)
        $view.$column as $columnName,
    #else
    null as $columnName,
    #end
#end

##-----------------------------------------------------------------------------
## Outermost select for detaild event analysis query
## Unless the query is for IMSI, and its not a group query, the IMSI columns will be returned
## Unless the query is for PTMSI, the PTMSI column will be returned
##
## countTop : number of rows to select
## rawType: type of query eg IMSI/PTMIS etc
##-----------------------------------------------------------------------------
#macro(RAW_EVENT_ANALYSIS_COLUMNS $countTop $itIsAGroup $rawType)

#if($countTop > 0)
    top $countTop
#end
     #if($csv == true)
        DATEADD(minute,$tzOffset,EVENT_TIME) AS EVENT_TIME,
       #else
       EVENT_TIME,
       #end

    #if(($itIsAGroup==true&&${rawType}==$TYPE_IMSI)||(${rawType}!=$TYPE_IMSI&&${rawType}!=$TYPE_MSISDN))
    IMSI,
    #end
    #if(${rawType}!=$TYPE_PTMSI)
    PTMSI,
    #end
TAC,
isnull(MANUFACTURER, 'Manufacturer Unknown') AS MANUFACTURER,
isnull(MARKETING_NAME, 'Model Unknown') AS Marketing_Name,
EVENT_ID_DESC,
EVENT_RESULT_DESC,
CAUSE_PROT_TYPE_DESC,
    #if(${rawType}!=$EVENT_RECURRING)
    CAUSE_CODE,
    #end
CAUSE_CODE_DESC,
    #if(${rawType}!=$EVENT_RECURRING)
    SUBCAUSE_CODE,
    #end
SUBCAUSE_CODE_DESC,
EVENT_SOURCE_NAME,
RAT_DESC,
HIERARCHY_3,
HIERARCHY_2,
HIERARCHY_1,
VENDOR,
TRAC,
EVENT_SUBTYPE_ID_DESC,
OLD_TAI,
OLD_CELL_ID,
OLD_MME,
OLD_L_MTMSI,
OLD_SGW_IPV4,
OLD_SGW_IPV6_F,
PDNDISCONNECTTYPE_DESCRIPTION,
PDN_BEARER_ID_1,
PDN_BEARER_ID_2,
PDN_BEARER_ID_3,
PDN_PAA_IPV4_1,
PDN_PAA_IPV4_2,
PDN_PAA_IPV4_3,
PDN_PAA_IPV6_1,
PDN_PAA_IPV6_2,
PDN_PAA_IPV6_3,
PDN_PGW_IPV4_1,
PDN_PGW_IPV4_2,
PDN_PGW_IPV4_3,
PDN_PGW_IPV6_1,
PDN_PGW_IPV6_2,
PDN_PGW_IPV6_3,
ATTACH_TYPE_DESC,
DETACH_TRIGGER_DESC,
DETACH_TYPE_DESC,
LINKED_NSAPI,
PDP_NSAPI_1,
PDP_GGSN_NAME_1,
PDP_MS_IPADDRESS_1,
PDP_NSAPI_2,
PDP_GGSN_NAME_2,
PDP_MS_IPADDRESS_2,
PAGING_ATTEMPTS,
SERVICE_REQ_TRIGGER_DESC,
REQUEST_RETRIES,
APN,
MCC,
MNC,
RAC,
LAC,
UPDATE_TYPE,
OLD_SGSN_NAME,
OLD_MCC,
OLD_MNC,
OLD_RAC,
OLD_LAC,
TRANSFERRED_PDP,
DROPPED_PDP,
HLR,
DEACTIVATION_TRIGGER,
CAUSE_CODE,
SUBCAUSE_CODE,
EVENT_RESULT,
CAUSE_PROT_TYPE,
RAT,
SMS_ONLY,
COMBINED_TAU_TYPE,
BEARER_CAUSE_1,
ARP_PL_1,
ARP_PCI_1,
ARP_PVI_1,
GBR_UPLINK_1,
GBR_DOWNLINK_1,
BEARER_CAUSE_2,
ARP_PL_2,
ARP_PCI_2,
ARP_PVI_2,
GBR_UPLINK_2,
GBR_DOWNLINK_2,
BEARER_CAUSE_3,
ARP_PL_3,
ARP_PCI_3,
ARP_PVI_3,
GBR_UPLINK_3,
GBR_DOWNLINK_3,
DURATION,
EPS_BEARER_ID_1,
EPS_BEARER_ID_2,
EPS_BEARER_ID_3,
QCI_ERR_1,
QCI_ERR_2,
QCI_ERR_3,
QCI_ERR_4,
QCI_ERR_5,
QCI_ERR_6,
QCI_ERR_7,
QCI_ERR_8,
QCI_ERR_9,
QCI_ERR_10,
QCI_SUC_1,
QCI_SUC_2,
QCI_SUC_3,
QCI_SUC_4,
QCI_SUC_5,
QCI_SUC_6,
QCI_SUC_7,
QCI_SUC_8,
QCI_SUC_9,
QCI_SUC_10
#end

##-----------------------------------------------------------------------------
#macro(RAW_EVENT_ANALYSIS_COLUMNS_EVENT_ID_AS_SYSTEM_COLUMN $countTop $itIsAGroup $rawType)

#if($countTop > 0)
    top $countTop
#end
     #if($csv == true)
        DATEADD(minute,$tzOffset,EVENT_TIME) AS EVENT_TIME,
       #else
       EVENT_TIME,
       #end

    #if(($itIsAGroup==true&&${rawType}==$TYPE_IMSI)||(${rawType}!=$TYPE_IMSI&&${rawType}!=$TYPE_MSISDN))
    IMSI,
    #end
    #if(${rawType}!=$TYPE_PTMSI)
    PTMSI,
    #end
TAC,
isnull(MANUFACTURER, 'Manufacturer Unknown') AS MANUFACTURER,
isnull(MARKETING_NAME, 'Model Unknown') AS Marketing_Name,
EVENT_ID_DESC AS SYS_COL_EVENT_ID_DESC,
EVENT_RESULT_DESC,
CAUSE_PROT_TYPE_DESC,
    #if(${rawType}!=$EVENT_RECURRING)
    CAUSE_CODE,
    #end
CAUSE_CODE_DESC,
    #if(${rawType}!=$EVENT_RECURRING)
    SUBCAUSE_CODE,
    #end
SUBCAUSE_CODE_DESC,
EVENT_SOURCE_NAME,
RAT_DESC,
HIERARCHY_3,
HIERARCHY_2,
HIERARCHY_1,
VENDOR,
TRAC,
EVENT_SUBTYPE_ID_DESC,
OLD_TAI,
OLD_CELL_ID,
OLD_MME,
OLD_L_MTMSI,
OLD_SGW_IPV4,
OLD_SGW_IPV6_F,
PDNDISCONNECTTYPE_DESCRIPTION,
PDN_BEARER_ID_1,
PDN_BEARER_ID_2,
PDN_BEARER_ID_3,
PDN_PAA_IPV4_1,
PDN_PAA_IPV4_2,
PDN_PAA_IPV4_3,
PDN_PAA_IPV6_1,
PDN_PAA_IPV6_2,
PDN_PAA_IPV6_3,
PDN_PGW_IPV4_1,
PDN_PGW_IPV4_2,
PDN_PGW_IPV4_3,
PDN_PGW_IPV6_1,
PDN_PGW_IPV6_2,
PDN_PGW_IPV6_3,
ATTACH_TYPE_DESC,
DETACH_TRIGGER_DESC,
DETACH_TYPE_DESC,
LINKED_NSAPI,
PDP_NSAPI_1,
PDP_GGSN_NAME_1,
PDP_MS_IPADDRESS_1,
PDP_NSAPI_2,
PDP_GGSN_NAME_2,
PDP_MS_IPADDRESS_2,
PAGING_ATTEMPTS,
SERVICE_REQ_TRIGGER_DESC,
REQUEST_RETRIES,
APN,
MCC,
MNC,
RAC,
LAC,
UPDATE_TYPE,
OLD_SGSN_NAME,
OLD_MCC,
OLD_MNC,
OLD_RAC,
OLD_LAC,
TRANSFERRED_PDP,
DROPPED_PDP,
HLR,
DEACTIVATION_TRIGGER,
CAUSE_CODE AS SYS_COL_CAUSE_CODE,
SUBCAUSE_CODE AS SYS_COL_SUBCAUSE_CODE,
EVENT_RESULT AS SYS_COL_EVENT_RESULT,
CAUSE_PROT_TYPE AS SYS_COL_CAUSE_PROT_TYPE,
RAT,
SMS_ONLY,
COMBINED_TAU_TYPE,
BEARER_CAUSE_1,
ARP_PL_1,
ARP_PCI_1,
ARP_PVI_1,
GBR_UPLINK_1,
GBR_DOWNLINK_1,
BEARER_CAUSE_2,
ARP_PL_2,
ARP_PCI_2,
ARP_PVI_2,
GBR_UPLINK_2,
GBR_DOWNLINK_2,
BEARER_CAUSE_3,
ARP_PL_3,
ARP_PCI_3,
ARP_PVI_3,
GBR_UPLINK_3,
GBR_DOWNLINK_3,
DURATION,
EPS_BEARER_ID_1,
EPS_BEARER_ID_2,
EPS_BEARER_ID_3,
QCI_ERR_1,
QCI_ERR_2,
QCI_ERR_3,
QCI_ERR_4,
QCI_ERR_5,
QCI_ERR_6,
QCI_ERR_7,
QCI_ERR_8,
QCI_ERR_9,
QCI_ERR_10,
QCI_SUC_1,
QCI_SUC_2,
QCI_SUC_3,
QCI_SUC_4,
QCI_SUC_5,
QCI_SUC_6,
QCI_SUC_7,
QCI_SUC_8,
QCI_SUC_9,
QCI_SUC_10
#end
##--------------------------------------------------
#macro(GET_NOT_NULL_COLUMN_WITH_SYSTEM_COLUMNS_HANDLED $tables $columns)
    #foreach ($column in $columns)
    #if($column == "APN")
    #set($SYS_COL = "SYS_COL_APN")
    isnull(
        #foreach ($table in $tables)
            ${table}.$column
            #if ( $velocityCount < $tables.size())
            ,
            #end
        #end
    ) as $SYS_COL,
    #elseif($column == "EVENT_SOURCE_NAME" && $columns.size()== 5)
    #set($SYS_COL = "SYS_COL_EVENT_SOURCE_NAME")
    isnull(
        #foreach ($table in $tables)
            ${table}.$column
            #if ( $velocityCount < $tables.size())
            ,
            #end
        #end
    ) as $SYS_COL,
    #elseif($column == "HIERARCHY_3" && $columns.size()== 4)
    #set($SYS_COL = "SYS_COL_HIERARCHY_3")
    isnull(
        #foreach ($table in $tables)
            ${table}.$column
            #if ( $velocityCount < $tables.size())
            ,
            #end
        #end
    ) as $SYS_COL,
     #elseif($column == "CAUSE_PROT_TYPE" && $columns.size()== 1)
    #set($SYS_COL = "SYS_COL_CAUSE_PROT_TYPE")
    isnull(
        #foreach ($table in $tables)
            ${table}.$column
            #if ( $velocityCount < $tables.size())
            ,
            #end
        #end
    ) as $SYS_COL,
    #elseif($column == "GROUP_NAME" && $columns.size()== 1)
    #set($SYS_COL = "SYS_COL_GROUP_NAME")
    isnull(
        #foreach ($table in $tables)
            ${table}.$column
            #if ( $velocityCount < $tables.size())
            ,
            #end
        #end
    ) as $SYS_COL,
    #else
    isnull(
        #foreach ($table in $tables)
            ${table}.$column
            #if ( $velocityCount < $tables.size())
            ,
            #end
        #end
    ) as $column,
    #end
    #end
#end
##----------------------------------------------------
#macro(GET_COLUMNS_WITH_SYSTEM_COLUMNS_HANDLED $columns)
    #foreach ($column in $columns)
      #if($column == "APN")
        #set($SYS_COL = "SYS_COL_APN")
        $SYS_COL,
      #elseif($column == "EVENT_SOURCE_NAME" && $columns.size()== 5)
        #set($SYS_COL = "SYS_COL_EVENT_SOURCE_NAME")
        $SYS_COL,
      #elseif($column == "HIERARCHY_3" && $columns.size()== 4)
        #set($SYS_COL = "SYS_COL_HIERARCHY_3")
        $SYS_COL,
      #else
        $column,
      #end
    #end
#end

##-----------------------------------------------------------------------------
## Outermost select for detailed event analysis query
## Unless the query is for IMSI, and its not a group query, the IMSI columns will be returned
## Unless the query is for PTMSI, the PTMSI column will be returned
## This macro has been written in a way to exclude System Columns for the view for which this
## VM has been used.
##
## countTop : number of rows to select
## rawType: type of query eg IMSI/PTMIS etc
##-----------------------------------------------------------------------------
#macro(RAW_EVENT_ANALYSIS_COLUMNS_WITH_SYSTEM_COLUMNS_HANDLED $countTop $itIsAGroup $rawType)

#if($countTop > 0)
    top $countTop
#end
     #if($csv == true)
        DATEADD(minute,$tzOffset,EVENT_TIME) AS EVENT_TIME,
       #else
       EVENT_TIME,
       #end

    #if(($itIsAGroup==true&&${rawType}==$TYPE_IMSI)||(${rawType}!=$TYPE_IMSI&&${rawType}!=$TYPE_MSISDN))
    IMSI,
    #end
    #if(${rawType}!=$TYPE_PTMSI)
    PTMSI,
    #end
TAC,
isnull(MANUFACTURER, CONVERT(VARCHAR(12),TAC)) AS MANUFACTURER,
isnull(MARKETING_NAME, CONVERT(VARCHAR(12),TAC)) AS Marketing_Name,
EVENT_ID_DESC,
EVENT_RESULT_DESC,
CAUSE_PROT_TYPE_DESC,
    #if(${rawType}!=$EVENT_RECURRING)
    CAUSE_CODE,
    #end
CAUSE_CODE_DESC,
    #if(${rawType}!=$EVENT_RECURRING)
    SUBCAUSE_CODE,
    #end
SUBCAUSE_CODE_DESC,
EVENT_SOURCE_NAME,
RAT_DESC,
HIERARCHY_3,
HIERARCHY_2,
HIERARCHY_1,
VENDOR,
TRAC,
EVENT_SUBTYPE_ID_DESC,
OLD_TAI,
OLD_CELL_ID,
OLD_MME,
OLD_L_MTMSI,
OLD_SGW_IPV4,
OLD_SGW_IPV6_F,
PDNDISCONNECTTYPE_DESCRIPTION,
PDN_BEARER_ID_1,
PDN_BEARER_ID_2,
PDN_BEARER_ID_3,
PDN_PAA_IPV4_1,
PDN_PAA_IPV4_2,
PDN_PAA_IPV4_3,
PDN_PAA_IPV6_1,
PDN_PAA_IPV6_2,
PDN_PAA_IPV6_3,
PDN_PGW_IPV4_1,
PDN_PGW_IPV4_2,
PDN_PGW_IPV4_3,
PDN_PGW_IPV6_1,
PDN_PGW_IPV6_2,
PDN_PGW_IPV6_3,
ATTACH_TYPE_DESC,
DETACH_TRIGGER_DESC,
DETACH_TYPE_DESC,
LINKED_NSAPI,
PDP_NSAPI_1,
PDP_GGSN_NAME_1,
PDP_MS_IPADDRESS_1,
PDP_NSAPI_2,
PDP_GGSN_NAME_2,
PDP_MS_IPADDRESS_2,
PAGING_ATTEMPTS,
SERVICE_REQ_TRIGGER_DESC,
REQUEST_RETRIES,
APN,
MCC,
MNC,
RAC,
LAC,
UPDATE_TYPE,
OLD_SGSN_NAME,
OLD_MCC,
OLD_MNC,
OLD_RAC,
OLD_LAC,
TRANSFERRED_PDP,
DROPPED_PDP,
HLR,
DEACTIVATION_TRIGGER,
CAUSE_CODE AS SYS_COL_CAUSE_CODE,
SUBCAUSE_CODE AS SYS_COL_SUBCAUSE_CODE,
EVENT_RESULT AS SYS_COL_EVENT_RESULT_DESC,
CAUSE_PROT_TYPE  AS SYS_COL_CAUSE_PROT_TYPE_DESC,
RAT,
SMS_ONLY,
COMBINED_TAU_TYPE,
BEARER_CAUSE_1,
ARP_PL_1,
ARP_PCI_1,
ARP_PVI_1,
GBR_UPLINK_1,
GBR_DOWNLINK_1,
BEARER_CAUSE_2,
ARP_PL_2,
ARP_PCI_2,
ARP_PVI_2,
GBR_UPLINK_2,
GBR_DOWNLINK_2,
BEARER_CAUSE_3,
ARP_PL_3,
ARP_PCI_3,
ARP_PVI_3,
GBR_UPLINK_3,
GBR_DOWNLINK_3,
DURATION,
EPS_BEARER_ID_1,
EPS_BEARER_ID_2,
EPS_BEARER_ID_3,
QCI_ERR_1,
QCI_ERR_2,
QCI_ERR_3,
QCI_ERR_4,
QCI_ERR_5,
QCI_ERR_6,
QCI_ERR_7,
QCI_ERR_8,
QCI_ERR_9,
QCI_ERR_10,
QCI_SUC_1,
QCI_SUC_2,
QCI_SUC_3,
QCI_SUC_4,
QCI_SUC_5,
QCI_SUC_6,
QCI_SUC_7,
QCI_SUC_8,
QCI_SUC_9,
QCI_SUC_10
#end

##-----------------------------------------------------------------------------
## Outer select for detaild event analysis query
## Unless the query is for IMSI, and its not a group query, the IMSI columns will be returned
## Unless the query is for PTMSI, the PTMSI column will be returned
##
## itIsAGroup : boolean
## rawType: type of query eg IMSI/PTMIS etc
## networkType: eg LTE or otherwise
##-----------------------------------------------------------------------------
#macro(EVENT_ANALYSIS_SELECT $itIsAGroup $rawType $networkType)
select
rawview.DATETIME_ID,
rawview.EVENT_TIME,
rawview.MSISDN,
    #if(($itIsAGroup==true&&${rawType}==$TYPE_IMSI)||${rawType}!=$TYPE_IMSI)
    rawview.IMSI,
    #end
    #if(${rawType}!=$TYPE_PTMSI)
        #PRINT_COLUMN_IF_IS_NON_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "PTMSI")
    #end
rawview.TAC,
tacref.MANUFACTURER,
tacref.Marketing_Name,
etref.EVENT_ID_DESC,
erref.EVENT_RESULT_DESC,
cptref.CAUSE_PROT_TYPE_DESC,
ccref.CAUSE_CODE_DESC,
sccref.SUBCAUSE_CODE_DESC,
rawview.EVENT_SOURCE_NAME,
ratref.RAT_DESC,
rawview.HIERARCHY_3,
rawview.HIERARCHY_2,
rawview.HIERARCHY_1,
rawview.VENDOR,
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "TRAC")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "subtyperef" "EVENT_SUBTYPE_ID_DESC")
    #if ($networkType == $ApplicationConstants.LTE)
    ##if one field is null, then they're probably all null (they all come from the same parameter in the events file)
    (case when (rawview.OLD_MCC is not null) then rawview.OLD_MCC + '-' + rawview.OLD_MNC + '-'+ convert(varchar(30), rawview.OLD_TRAC)
    else null end) as OLD_TAI,
    #else
    null as OLD_TAI,
    #end
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "OLD_CELL_ID")
    #if ($networkType == $ApplicationConstants.LTE)
    (case when (rawview.OLD_L_MMEGI is null) then convert(varchar(30),rawview.OLD_L_MMEC)
    else (case when (rawview.OLD_L_MMEC is null) then convert(varchar(30),rawview.OLD_L_MMEGI)
    else convert(varchar(30), rawview.OLD_L_MMEGI) + '-' + convert(varchar(30),rawview.OLD_L_MMEC) end) end) as OLD_MME,
    #else
    null as OLD_MME,
    #end
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "OLD_L_MTMSI")
    #if ($networkType == $ApplicationConstants.LTE)
    ##get the decimal of OLD_SGW_IPV4
    (case when (rawview.OLD_SGW_IPV4 is not null) then(
        #CONVERT_HEX_IP_ADDRESS_TO_DECIMAL_DOTTED_NOTATION("rawview" "OLD_SGW_IPV4")
    else '' end) as OLD_SGW_IPV4,
    #else
    null as OLD_SGW_IPV4,
    #end
    #if ($networkType == $ApplicationConstants.LTE)
    (
    case when (OLD_SGW_IPV6 is not null)
    then(
    inttohex(cast(reverse(substring(OLD_SGW_IPV6,1,8)) as unsigned bigint)) || inttohex(cast(reverse(substring(OLD_SGW_IPV6,9,8)) as unsigned bigint))
    )
    else '' end
    ) as ipv6tmp,
    ##             Replaces all "0" with space, trims leading space and then replaces with "0" again
    ##          Effect is removing all leading 0's from a HEX value
    ##          Side effect is that any field with only "0" now has no value
    replace(ltrim(replace(substring(ipv6tmp,1,4), '0', ' ')), ' ', '0') as ipv6tmp_1,
    replace(ltrim(replace(substring(ipv6tmp,5,4), '0', ' ')), ' ', '0') as ipv6tmp_2,
    replace(ltrim(replace(substring(ipv6tmp,9,4), '0', ' ')), ' ', '0') as ipv6tmp_3,
    replace(ltrim(replace(substring(ipv6tmp,13,4), '0', ' ')), ' ', '0') as ipv6tmp_4,
    replace(ltrim(replace(substring(ipv6tmp,17,4), '0', ' ')), ' ', '0') as ipv6tmp_5,
    replace(ltrim(replace(substring(ipv6tmp,21,4), '0', ' ')), ' ', '0') as ipv6tmp_6,
    replace(ltrim(replace(substring(ipv6tmp,25,4), '0', ' ')), ' ', '0') as ipv6tmp_7,
    replace(ltrim(replace(substring(ipv6tmp,29,4), '0', ' ')), ' ', '0') as ipv6tmp_8,
    (case when (OLD_SGW_IPV6 is not null)
    then(
    ##             To solve the empty fields, check for the length and if it's empty then insert a '0'

    case when (length(ipv6tmp_1) > 0) then(ipv6tmp_1) else '0' end  || ':' ||
    case when (length(ipv6tmp_2) > 0) then(ipv6tmp_2) else '0' end || ':' ||
    case when (length(ipv6tmp_3) > 0) then(ipv6tmp_3) else '0' end || ':' ||
    case when (length(ipv6tmp_4) > 0) then(ipv6tmp_4) else '0' end || ':' ||
    case when (length(ipv6tmp_5) > 0) then(ipv6tmp_5) else '0' end || ':' ||
    case when (length(ipv6tmp_6) > 0) then(ipv6tmp_6) else '0' end || ':' ||
    case when (length(ipv6tmp_7) > 0) then(ipv6tmp_7) else '0' end || ':' ||
    case when (length(ipv6tmp_8) > 0) then(ipv6tmp_8) else '0' end
    )else ''
    end
    ) as OLD_SGW_IPV6_F,
    #else
    null as ipv6tmp,
    null as ipv6tmp_1,
    null as ipv6tmp_2,
    null as ipv6tmp_3,
    null as ipv6tmp_4,
    null as ipv6tmp_5,
    null as ipv6tmp_6,
    null as ipv6tmp_7,
    null as ipv6tmp_8,
    null as OLD_SGW_IPV6_F,
    #end
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "pdnref" "PDNDISCONNECTTYPE_DESCRIPTION")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "PDN_BEARER_ID_1")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "PDN_BEARER_ID_2")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "PDN_BEARER_ID_3")
    #PRINT_AND_FORMAT_IPV4_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "PDN_PAA_IPV4_1")
    #PRINT_AND_FORMAT_IPV4_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "PDN_PAA_IPV4_2")
    #PRINT_AND_FORMAT_IPV4_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "PDN_PAA_IPV4_3")
    #PRINT_AND_FORMAT_IPV6_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "PDN_PAA_IPV6_1")
    #PRINT_AND_FORMAT_IPV6_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "PDN_PAA_IPV6_2")
    #PRINT_AND_FORMAT_IPV6_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "PDN_PAA_IPV6_3")
    #PRINT_AND_FORMAT_IPV4_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "PDN_PGW_IPV4_1")
    #PRINT_AND_FORMAT_IPV4_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "PDN_PGW_IPV4_2")
    #PRINT_AND_FORMAT_IPV4_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "PDN_PGW_IPV4_3")
    #PRINT_AND_FORMAT_IPV6_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "PDN_PGW_IPV6_1")
    #PRINT_AND_FORMAT_IPV6_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "PDN_PGW_IPV6_2")
    #PRINT_AND_FORMAT_IPV6_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "PDN_PGW_IPV6_3")
attachref.ATTACH_TYPE_DESC,
detrigref.DETACH_TRIGGER_DESC,
detachref.DETACH_TYPE_DESC,
    #PRINT_COLUMN_IF_IS_NON_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "LINKED_NSAPI")
    #PRINT_COLUMN_IF_IS_NON_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "PDP_NSAPI_1")
    #if ($networkType != $ApplicationConstants.LTE)
    ##get the decimal of PDP_GGSN_IPADDRESS_1
    (case when (rawview.PDP_GGSN_IPADDRESS_1 is not null) then (case when (rawview.PDP_GGSN_NAME_1 is null) then isnull(ggsnref.GGSN_NAME,
        #CONVERT_HEX_IP_ADDRESS_TO_DECIMAL_DOTTED_NOTATION("rawview" "PDP_GGSN_IPADDRESS_1")
    else rawview.PDP_GGSN_NAME_1 end)else null end) as PDP_GGSN_NAME_1,
    #else
    null as PDP_GGSN_NAME_1,
    #end
    #if ($networkType != $ApplicationConstants.LTE)
    (case when (rawview.PDP_MS_IPADDRESS_1 is not null) then(
        #CONVERT_HEX_IP_ADDRESS_TO_DECIMAL_DOTTED_NOTATION("rawview" "PDP_MS_IPADDRESS_1")
    else null end) as PDP_MS_IPADDRESS_1,
    #else
    null as PDP_MS_IPADDRESS_1,
    #end
    #PRINT_COLUMN_IF_IS_NON_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "PDP_NSAPI_2")
    #if ($networkType != $ApplicationConstants.LTE)
    ##get the decimal of PDP_GGSN_IPADDRESS_2
    (case when (rawview.PDP_GGSN_IPADDRESS_2 is not null) then (case when (rawview.PDP_GGSN_NAME_2 is null) then isnull(ggsnref.GGSN_NAME,
        #CONVERT_HEX_IP_ADDRESS_TO_DECIMAL_DOTTED_NOTATION("rawview" "PDP_GGSN_IPADDRESS_2")
    else rawview.PDP_GGSN_NAME_2 end)else null end) as PDP_GGSN_NAME_2,
    #else
    null as PDP_GGSN_NAME_2,
    #end
    #if ($networkType != $ApplicationConstants.LTE)
    (case when (rawview.PDP_MS_IPADDRESS_2 is not null) then(
        #CONVERT_HEX_IP_ADDRESS_TO_DECIMAL_DOTTED_NOTATION("rawview" "PDP_MS_IPADDRESS_2")
    else null end) as PDP_MS_IPADDRESS_2,
    #else
    null as PDP_MS_IPADDRESS_2,
    #end
rawview.PAGING_ATTEMPTS,
service_req.SERVICE_REQ_TRIGGER_DESC,
rawview.REQUEST_RETRIES,
rawview.APN,
rawview.MCC,
rawview.MNC,
    #PRINT_COLUMN_IF_IS_NON_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "RAC")
    #PRINT_COLUMN_IF_IS_NON_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "LAC")
    #PRINT_COLUMN_IF_IS_NON_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "UPDATE_TYPE")
    #if ($networkType != $ApplicationConstants.LTE)
    ##get the decimal of OLD_SGSN_IPADDRESS
    (case when (rawview.OLD_SGSN_IPADDRESS is not null) then isnull(sgsnref.SGSN_NAME,
        #CONVERT_HEX_IP_ADDRESS_TO_DECIMAL_DOTTED_NOTATION("rawview" "OLD_SGSN_IPADDRESS")
    else null end) as OLD_SGSN_NAME,
    #else
    null as OLD_SGSN_NAME,
    #end
rawview.OLD_MCC,
rawview.OLD_MNC,
    #PRINT_COLUMN_IF_IS_NON_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "OLD_RAC")
    #PRINT_COLUMN_IF_IS_NON_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "OLD_LAC")
    #PRINT_COLUMN_IF_IS_NON_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "TRANSFERRED_PDP")
    #PRINT_COLUMN_IF_IS_NON_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "DROPPED_PDP")
    #PRINT_COLUMN_IF_IS_NON_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "HLR")
deactrigview.DEACTIVATION_TRIGGER_DESC as DEACTIVATION_TRIGGER,
rawview.CAUSE_CODE,
rawview.SUBCAUSE_CODE,
erref.EVENT_RESULT,
cptref.CAUSE_PROT_TYPE,
    #PRINT_COLUMN_WITH_NEW_NAME_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "sms_only_ref" "SMS_ONLY_DESC" "SMS_ONLY")
    #PRINT_COLUMN_WITH_NEW_NAME_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "combined_tau_type_ref" "COMBINED_TAU_TYPE_DESC" "COMBINED_TAU_TYPE")
    #PRINT_COLUMN_WITH_NEW_NAME_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "bearer_cause_ref1" "BEARER_CAUSE_DESC" "BEARER_CAUSE_1")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "ARP_PL_1")
    #PRINT_COLUMN_WITH_NEW_NAME_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "arp_pci_ref1" "ARP_PCI_DESC" "ARP_PCI_1")
    #PRINT_COLUMN_WITH_NEW_NAME_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "arp_pvi_ref1" "ARP_PVI_DESC" "ARP_PVI_1")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "GBR_UPLINK_1")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "GBR_DOWNLINK_1")
    #PRINT_COLUMN_WITH_NEW_NAME_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "bearer_cause_ref2" "BEARER_CAUSE_DESC" "BEARER_CAUSE_2")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "ARP_PL_2")
    #PRINT_COLUMN_WITH_NEW_NAME_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "arp_pci_ref2" "ARP_PCI_DESC" "ARP_PCI_2")
    #PRINT_COLUMN_WITH_NEW_NAME_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "arp_pvi_ref2" "ARP_PVI_DESC" "ARP_PVI_2")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "GBR_UPLINK_2")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "GBR_DOWNLINK_2")
    #PRINT_COLUMN_WITH_NEW_NAME_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "bearer_cause_ref3" "BEARER_CAUSE_DESC" "BEARER_CAUSE_3")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "ARP_PL_3")
    #PRINT_COLUMN_WITH_NEW_NAME_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "arp_pci_ref3" "ARP_PCI_DESC" "ARP_PCI_3")
    #PRINT_COLUMN_WITH_NEW_NAME_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "arp_pvi_ref3" "ARP_PVI_DESC" "ARP_PVI_3")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "GBR_UPLINK_3")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "GBR_DOWNLINK_3")
ratref.RAT,
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "EPS_BEARER_ID_1")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "EPS_BEARER_ID_2")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "EPS_BEARER_ID_3")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "QCI_ERR_1")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "QCI_ERR_2")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "QCI_ERR_3")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "QCI_ERR_4")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "QCI_ERR_5")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "QCI_ERR_6")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "QCI_ERR_7")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "QCI_ERR_8")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "QCI_ERR_9")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "QCI_ERR_10")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "QCI_SUC_1")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "QCI_SUC_2")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "QCI_SUC_3")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "QCI_SUC_4")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "QCI_SUC_5")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "QCI_SUC_6")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "QCI_SUC_7")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "QCI_SUC_8")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "QCI_SUC_9")
    #PRINT_COLUMN_IF_IS_LTE_NETWORK_TYPE_ELSE_NULL($networkType "rawview" "QCI_SUC_10")
rawview.DURATION
#end


#macro(EVENT_ANALYSIS_FROM $itIsAGroup $networkType $theGroupTable)
from
dc.DIM_E_${networkType}_EVENTTYPE etref
,dc.DIM_E_${networkType}_CAUSECODE ccref
,dc.DIM_E_${networkType}_SUBCAUSECODE sccref
,dc.DIM_E_SGEH_EVENTRESULT erref
,dc.DIM_E_SGEH_TAC tacref
,dc.DIM_E_${networkType}_ATTACHTYPE attachref
,dc.DIM_E_${networkType}_DETACH_TRIGGER detrigref
,dc.DIM_E_${networkType}_DETACH_TYPE detachref
,dc.DIM_E_${networkType}_DEACTIVATIONTRIGGER deactrigview
,dc.DIM_E_${networkType}_SERVICE_REQ_TRIGGER service_req
,dc.DIM_E_${networkType}_CAUSE_PROT_TYPE cptref
,dc.DIM_E_SGEH_RAT ratref
    #if($itIsAGroup)
    ,dc.$theGroupTable groupref
    #elseif(${type}==$TYPE_MSISDN)
    ,dc.DIM_E_IMSI_MSISDN imsiMap
    #end
    #if ($networkType == $ApplicationConstants.LTE)
    ,dc.DIM_E_LTE_EVENT_SUBTYPE subtyperef
    ,dc.DIM_E_LTE_PDNDISCONNECTTYPE pdnref
    ,dc.DIM_E_LTE_SMS_ONLY sms_only_ref
    ,dc.DIM_E_LTE_COMBINED_TAU_TYPE combined_tau_type_ref
    ,dc.DIM_E_LTE_ARP_PCI arp_pci_ref1
    ,dc.DIM_E_LTE_ARP_PCI arp_pci_ref2
    ,dc.DIM_E_LTE_ARP_PCI arp_pci_ref3
    ,dc.DIM_E_LTE_ARP_PVI arp_pvi_ref1
    ,dc.DIM_E_LTE_ARP_PVI arp_pvi_ref2
    ,dc.DIM_E_LTE_ARP_PVI arp_pvi_ref3
    ,dc.DIM_E_LTE_BEARER_CAUSE bearer_cause_ref1
    ,dc.DIM_E_LTE_BEARER_CAUSE bearer_cause_ref2
    ,dc.DIM_E_LTE_BEARER_CAUSE bearer_cause_ref3
    #else
    ,dc.DIM_E_SGEH_SGSN sgsnref
    ,dc.DIM_E_SGEH_GGSN ggsnref
    #end
#end

#macro(EVENT_ANALYSIS_WHERE $rawType $networkType)
where
rawview.EVENT_ID = etref.EVENT_ID
and rawview.CAUSE_PROT_TYPE *= cptref.CAUSE_PROT_TYPE
and rawview.CAUSE_PROT_TYPE *= ccref.CAUSE_PROT_TYPE
and rawview.CAUSE_CODE *= ccref.CAUSE_CODE
and rawview.SUBCAUSE_CODE *= sccref.SUBCAUSE_CODE
and rawview.EVENT_RESULT *= erref.EVENT_RESULT
and rawview.ATTACH_TYPE *= attachref.ATTACH_TYPE
and rawview.DETACH_TRIGGER *= detrigref.DETACH_TRIGGER
and rawview.DETACH_TYPE *= detachref.DETACH_TYPE
and rawview.DEACTIVATION_TRIGGER *= deactrigview.DEACTIVATION_TRIGGER
and rawview.RAT = ratref.RAT
and rawview.SERVICE_REQ_TRIGGER *= service_req.SERVICE_REQ_TRIGGER
    #if (${rawType} == $ApplicationConstants.TYPE_MAN)
    and convert(varchar(12), rawview.TAC) in (
    select distinct(convert(varchar(12), tac)) from DIM_E_SGEH_TAC where MANUFACTURER = :$ApplicationConstants.TYPE_MAN
    union all
    select :$ApplicationConstants.TYPE_MAN
    )
 and rawview.TAC *= tacref.TAC
    #else
    and rawview.TAC *= tacref.TAC
    #end
    #if($QCI_ERR_FILTER)
    and $QCI_ERR_FILTER <> 0
    #end
    #if ($networkType == $ApplicationConstants.LTE)
    and rawview.L_DISCONNECT_PDN_TYPE *= pdnref.PDNDISCONNECTTYPE
    and rawview.EVENT_ID *= subtyperef.EVENT_ID and rawview.EVENT_SUBTYPE_ID *=subtyperef.EVENT_SUBTYPE_ID
    and subtyperef.EVENT_ID = 7

    and rawview.SMS_ONLY            *= sms_only_ref.SMS_ONLY
    and rawview.COMBINED_TAU_TYPE   *= combined_tau_type_ref.COMBINED_TAU_TYPE

    and rawview.ARP_PCI_1           *= arp_pci_ref1.ARP_PCI
    and rawview.ARP_PCI_2           *= arp_pci_ref2.ARP_PCI
    and rawview.ARP_PCI_3           *= arp_pci_ref3.ARP_PCI

    and rawview.ARP_PVI_1           *= arp_pvi_ref1.ARP_PVI
    and rawview.ARP_PVI_2           *= arp_pvi_ref2.ARP_PVI
    and rawview.ARP_PVI_3           *= arp_pvi_ref3.ARP_PVI

    and rawview.BEARER_CAUSE_1      *= bearer_cause_ref1.BEARER_CAUSE
    and rawview.BEARER_CAUSE_2      *= bearer_cause_ref2.BEARER_CAUSE
    and rawview.BEARER_CAUSE_3      *= bearer_cause_ref3.BEARER_CAUSE
    #else
    and rawview.OLD_SGSN_IPADDRESS  *= sgsnref.IP_ADDRESS
    and rawview.PDP_GGSN_IPADDRESS_1     *= ggsnref.GGSN_IPADDRESS
    and rawview.PDP_GGSN_IPADDRESS_2     *= ggsnref.GGSN_IPADDRESS
    #end
and rawview.EVENT_ID between 0 and 255  ##EVENT_ID is a tinyint in database
#end


#macro (EVENT_VOLUME_SELECT $type)
select
dateformat(isnull(err.TS, suc.TS #if(${type}), sub.TS #end ), 'yyyy-mm-dd hh:mm:ss.S') as TS,
isnull(sum (case when etref.EVENT_ID = 0 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as ATTACH_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 0 then isnull(err.NO_OF_ERRORS, 0) end),0) as ATTACH_FAILURES,
isnull(sum (case when etref.EVENT_ID = 1 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as ACTIVATE_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 1 then isnull(err.NO_OF_ERRORS, 0) end),0) as ACTIVATE_FAILURES,
isnull(sum (case when etref.EVENT_ID = 2 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as RAU_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 2 then isnull(err.NO_OF_ERRORS, 0) end),0) as RAU_FAILURES,
isnull(sum (case when etref.EVENT_ID = 3 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as ISRAU_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 3 then isnull(err.NO_OF_ERRORS, 0) end),0) as ISRAU_FAILURES,
isnull(sum (case when etref.EVENT_ID = 4 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as DEACTIVATE_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 4 then isnull(err.NO_OF_ERRORS, 0) end),0) as DEACTIVATE_FAILURES,
isnull(sum (case when etref.EVENT_ID = 14 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as DETACH_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 14 then isnull(err.NO_OF_ERRORS, 0) end),0) as DETACH_FAILURES,
isnull(sum (case when etref.EVENT_ID = 15 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as SERVICE_REQUEST_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 15 then isnull(err.NO_OF_ERRORS, 0) end),0) as SERVICE_REQUEST_FAILURES,
isnull(sum (case when etref.EVENT_ID = 5 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as L_ATTACH_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 5 then isnull(err.NO_OF_ERRORS, 0) end),0) as L_ATTACH_FAILURES,
isnull(sum (case when etref.EVENT_ID = 6 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as L_DETACH_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 6 then isnull(err.NO_OF_ERRORS, 0) end),0) as L_DETACH_FAILURES,
isnull(sum (case when etref.EVENT_ID = 7 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as L_HANDOVER_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 7 then isnull(err.NO_OF_ERRORS, 0) end),0) as L_HANDOVER_FAILURES,
isnull(sum (case when etref.EVENT_ID = 8 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as L_TAU_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 8 then isnull(err.NO_OF_ERRORS, 0) end),0) as L_TAU_FAILURES,
isnull(sum (case when etref.EVENT_ID = 9 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as L_DEDICATED_BEARER_ACTIVATE_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 9 then isnull(err.NO_OF_ERRORS, 0) end),0) as L_DEDICATED_BEARER_ACTIVATE_FAILURES,
isnull(sum (case when etref.EVENT_ID = 10 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as L_DEDICATED_BEARER_DEACTIVATE_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 10 then isnull(err.NO_OF_ERRORS, 0) end),0) as L_DEDICATED_BEARER_DEACTIVATE_FAILURES,
isnull(sum (case when etref.EVENT_ID = 11 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as L_PDN_CONNECT_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 11 then isnull(err.NO_OF_ERRORS, 0) end),0) as L_PDN_CONNECT_FAILURES,
isnull(sum (case when etref.EVENT_ID = 12 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as L_PDN_DISCONNECT_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 12 then isnull(err.NO_OF_ERRORS, 0) end),0) as L_PDN_DISCONNECT_FAILURES,
isnull(sum (case when etref.EVENT_ID = 13 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as L_SERVICE_REQUEST_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 13 then isnull(err.NO_OF_ERRORS, 0) end),0) as L_SERVICE_REQUEST_FAILURES
    #if(${type})
    ,isnull(max(NO_OF_TOTAL_ERR_SUBSCRIBERS),0) as NO_OF_TOTAL_ERR_SUBSCRIBERS
    #end

#end

#macro(REPLACE_TABLE_NAME_IN_COLUMN $rawTableAlias $columnName)
    $rawTableAlias.$columnName
#end

##-----------------------------------------------------------------------------
## Selects the appropriate Event Volume columns
## using the tzOffset adjusted time
##-----------------------------------------------------------------------------

#macro (EVENT_VOLUME_SELECT_ADJUSTED_TIME $type $tzOffsetInMinutes)
select
dateformat(DATEADD(mi, $tzOffsetInMinutes ,isnull(err.TS, suc.TS #if(${type}), sub.TS #end )), 'yyyy-mm-dd hh:mm:ss.S') as TS,
isnull(sum (case when etref.EVENT_ID = 0 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as ATTACH_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 0 then isnull(err.NO_OF_ERRORS, 0) end),0) as ATTACH_FAILURES,
isnull(sum (case when etref.EVENT_ID = 1 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as ACTIVATE_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 1 then isnull(err.NO_OF_ERRORS, 0) end),0) as ACTIVATE_FAILURES,
isnull(sum (case when etref.EVENT_ID = 2 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as RAU_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 2 then isnull(err.NO_OF_ERRORS, 0) end),0) as RAU_FAILURES,
isnull(sum (case when etref.EVENT_ID = 3 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as ISRAU_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 3 then isnull(err.NO_OF_ERRORS, 0) end),0) as ISRAU_FAILURES,
isnull(sum (case when etref.EVENT_ID = 4 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as DEACTIVATE_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 4 then isnull(err.NO_OF_ERRORS, 0) end),0) as DEACTIVATE_FAILURES,
isnull(sum (case when etref.EVENT_ID = 14 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as DETACH_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 14 then isnull(err.NO_OF_ERRORS, 0) end),0) as DETACH_FAILURES,
isnull(sum (case when etref.EVENT_ID = 15 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as SERVICE_REQUEST_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 15 then isnull(err.NO_OF_ERRORS, 0) end),0) as SERVICE_REQUEST_FAILURES,
isnull(sum (case when etref.EVENT_ID = 5 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as L_ATTACH_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 5 then isnull(err.NO_OF_ERRORS, 0) end),0) as L_ATTACH_FAILURES,
isnull(sum (case when etref.EVENT_ID = 6 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as L_DETACH_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 6 then isnull(err.NO_OF_ERRORS, 0) end),0) as L_DETACH_FAILURES,
isnull(sum (case when etref.EVENT_ID = 7 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as L_HANDOVER_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 7 then isnull(err.NO_OF_ERRORS, 0) end),0) as L_HANDOVER_FAILURES,
isnull(sum (case when etref.EVENT_ID = 8 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as L_TAU_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 8 then isnull(err.NO_OF_ERRORS, 0) end),0) as L_TAU_FAILURES,
isnull(sum (case when etref.EVENT_ID = 9 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as L_DEDICATED_BEARER_ACTIVATE_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 9 then isnull(err.NO_OF_ERRORS, 0) end),0) as L_DEDICATED_BEARER_ACTIVATE_FAILURES,
isnull(sum (case when etref.EVENT_ID = 10 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as L_DEDICATED_BEARER_DEACTIVATE_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 10 then isnull(err.NO_OF_ERRORS, 0) end),0) as L_DEDICATED_BEARER_DEACTIVATE_FAILURES,
isnull(sum (case when etref.EVENT_ID = 11 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as L_PDN_CONNECT_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 11 then isnull(err.NO_OF_ERRORS, 0) end),0) as L_PDN_CONNECT_FAILURES,
isnull(sum (case when etref.EVENT_ID = 12 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as L_PDN_DISCONNECT_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 12 then isnull(err.NO_OF_ERRORS, 0) end),0) as L_PDN_DISCONNECT_FAILURES,
isnull(sum (case when etref.EVENT_ID = 13 then isnull(err.NO_OF_ERRORS, 0) + isnull(suc.NO_OF_SUCCESSES,0) end),0) as L_SERVICE_REQUEST_ATTEMPTS,
isnull(sum (case when etref.EVENT_ID = 13 then isnull(err.NO_OF_ERRORS, 0) end),0) as L_SERVICE_REQUEST_FAILURES
    #if(${type})
    ,isnull(max(NO_OF_TOTAL_ERR_SUBSCRIBERS),0) as NO_OF_TOTAL_ERR_SUBSCRIBERS
    #end

#end


##-----------------------------------------------------------------------------
## function used to iterate over list of raw tables, and also determines if the tac exclusion filter
## should be applied based on to the groupName parameter supplied
##
## groupName: group name - if this is the EXCLUSIVE TAC group name, then the tac exclusion filter is not applied
##                to the raw tables.  Otherwise, the tac exclusion filter is applied to the raw tables
## rawtables: list of raw tables
## viewName: what to call the final result
## columnsToSelectFromTables: columns from raw tables that should be included in select from
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_HANDLE_TAC_EXCLUSION_SPECIFY_COLUMNS $groupName $rawTables $viewName $columnsToSelectFromTables)
    #if($groupname.equalsIgnoreCase($ApplicationConstants.EXCLUSIVE_TAC_GROUP_NAME))
        #REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_SPECIFY_COLUMNS($rawTables $viewName $columnsToSelectFromTables)
    #else
        #REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS($rawTables $viewName $columnsToSelectFromTables)
    #end
#end

##-----------------------------------------------------------------------------
## function used to iterate over list of raw tables, and also determines if the tac exclusion filter
## should be applied based on to the groupName parameter supplied
##
## groupName: group name - if this is the EXCLUSIVE TAC group name, then the tac exclusion filter is not applied
##                to the raw tables.  Otherwise, the tac exclusion filter is applied to the raw tables
## rawtables: list of raw tables
## viewName: what to call the final result
## columnsToSelectFromTables: columns from raw tables that should be included in select from
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_HANDLE_TAC_EXCLUSION_SPECIFY_COLUMNS_WEEK $groupName $rawTables $viewName $columnsToSelectFromTables)
    #if($groupname.equalsIgnoreCase($ApplicationConstants.EXCLUSIVE_TAC_GROUP_NAME))
        #REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_SPECIFY_COLUMNS_WEEK($rawTables $viewName $columnsToSelectFromTables)
    #else
        #REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_WEEK($rawTables $viewName $columnsToSelectFromTables)
    #end
#end

#macro (AND_IS_EXCLUSIVE_TAC_GROUP)
and GROUP_NAME = '$ApplicationConstants.EXCLUSIVE_TAC_GROUP_NAME'
#end

##-----------------------------------------------------------------------------
## counts number of rows for exclusive tacs in raw error tables
##
## rawtables: TechPackTables object containing raw tables
##-----------------------------------------------------------------------------
#macro (SUM_ERRORS_FOR_EXCLUSIVE_TAC_GROUP $rawTables)
    #SUM_VALUES_FOR_EXCLUSIVE_TAC_GROUP($rawTables.getErrTables())
#end

##-----------------------------------------------------------------------------
## counts number of rows for exclusive tacs in raw success tables
##
## rawtables: TechPackTables object containing raw tables
##-----------------------------------------------------------------------------
#macro (SUM_SUCCESSES_FOR_EXCLUSIVE_TAC_GROUP $rawTables)
    #SUM_VALUES_FOR_EXCLUSIVE_TAC_GROUP($rawTables.getSucTables())
#end

##-----------------------------------------------------------------------------
## counts number of rows for exclusive tacs in raw tables
##
## rawtables: list of raw tables
##-----------------------------------------------------------------------------
#macro (SUM_VALUES_FOR_EXCLUSIVE_TAC_GROUP $rawTables)
select
GROUP_NAME,
count(*)
from
    #REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_SPECIFY_COLUMNS($rawTables "tempView" ["TAC"])
,dc.GROUP_TYPE_E_TAC tacgroup
where
tempView.TAC = tacgroup.TAC
    #AND_IS_EXCLUSIVE_TAC_GROUP()
group by
GROUP_NAME
#end

##-----------------------------------------------------------------------------
## counts number of rows for a tac group in imsi raw success aggregation tables
##
## tables: TechPackTables object containing imsi raw success aggregation tables
## group: name of the tac group
##-----------------------------------------------------------------------------
#macro (SUM_SUCCESSES_FOR_TAC_GROUP_USING_IMSI_SUC_RAW_TABLES $tables $group)
    select
       '$group' as GROUP_NAME,
       sum(tmp.no_of_successes)
    from (
        #foreach($table in $tables)
           select
               sum(no_of_successes) as no_of_successes
           from
               dc.$table
           where
               #GET_DATETIME_RANGE()
               AND ISNULL(TAC,-1) in (select TAC from dc.GROUP_TYPE_E_TAC where GROUP_NAME = '$group')
           #if($velocityCount < $tables.size())
               union all
           #end
        #end
        ) as tmp
#end

##-----------------------------------------------------------------------------
## Returns the sentences for join based on multi tables
## It will check for empty table name which it will skip during join
## Atleast one valid table name should be present in $tables [list of tables)
##
## $tables: table names
## $jointable: table to be joined
## $columns : field name
##-----------------------------------------------------------------------------
#macro(GET_MULTI_JOIN_EMPTY_CHECK $tables $jointable $columns)
    #if($columns.size() == 0)
    ### Do noting return
    #else
        #set($noOfValidTables = 0)
        #foreach ($table in $tables)
            #if($table.length() > 0 )
                #set($noOfValidTables = $noOfValidTables + 1)
            #end
        #end
        #if($noOfValidTables <= 1)
            #foreach ($table in $tables)
                #if($table.length() > 0 )
                    #set($validTableName = $table)
                #end
            #end
            #GET_JOIN("$validTableName" "$jointable" $columns)
        #else
            #foreach ($column in $columns)
            isnull(
                #set($previousTable = "")
                #foreach ($table in $tables)
                ##if ( $velocityCount > 0 && $velocityCount < $tables.size()&& $previousTable.length() > 0)
                    #if ($previousTable.length() > 0 && $table.length() > 0 )
                    ,
                    #end
                    #if($table.length() > 0 )
                        ${table}.$column
                        #set($previousTable = $table)
                    #end
                #end
            )= $jointable.$column
                #if ( $velocityCount < $columns.size() )
                and
                #end
            #end
        #end
    #end
#end

#macro(CONVERT_TO_IS_NULL_FUNC_STRING $tables $columns)
    #foreach ($column in $columns)
    isnull(
        #foreach ($table in $tables)
            ${table}.$column
            #if ( $velocityCount < $tables.size() )
            ,
            #end
        #end
    ) as $column ,
    #end
#end

##-----------------------------------------------------------------------------
## function used to iterate over list of  tables
##
## tables: list of tables
## view: what to call the final result
## columnsToIncludeInResult: columns from tables that should be included in select from
##-----------------------------------------------------------------------------
#macro (REPLACE_VIEW_WITH_TABLES_AND_SPECIFY_COLUMNS $tables $view $columnsToIncludeInResult $extraTable $useTACExclusion)
(
    #foreach ($table in $tables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInResult)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInResult.size())
            ,
            #end
        #end
    from dc.$table
    where
        #GET_DATETIME_RANGE()
        #if($useTACExclusion)
        and
            #GET_TAC_EXCLUSION()
        #end
        #if($velocityCount < $tables.size())
        union all
        #end
    #end
) as $view
    #if(!((! $extraTable) && ("$!extraTable" == "")) && $extraTable.length() > 0)
    ,
    dc.$extraTable
    #end
#end

##-----------------------------------------------------------------------------
## function used to iterate over list of  tables
##
## tables: list of tables
## view: what to call the final result
## columnsToIncludeInResult: columns from tables that should be included in select from
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_TABLES_AND_SPECIFY_COLUMNS $tables $view $columnsToIncludeInResult $extraTable $useTACExclusion)
(
    #foreach ($table in $tables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInResult)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInResult.size())
            ,
            #end
        #end
    from dc.$table
    where
        #if ($timerange=="TR_4")
            #GET_DATE_RANGE_LOCAL()
        #else
            #GET_DATETIME_RANGE()
        #end
        #if($useTACExclusion)
        and
            #GET_TAC_EXCLUSION()
        #end
        #if($velocityCount < $tables.size())
        union all
        #end
    #end
) as $view
    #if(!((! $extraTable) && ("$!extraTable" == "")) && $extraTable.length() > 0)
    ,
    dc.$extraTable
    #end
#end

##----------------------------------------------------------------------------------------
## function used to iterate over list of  tables and select columns with specific event ID
##
## tables: list of tables
## view: what to call the final result
## columnsToIncludeInResult: columns from tables that should be included in select from
##----------------------------------------------------------------------------------------
#macro (REPLACE_VIEW_WITH_TABLES_AND_SPECIFY_COLUMNS_EVENT_ID_FILTER $tables $view $columnsToIncludeInResult $extraTable $useTACExclusion)
(
    #foreach ($table in $tables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInResult)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInResult.size())
            ,
            #end
        #end
    from dc.$table
    where
        #GET_DATETIME_RANGE()
        #if($useTACExclusion)
        and
            #GET_TAC_EXCLUSION()
        #end
        #if($eventID)
        and
        EVENT_ID = :EVENT_ID
        #end
        #if($HOUR)
        and
        HOUR_ID = :HOUR_ID
        #end
        #if($DAY)
        and
        dayname(cast (DATEADD(MINUTE, ${tzOffset}, DATETIME_ID) as DATE)) = :DAY
        #end
        #if($SUBBI_HIER321_ID)
        and
        HIER321_ID = :HIER321_ID
        #end
        #if($isSubbiterminalAnalysis)
        and
        TAC = :TAC
        #end
        #if($velocityCount < $tables.size())
        union all
        #end
    #end
) as $view
    #if(!((! $extraTable) && ("$!extraTable" == "")) && $extraTable.length() > 0)
    ,
    dc.$extraTable
    #end
#end

##----------------------------------------------------------------------------------------
## function used to iterate over list of  tables and select columns with specific event ID
## constant
##
## tables: list of tables
## view: what to call the final result
## columnsToIncludeInResult: columns from tables that should be included in select from
##----------------------------------------------------------------------------------------
#macro (REPLACE_VIEW_WITH_TABLES_AND_SPECIFY_COLUMNS_EVENT_ID_CONSTANT $tables $view $columnsToIncludeInResult $extraTable $useTACExclusion)
(
    #foreach ($table in $tables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInResult)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInResult.size())
            ,
            #end
        #end
    from dc.$table
    where
        #GET_DATETIME_RANGE()
        #if($useTACExclusion)
        and
            #GET_TAC_EXCLUSION()
        #end
        #if($eventID)
        and
        EVENT_ID = $eventID
        #end
        #if($HOUR)
        and
        HOUR_ID = :HOUR_ID
        #end
        #if($DAY)
        and
        dayname(cast (DATEADD(MINUTE, ${tzOffset}, DATETIME_ID) as DATE)) = :DAY
        #end
        #if($internalCauseCode)
        and
        INTERNAL_CAUSE_CODE = :INTERNAL_CAUSE_CODE
        #end
        #if($faultCode)
        and
        FAULT_CODE = :FAULT_CODE
        #end
        #if($velocityCount < $tables.size())
        union all
        #end
    #end
) as $view
    #if(!((! $extraTable) && ("$!extraTable" == "")) && $extraTable.length() > 0)
    ,
    dc.$extraTable
    #end
#end

##-----------------------------------------------------------------------------
## function used to add all columns over list of column namees
##
## tables: list of columns
##-----------------------------------------------------------------------------
#macro (REPLACE_BY_SUM_STATEMENT $listOfCoulmns $sumStatementAlias)
    #foreach ($column in $listOfCoulmns)
        $column
        #if($velocityCount < $listOfCoulmns.size())
        +
        #end
    #end as $sumStatementAlias
#end

#macro (REPLACE_BY_SUM_STATEMENT_WITH_AGG $listOfCoulmns $sumStatementAlias)
    #foreach ($column in $listOfCoulmns)
    isnull(sum($column),0)
        #if($velocityCount < $listOfCoulmns.size())
        +
        #end
    #end as $sumStatementAlias
#end

#macro(GET_COLUMNS_WHERE_BY_TABLE_EXTRA_TABLE_EXTRA_COLUMN $eventTableName $allColumns $extraTable $extraColumn)
    #if(!((! $extraTable) && ("$!extraTable" == "")) && $extraTable.length() > 0)
        #GET_COLUMNS_WHERE_BY_TABLE($extraTable $allColumns)
    and
        #GET_JOIN($eventTableName $extraTable $extraColumn)
    #else
        #GET_COLUMNS_WHERE_BY_TABLE($eventTableName $allColumns)
    #end
#end


#macro(GET_COLUMNS_WHERE_BY_TABLE_EXTRA_TABLE_EXTRA_COLUMN_EVENTID $eventTableName $allColumns $extraTable $extraColumn)
    #if(!((! $extraTable) && ("$!extraTable" == "")) && $extraTable.length() > 0)
        #GET_COLUMNS_WHERE_BY_TABLE($extraTable $extraColumn)
    and
        #GET_JOIN_WITH_EVENT_ID($eventTableName $extraTable $allColumns)
    #else
        #GET_COLUMNS_WHERE_BY_TABLE($eventTableName $allColumns)
    #end
#end

#macro(GET_JOIN_WITH_EVENT_ID $atable $btable $columns)
    #foreach ($column in $columns)
        #if ( $velocityCount > 1)
        and
        #end
        #if ($column == $ApplicationConstants.EVENT_ID_SQL_PARAM)
            $atable.$column = :$column
        #else
            $atable.$column=$btable.$column
        #end
    #end
#end

##new function used to replace raw view with raw tables
#macro (UNION_ALL_TABLES $tables $unionview)
(
    #foreach ($table in $tables)
    select
    *
    from dc.$table
        #if($velocityCount < $tables.size())
        union all
        #end
    #end
) as $unionview
#end

#**
 * Calculate KPI ratio for event analysis summary
 *#
#macro(CALCULATE_SUCCESS_RATIO)
cast (round((isnull((  isnull(NO_OF_SUCCESSES,0) )/cast(   isnull(NO_OF_ERRORS,0)   + isnull(NO_OF_SUCCESSES,0)  as float),0))*100, 2) as numeric(5,2))
as SuccessRatio
#end

##-----------------------------------------------------------------------------
## Returns list of columns with alias name as column
##
## columns : field names
##-----------------------------------------------------------------------------
#macro(GET_COLUMNS_BY_TABLE_WITH_ALIAS $table $columns)
    #foreach ($column in $columns)
        ${table}.$column as $column,
    #end
#end

#macro(REPLACE_WITH_SUM_STATEMENT $columns)
    #foreach ($column in $columns)
    isnull(sum($column),0) as $column,
    #end
#end

#macro(REPLACE_WITH_SUM_STATEMET_NO_COMMA_TRAILING $columns)
    #foreach ($column in $columns)
        #if( $velocityCount <= 1 )
        isnull(sum($column),0) as $column
        #else
        ,isnull(sum($column),0) as $column
        #end
    #end
#end

##new function used to replace raw view with raw tables with filter columns
#macro (UNION_ALL_TABLES_WITH_FILTER_COLUMNS_CHECK $tables $unionview $columns)
(
    #foreach ($table in $tables)
        #if(!((!$columns) && ("$!columns" == "")) && $columns.size() > 0)
        select
            #GET_COLUMNS_NO_COMMA_TRAILING($columns)
        from
        dc.$table
        group by
            #GET_COLUMNS_NO_COMMA_TRAILING($columns)
        #else
        select
        *
        from dc.$table
        #end
        #if($velocityCount < $tables.size())
        union all
        #end
    #end
) as $unionview
#end

#macro(IF_NULL_ASSIGN_ZERO $columns)
    #foreach ($column in $columns)
    isnull($column,0) as $column,
    #end
#end

#macro(IF_NULL_ASSIGN_ZERO_NO_COMMA_TRAILING $columns)
    #foreach ($column in $columns)
    isnull($column,0) as $column
        #if($velocityCount < $columns.size())
        ,
        #end
    #end
#end

##new function used to replace tables with view
#macro(REPLACE_AGGREGATION_TABLES_WITH_VIEW $tables $view)
(
    #foreach ($table in $tables)
    select    *
    from dc.$table
    where
        #GET_DATETIME_RANGE()
        #if($velocityCount < $tables.size())
        union all
        #end
    #end
) as $view
#end



##-----------------------------------------------------------------------------
## Macro used to generate where condition for time interval
##-----------------------------------------------------------------------------
#macro(GET_DATETIME_RANGE_TS)
DATETIME_ID >= tmp_st and DATETIME_ID < tmp_et
#end

##-----------------------------------------------------------------------------
## Macro used to generate isnull(t1.var, t2.var, t3.var ...)
##-----------------------------------------------------------------------------
#macro(CONVERT_TO_IS_NULL_FOR_TWO_TABLES $leftTable $rightTable $columns)
    #foreach($column in $columns)
    isnull($leftTable.$column, $rightTable.$column),
    #end
#end

##-----------------------------------------------------------------------------
## Macro used to select columns from raw tables according to datetime range and
## $columnsNotNull are not null
##
## tables        list of raw tables to query
## view          result of this query will be called rawview
## columnsToIncludeInResult         columns to select from raw tables, and include in final view
## columnsNotNull  columns are not null
## useExclusiveTac true --> exclude TAC whose group is 'EXCLUSIVE_TAC' false --> don't exclude TAC whose group is 'EXCLUSIVE_TAC'
## useTimeRangeTS  true --> #GET_DATETIME_RANGE_TS() false --> #GET_DATETIME_RANGE()
##-----------------------------------------------------------------------------
#macro (PRIVATE_REPLACE_VIEW_WITH_TABLES_AND_SPECIFY_COLUMNS_NOT_NULL $tables $view $columnsToIncludeInResult $columnsNotNull $useExclusiveTac $useImsiZeroExclusion)
(
    #foreach ($table in $tables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInResult)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInResult.size())
            ,
            #end
        #end
    from dc.$table
    where
        #GET_DATETIME_RANGE()
        #if ($useImsiZeroExclusion)
        and #GET_IMSI0_EXCLUSION($table)
        #end
        #if ($useExclusiveTac)
        and #GET_TAC_EXCLUSION()
        #end
        #foreach ($columnNotNull in $columnsNotNull)
        and $columnNotNull is not null
        #end
        #if($velocityCount < $tables.size())
        union all
        #end
    #end
) as $view
#end


##-----------------------------------------------------------------------------
## Macro used to select columns from raw tables according to datetime range and
## $columnsNotNull are not null
##
## tables        list of raw tables to query
## view          result of this query will be called rawview
## columnsToIncludeInResult         columns to select from raw tables, and include in final view
## columnsNotNull  columns are not null
## useExclusiveTac true --> exclude TAC whose group is 'EXCLUSIVE_TAC' false --> don't exclude TAC whose group is 'EXCLUSIVE_TAC'
##-----------------------------------------------------------------------------
#macro (PRIVATE_REPLACE_VIEW_WITH_TABLES_AND_SPECIFY_COLUMNS_NOT_NULL_WEEK $tables $view $columnsToIncludeInResult $columnsNotNull $useExclusiveTac $useImsiZeroExclusion)
(
    #foreach ($table in $tables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInResult)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInResult.size())
            ,
            #end
        #end
    from dc.$table
    where
        #GET_DATE_RANGE_LOCAL()
        #if ($useImsiZeroExclusion)
        and #GET_IMSI0_EXCLUSION($table)
        #end
        #if ($useExclusiveTac)
        and #GET_TAC_EXCLUSION()
        #end
        #foreach ($columnNotNull in $columnsNotNull)
        and $columnNotNull is not null
        #end
        #if($velocityCount < $tables.size())
        union all
        #end
    #end
) as $view
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_SPECIFY_COLUMNS_NOT_NULL $rawtables $rawview $columnsToIncludeInResult $columnsNotNull)
    #PRIVATE_REPLACE_VIEW_WITH_TABLES_AND_SPECIFY_COLUMNS_NOT_NULL($rawtables $rawview $columnsToIncludeInResult $columnsNotNull false false)
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_SPECIFY_COLUMNS_NOT_NULL_WEEK $rawtables $rawview $columnsToIncludeInResult $columnsNotNull)
    #PRIVATE_REPLACE_VIEW_WITH_TABLES_AND_SPECIFY_COLUMNS_NOT_NULL_WEEK($rawtables $rawview $columnsToIncludeInResult $columnsNotNull false false)
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_SPECIFY_COLUMNS_NOT_NULL_WITH_IMSI0_EXCLUSION $rawtables $rawview $columnsToIncludeInResult $columnsNotNull)
    #PRIVATE_REPLACE_VIEW_WITH_TABLES_AND_SPECIFY_COLUMNS_NOT_NULL($rawtables $rawview $columnsToIncludeInResult $columnsNotNull false true)
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_SPECIFY_COLUMNS_NOT_NULL_WITH_TAC_EXCLUSION $rawtables $rawview $columnsToIncludeInResult $columnsNotNull)
    #PRIVATE_REPLACE_VIEW_WITH_TABLES_AND_SPECIFY_COLUMNS_NOT_NULL($rawtables $rawview $columnsToIncludeInResult $columnsNotNull true false)
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_SPECIFY_COLUMNS_NOT_NULL_WITH_TAC_EXCLUSION_IMSI0_EXCLUSION $rawtables $rawview $columnsToIncludeInResult $columnsNotNull)
    #PRIVATE_REPLACE_VIEW_WITH_TABLES_AND_SPECIFY_COLUMNS_NOT_NULL($rawtables $rawview $columnsToIncludeInResult $columnsNotNull true true)
#end

#macro (REPLACE_VIEW_WITH_TABLES_AND_SPECIFY_COLUMNS_NOT_NULL $tables $view $columnsToIncludeInResult $columnsNotNull)
    #PRIVATE_REPLACE_VIEW_WITH_TABLES_AND_SPECIFY_COLUMNS_NOT_NULL($tables $view $columnsToIncludeInResult $columnsNotNull false false)
#end

#macro (REPLACE_VIEW_WITH_TABLES_AND_SPECIFY_COLUMNS_NOT_NULL_IMSI0_EXCLUSION $tables $view $columnsToIncludeInResult $columnsNotNull)
    #PRIVATE_REPLACE_VIEW_WITH_TABLES_AND_SPECIFY_COLUMNS_NOT_NULL($tables $view $columnsToIncludeInResult $columnsNotNull false true)
#end

##-----------------------------------------------------------------------------
## Macro used to select columns from raw tables according to datetime range and
## $columnsNotNull are not null
##
## tables        list of raw tables to query
## view          result of this query will be called rawview
## columnsToIncludeInResult         columns to select from raw tables, and include in final view
## condition       where clause
## useExclusiveTac true --> exclude TAC whose group is 'EXCLUSIVE_TAC' false --> don't exclude TAC whose group is 'EXCLUSIVE_TAC'
## useTimeRangeTS  true --> #GET_DATETIME_RANGE_TS() false --> #GET_DATETIME_RANGE()
##-----------------------------------------------------------------------------
#macro (REPLACE_VIEW_WITH_TABLES_AND_CONDITION $tables $view $columnsToIncludeInResult $groupCondition $typeCondition $conditions $useExclusiveTac)
(
    #foreach ($table in $tables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInResult)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInResult.size())
            ,
            #end
        #end
    from dc.$table
    where
        #GET_DATETIME_RANGE()
        #foreach($condition in $conditions)
        and $condition
        #end
        #if ($useExclusiveTac)
        and #GET_TAC_EXCLUSION()
        #end
        #if ($groupCondition != "")
        and $groupCondition
        #else
            #if ($typeCondition != "")
            and $typeCondition
            #end
        #end
        #if($velocityCount < $tables.size())
        union all
        #end
    #end
) as $view
#end

##-----------------------------------------------------------------------------
## Macro used to select columns from raw tables according to datetime range and
## $columnsNotNull are not null
##
## tables        list of raw tables to query
## view          result of this query will be called rawview
## columnsToIncludeInResult         columns to select from raw tables, and include in final view
## condition       where clause
## useExclusiveTac true --> exclude TAC whose group is 'EXCLUSIVE_TAC' false --> don't exclude TAC whose group is 'EXCLUSIVE_TAC'
## useTimeRangeTS  true --> #GET_DATETIME_RANGE_TS() false --> #GET_DATETIME_RANGE()
##-----------------------------------------------------------------------------
#macro (REPLACE_VIEW_WITH_TABLES_AND_CONDITION $tables $view $columnsToIncludeInResult $groupCondition $typeCondition $conditions $useExclusiveTac)
(
    #foreach ($table in $tables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInResult)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInResult.size())
            ,
            #end
        #end
    from dc.$table
    where
        #GET_DATETIME_RANGE()
        #foreach($condition in $conditions)
        and $condition
        #end
        #if ($useExclusiveTac)
        and #GET_TAC_EXCLUSION()
        #end
        #if ($groupCondition != "")
        and $groupCondition
        #else
            #if ($typeCondition != "")
            and $typeCondition
            #end
        #end
        #if($velocityCount < $tables.size())
        union all
        #end
    #end
) as $view
#end
#macro (GROUP_OR_SINGLE_INFO)
    #if($isgroup)
    and #GET_JOIN("errRef" "temp_group" $joinKeys)
    and temp_group.${groupnameColumn} = :$ApplicationConstants.GROUP_NAME_PARAM
    #else
    and #GET_COLUMNS_WHERE_BY_TABLE("errRef" $columns)
    #end
#end

#macro (GROUP_TABLE_INFO)
    #if($isgroup)
    ,dc.$groupTable temp_group
    #end
#end

##Use this whenever performing a count(distinct(IMSI)), more efficient, see event_imsi.vm as an example
#macro (GET_ALL_IMSIS_FOR_PERIOD_WITH_NON_ZERO_PAGING_ATTEMPT $rawtables $rawview $interval)
    #foreach ($rawtable in $rawtables)
    #if($timerange=="TR_4")
    select local_date_id,IMSI
    #else
    select dateadd(mi,-datepart(MINUTE,DATETIME_ID)%$interval,DATETIME_ID),IMSI
    #end
    from dc.$rawtable raw
        #if($type==$ApplicationConstants.TYPE_MAN)
        ,dc.DIM_E_SGEH_TAC tac
        #end
    where
        #if ($timerange=="TR_4")
            #GET_DATE_RANGE_LOCAL()
        #else
            #GET_DATETIME_RANGE()
        #end
    and #GET_TAC_MANUFACTURER_OR_PLAIN_GET_COLUMNS_WHERE($type "raw")
    and PAGING_ATTEMPTS <> 0
        #if ($useTACExclusion)
        and #GET_TAC_EXCLUSION_BY_TABLE("raw")
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
#end

##Use this whenever performing a count(distinct(IMSI)), more efficient, see event_imsi.vm as an example
#macro (GET_ALL_IMSIS_FOR_PERIOD $rawtables $rawview $interval)
    #foreach ($rawtable in $rawtables)
    #if($timerange=="TR_4")
    select local_date_id,IMSI
    #else
    select dateadd(mi,-datepart(MINUTE,DATETIME_ID)%$interval,DATETIME_ID),IMSI
    #end
    from dc.$rawtable raw
        #if($type==$ApplicationConstants.TYPE_MAN)
        ,dc.DIM_E_SGEH_TAC tac
        #end
    where
        #if ($timerange=="TR_4")
            #GET_DATE_RANGE_LOCAL()
        #else
            #GET_DATETIME_RANGE()
        #end
    and #GET_TAC_MANUFACTURER_OR_PLAIN_GET_COLUMNS_WHERE($type "raw")
        #if ($useTACExclusion)
        and #GET_TAC_EXCLUSION_BY_TABLE("raw")
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
#end

#macro(GET_COLUMNS_AS_SYS_COL $columns)
    #foreach ($column in $columns)
      #if($column == "APN")
         #set($SYS_COL = "SYS_COL_APN")
         #if ( $velocityCount <= 1)
             :$column as $SYS_COL
         #else
            , :$column as $SYS_COL
        #end
      #elseif($column == "HIERARCHY_3" && ($columns.size()== 3 || $columns.size()== 4))
          #set($SYS_COL = "SYS_COL_HIERARCHY_3")
          #if ( $velocityCount <= 1)
               :$column as $SYS_COL
          #else
               ,  :$column as $SYS_COL
          #end
      #elseif($column == "VENDOR" && ($columns.size()== 3 || $columns.size()== 4))
           #set($SYS_COL = "SYS_COL_VENDOR")
           #if ( $velocityCount <= 1)
                :$column as $SYS_COL
           #else
                , :$column as $SYS_COL
           #end
      #elseif($column == "HIERARCHY_1" && $columns.size()== 4)
           #set($SYS_COL = "SYS_COL_HIERARCHY_1")
           #if ( $velocityCount <= 1)
                :$column as $SYS_COL
           #else
                , :$column as $SYS_COL
        #end
           #else
             #if ( $velocityCount <= 1)
                  :$column as $column
             #else
                  , :$column as $column
             #end
      #end
    #end
#end


##Use this whenever there is a select X,Y from ..... where X=... and Y=... as X and Y can be set as constants and not read up
##See event_imsi.vm as an example
#macro(GET_COLUMNS_AS $columns)
    #foreach ($column in $columns)
        #if ( $velocityCount <= 1)
        :$column as $column
        #else
        , :$column as $column
        #end
    #end
#end
##Use this whenever there is a select X,Y from ..... where X=... and Y=... as X and Y can be set as constants and not read up
##See event_imsi.vm as an example
#macro(GET_TAC_MANUFACTURER_OR_PLAIN_GET_COLUMNS_AS $type)
    #if($type==$ApplicationConstants.TYPE_MAN)
    :$ApplicationConstants.TYPE_MAN as MANUFACTURER
    #else
        #GET_COLUMNS_AS($columns)
    #end
#end


#macro (GET_ALL_IMSIS_FOR_PERIOD_AND_GROUP_WITH_NON_ZERO_PAGING_ATTEMPT $rawtables $rawview $interval $groupTable $groupnameColumn $joinKeys)
    #foreach ($rawtable in $rawtables)
    select dateadd(mi,-datepart(MINUTE,DATETIME_ID)%$interval,DATETIME_ID),IMSI
        #if($type==$ApplicationConstants.TYPE_MAN)
        from dc.$rawtable rt,dc.DIM_E_SGEH_TAC tac
        #else
        from dc.$rawtable rt,dc.$groupTable gtes
        #end
    where
    PAGING_ATTEMPTS != 0
    #if ($timerange=="TR_4")
         and #GET_ADJUSTED_DATETIME_RANGE()
    #else
         and #GET_DATETIME_RANGE()
    #end
        #if ($useTACExclusion)
        and #GET_TAC_EXCLUSION()
        #end
        #if($type==$ApplicationConstants.TYPE_MAN)
        and #GET_JOIN("tac" "rt" $joinKeys)
        #else
        and #GET_JOIN("gtes" "rt" $joinKeys)
        #end
    and $groupnameColumn = :$ApplicationConstants.GROUP_NAME_PARAM
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
#end

#macro (GET_ALL_IMSIS_FOR_PERIOD_AND_GROUP_WITH_NON_ZERO_PAGING_ATTEMPT_ISAGG $rawtables $rawview $interval $groupTable $groupnameColumn $joinKeys $isagg)
    #foreach ($rawtable in $rawtables)
    #if($timerange=="TR_4")
    select local_date_id,IMSI
    #else
    select dateadd(mi,-datepart(MINUTE,DATETIME_ID)%$interval,DATETIME_ID),IMSI
    #end
        #if($type==$ApplicationConstants.TYPE_MAN)
        from dc.$rawtable rt,dc.DIM_E_SGEH_TAC tac
        #else
        from dc.$rawtable rt,dc.$groupTable gtes
        #end
    where
    PAGING_ATTEMPTS <> 0
        #if ($useTACExclusion)
        and #GET_TAC_EXCLUSION_BY_TABLE("rt")
        #end
        #if($isagg)
        #if ($timerange=="TR_4")
            and #GET_DATE_RANGE_LOCAL()
        #else
            and #GET_DATETIME_RANGE()
        #end
        #end
        #if($type==$ApplicationConstants.TYPE_MAN)
        and #GET_JOIN("tac" "rt" $joinKeys)
        #else
        and #GET_JOIN("gtes" "rt" $joinKeys)
        #end
    and $groupnameColumn = :$ApplicationConstants.GROUP_NAME_PARAM
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
#end

#macro (GET_ALL_IMSIS_FOR_PERIOD_AND_GROUP_ISAGG $rawtables $rawview $interval $groupTable $groupnameColumn $joinKeys $isagg)
    #foreach ($rawtable in $rawtables)
    #if($timerange=="TR_4")
    select local_date_id,IMSI
    #else
    select dateadd(mi,-datepart(MINUTE,DATETIME_ID)%$interval,DATETIME_ID),IMSI
    #end
        #if($type==$ApplicationConstants.TYPE_MAN)
        from dc.$rawtable rt,dc.DIM_E_SGEH_TAC tac
        #else
        from dc.$rawtable rt,dc.$groupTable gtes
        #end
    where
        $groupnameColumn = :$ApplicationConstants.GROUP_NAME_PARAM
        #if ($useTACExclusion)
        and #GET_TAC_EXCLUSION_BY_TABLE("rt")
        #end
        #if($isagg)
        #if ($timerange=="TR_4")
            and #GET_DATE_RANGE_LOCAL()
        #else
            and #GET_DATETIME_RANGE()
        #end
        #end
        #if($type==$ApplicationConstants.TYPE_MAN)
        and #GET_JOIN("tac" "rt" $joinKeys)
        #else
        and #GET_JOIN("gtes" "rt" $joinKeys)
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
#end


#macro (MSS_GROUP_OR_SINGLE_INFO)
    #if($isgroup)
    and errRef.$id=temp_group.$id
    and temp_group.$groupnameColumn = :$ApplicationConstants.GROUP_NAME_KEY
    #else
    and #GET_COLUMNS_WHERE_BY_TABLE("errRef" $columns)
    #end
#end

##new function used to replace raw view with raw tables with tac exclusion
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_OPTIONAL_TAC_EXCLUSION_SPECIFY_COLUMNS $rawtables $rawview $columnsToIncludeInNewView $useTACExclusion)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #if ($timerange == "TR_4")
            #GET_ADJUSTED_DATETIME_RANGE()
        #else
            #GET_DATETIME_RANGE()
        #end
        #if($useTACExclusion)
        and #GET_TAC_EXCLUSION()
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (UNION_ALL_AGGREGATION_VIEWS_WITH_SPECIFIC_COLUMNS $aggViews $view $columnsToIncludeInNewView)
    #PRIVATE_UNION_ALL_AGGREGATION_VIEWS_WITH_SPECIFIC_COLUMNS($aggViews $view $columnsToIncludeInNewView false)
#end
#macro (UNION_ALL_AGGREGATION_VIEWS_WITH_SPECIFIC_COLUMNS_WITH_IMSI0_EXCLUSION $aggViews $view $columnsToIncludeInNewView)
    #PRIVATE_UNION_ALL_AGGREGATION_VIEWS_WITH_SPECIFIC_COLUMNS($aggViews $view $columnsToIncludeInNewView true)
#end

##Function used for HFA aggregation view list
#macro (PRIVATE_UNION_ALL_AGGREGATION_VIEWS_WITH_SPECIFIC_COLUMNS $aggViews $view $columnsToIncludeInNewView $useImsiZeroExclusion)
(
    #foreach ($aggView in $aggViews)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$aggView
    WHERE #GET_DATETIME_RANGE()
        #if ($useImsiZeroExclusion)
        and #GET_IMSI0_EXCLUSION($aggView)
        #end
        #if($velocityCount < $aggViews.size())
        union all
        #end
    #end
) as $view
#end

##Function used construct LTE CFA CAUSE CODE PIE CHART WHERE CLAUSE
#macro (GET_LTE_CFA_CAUSE_CODE_PIE_CHART_CAUSE_CODE_WHERE_LIST $view $causeCodeDataList)
(
    #set($size = $causeCodeDataList.size())
    #foreach ($causeCodeData in $causeCodeDataList)
    ( ${view}.EVENT_ID = $causeCodeData.getEventId() and ${view}.CAUSE_CODE = $causeCodeData.getCauseCode())
        #if($velocityCount < $size)
        or
        #end
    #end
)
#end

##Function used construct LTE HFA CAUSE CODE PIE CHART WHERE CLAUSE
#macro (GET_LTE_HFA_CAUSE_CODE_PIE_CHART_CAUSE_CODE_WHERE_LIST $view $causeCodeDataList)
(
    #set($size = $causeCodeDataList.size())
    #foreach ($causeCodeData in $causeCodeDataList)
    ( ${view}.EVENT_ID = $causeCodeData.getEventId() and ${view}.CAUSE_CODE = $causeCodeData.getCauseCode())
        #if($velocityCount < $size)
        or
        #end
    #end
)
#end
##-----------------------------------------------------------------------------
## Calculate the datetime_id for a selected interval to be included into a select statement
##-----------------------------------------------------------------------------
#macro(GET_DATETIME_ID)
    #if(${timerange}==$ApplicationConstants.ONE_MINUTE)
        #set($interval=1)
    #elseif(${timerange}==$ApplicationConstants.FIFTEEN_MINUTES)
        #set($interval=15)
    #elseif($${timerange}==$ApplicationConstants.DAY)
        #set($interval=1440)
    #else
        #set($interval=1)
    #end

    #GET_DATETIME_ID_WITH_DATEADD($interval)
#end

##-----------------------------------------------------------------------------
## Exclude IMSI = 0 from subscriber ranking.
## This should be used in all subscriber rankings.
## rawView : a raw table partition or a union of all raw table partitions
##-----------------------------------------------------------------------------
#macro(GET_IMSI0_EXCLUSION $rawView)
dc.${rawView}.IMSI <> 0
#end

##-----------------------------------------------------------------------------
## Exclude IMSI = NULL from subscriber ranking.
## This should be used in all subscriber rankings.
## rawView : a raw table partition or a union of all raw table partitions
##-----------------------------------------------------------------------------
#macro(GET_IMSINULL_EXCLUSION $rawView)
dc.${rawView}.IMSI is not null
#end


##-----------------------------------------------------------------------------
## Query aggregation views (as post-aggregation), excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning distinct columns with respective counts of
## the specified columns in the counterColumn column.
##
## aggViews : list of aggregation views
## view : the view name to be created from this select
## columnsToIncludeInNewView : columns that should be included in this new view
## counterColumn : the column in raw table that contains a counter of e.g. failures
## columnToInclude : the distinct columns that should be used in the where clause when selecting from aggregation views
##-----------------------------------------------------------------------------
#macro (UNION_ALL_AGGREGATION_VIEWS_WITH_SPECIFIC_COLUMNS_POST_AGGREGATE $aggViews $view $columnsToIncludeInNewView $counterColumn)
(
select
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount <= $columnsToIncludeInNewView.size())
        ,
        #end
    #end
sum($counterColumn) as $counterColumn
from (
    #foreach ($aggView in $aggViews)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
        #GET_DATETIME_ID(),
    sum($counterColumn) as $counterColumn
    from dc.$aggView
    where
        #GET_DATETIME_RANGE()
    group by
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    DATETIME_ID
        #if($velocityCount < $aggViews.size())
        union all
        #end
    #end
) as viewTemp
group by
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount < $columnsToIncludeInNewView.size())
        ,
        #end
    #end
) as $view
#end

##-----------------------------------------------------------------------------
## Query aggregation views (as post-aggregation), excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning distinct columns with respective counts of
## the specified columns in the counterColumn column.
##
## aggViews : list of aggregation views
## view : the view name to be created from this select
## columnsToIncludeInNewView : columns that should be included in this new view
## counterColumn : the column in raw table that contains a counter of e.g. failures
## columnToInclude : the distinct columns that should be used in the where clause when selecting from aggregation views
##-----------------------------------------------------------------------------
#macro (UNION_ALL_AGGREGATION_VIEWS_WITH_SPECIFIC_COLUMNS_POST_AGGREGATE_GROUPS $aggViews $view $columnsToIncludeInNewView $counterColumn)
(
select
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount <= $columnsToIncludeInNewView.size())
        ,
        #end
    #end
sum($counterColumn) as $counterColumn
from (
    #foreach ($aggView in $aggViews)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $aggView.$columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    sum($counterColumn) as $counterColumn
    from dc.$aggView,
        $groupTable group_table
    where
        #GET_DATETIME_RANGE()
    and #GET_JOIN($aggView "group_table" $joinKeys)
    and group_table.${groupnameColumn} = :$ApplicationConstants.GROUP_NAME_PARAM
    group by
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $aggView.$columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
        #if($velocityCount < $aggViews.size())
        union all
        #end
    #end
) as viewTemp
group by
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount < $columnsToIncludeInNewView.size())
        ,
        #end
    #end
) as $view
#end

##-----------------------------------------------------------------------------
## Query aggregation views (as post-aggregation), excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning distinct columns with respective counts of
## the specified columns in the counterColumn column.
##
## aggViews : list of aggregation views
## view : the view name to be created from this select
## columnsToIncludeInNewView : columns that should be included in this new view
## counterColumn : the column in raw table that contains a counter of e.g. failures
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## columnToInclude : the distinct columns that should be used in the where clause when selecting from aggregation views
##-----------------------------------------------------------------------------
#macro (UNION_ALL_AGGREGATION_VIEWS_WITH_SPECIFIC_COLUMNS_POST_AGGREGATE_WITH_CONDITION $aggViews $view $columnsToIncludeInNewView $counterColumn $conditionColumns)
(
select
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount <= $columnsToIncludeInNewView.size())
        ,
        #end
    #end
sum($counterColumn) as $counterColumn
from (
    #foreach ($aggView in $aggViews)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $aggView.$columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    sum($counterColumn) as $counterColumn
    from dc.$aggView
    where
        #foreach ($conditionColumn in $conditionColumns)
            $conditionColumn = :$conditionColumn
            #if($velocityCount <= $conditionColumns.size())
            and
            #end
        #end
        #GET_DATETIME_RANGE()
    group by
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
        #if($velocityCount < $aggViews.size())
        union all
        #end
    #end
) as viewTemp
group by
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount < $columnsToIncludeInNewView.size())
        ,
        #end
    #end
) as $view
#end

##-----------------------------------------------------------------------------
## Query aggregation views (as post-aggregation), excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning distinct columns with respective counts of
## the specified columns in the counterColumn column.
##
## aggViews : list of aggregation views
## view : the view name to be created from this select
## columnsToIncludeInNewView : columns that should be included in this new view
## counterColumn : the column in raw table that contains a counter of e.g. failures
## columnToInclude : the distinct columns that should be used in the where clause when selecting from aggregation views
##-----------------------------------------------------------------------------
#macro (UNION_ALL_AGGREGATION_VIEWS_WITH_SPECIFIC_COLUMNS_POST_AGGREGATE_WITH_CONDITION_GROUP $aggViews $view $columnsToIncludeInNewView $counterColumn $conditionColumns)
(
select
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount <= $columnsToIncludeInNewView.size())
        ,
        #end
    #end
sum($counterColumn) as $counterColumn
from (
    #foreach ($aggView in $aggViews)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $aggView.$columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    sum($counterColumn) as $counterColumn
    from dc.$aggView,
        $groupTable group_table
    where
        #foreach ($conditionColumn in $conditionColumns)
            $conditionColumn = :$conditionColumn
            #if($velocityCount <= $conditionColumns.size())
            and
            #end
        #end
        #GET_DATETIME_RANGE()
    and #GET_JOIN($aggView "group_table" $joinKeys)
    and group_table.${groupnameColumn} = :$ApplicationConstants.GROUP_NAME_PARAM
    group by
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $aggView.$columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
        #if($velocityCount < $aggViews.size())
        union all
        #end
    #end
) as viewTemp
group by
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount < $columnsToIncludeInNewView.size())
        ,
        #end
    #end
) as $view
#end

##-----------------------------------------------------------------------------
## Query aggregation views (as post-aggregation), excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning distinct columns with respective counts of
## the specified columns in the counterColumn column and number of impactedSubscribers as impactedSubscribers column
## based usually on imsiColumn.
##
## rawTables : list of raw table partitions
## aggViews : list of aggregation views
## view : the view name to be created from this select
## columnsToIncludeInNewView : columns that should be included in this new view
## counterColumn : the column in raw table that contains a counter of e.g. failures
## imsiColumn : the column representing the imsi column in raw tables
## impactedSubscribers : the column representing the number of impacted subscribers as output
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## columnToInclude : the distinct columns that should be used in the where clause when selecting from aggregation views
##-----------------------------------------------------------------------------
#macro (UNION_ALL_AGGREGATION_VIEWS_WITH_SPECIFIC_COLUMNS_POST_AGGREGATE_IMPACTED_SUBSCRIBERS $rawTables $aggViews $view $columnsToIncludeInNewView $counterColumn $imsiColumn $impactedSubscribers $useExclusiveTACs)
(
select
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
    aggView.${columnToInclude}
        #if($velocityCount <= $columnsToIncludeInNewView.size())
        ,
        #end
    #end
rawView.${impactedSubscribers},
aggView.${counterColumn}
from
    #REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AGGREGATE_IMPACTED_SUBSCRIBERS_NO_FAILURES($rawTables "rawView" $columnsToIncludeInNewView $imsiColumn $impactedSubscribers $useExclusiveTACs)
inner join (
select
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount <= $columnsToIncludeInNewView.size())
        ,
        #end
    #end
sum($counterColumn) as $counterColumn
from (
    #foreach ($aggView in $aggViews)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
        #GET_DATETIME_ID(),
    sum($counterColumn) as $counterColumn
    from dc.$aggView
    where
        #GET_DATETIME_RANGE()
    group by
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    DATETIME_ID
        #if($velocityCount < $aggViews.size())
        union all
        #end
    #end
) as viewTemp
group by
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount < $columnsToIncludeInNewView.size())
        ,
        #end
    #end
) as aggView
on (
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
    rawView.${columnToInclude} = aggView.${columnToInclude}
        #if($velocityCount < $columnsToIncludeInNewView.size())
        and
        #end
    #end
)
) as $view
#end

##-----------------------------------------------------------------------------
## Query aggregation views (as post-aggregation), excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning distinct columns with respective counts of
## the specified columns in the counterColumn column and number of impactedSubscribers as impactedSubscribers column
## based usually on imsiColumn.
##
## rawTables : list of raw table partitions
## aggViews : list of aggregation views
## view : the view name to be created from this select
## columnsToIncludeInNewView : columns that should be included in this new view
## counterColumn : the column in raw table that contains a counter of e.g. failures
## conditionColumns : the columns on which we match the condition represented as :conditionColumn
## imsiColumn : the column representing the imsi column in raw tables
## impactedSubscribers : the column representing the number of impacted subscribers as output
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## columnToInclude : the distinct columns that should be used in the where clause when selecting from aggregation views
##-----------------------------------------------------------------------------
#macro (UNION_ALL_AGGREGATION_VIEWS_WITH_SPECIFIC_COLUMNS_POST_AGGREGATE_CONDITIONED_IMPACTED_SUBSCRIBERS $rawTables $aggViews $view $columnsToIncludeInNewView $counterColumn $conditionColumns $imsiColumn $impactedSubscribers $useExclusiveTACs)
(
select
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
    aggView.${columnToInclude}
        #if($velocityCount <= $columnsToIncludeInNewView.size())
        ,
        #end
    #end
rawView.${impactedSubscribers},
aggView.${counterColumn}
from
    #REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AGGREGATE_CONDITIONED_IMPACTED_SUBSCRIBERS_NO_FAILURES($rawTables "rawView" $columnsToIncludeInNewView $conditionColumns $imsiColumn $impactedSubscribers $useExclusiveTACs)
inner join (
select
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount <= $columnsToIncludeInNewView.size())
        ,
        #end
    #end
sum($counterColumn) as $counterColumn
from (
    #foreach ($aggView in $aggViews)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
        #GET_DATETIME_ID(),
    sum($counterColumn) as $counterColumn
    from dc.$aggView
    where
        #foreach ($conditionColumn in $conditionColumns)
            $conditionColumn = :$conditionColumn
            #if($velocityCount <= $conditionColumns.size())
            and
            #end
        #end
        #GET_DATETIME_RANGE()
    group by
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    DATETIME_ID
        #if($velocityCount < $aggViews.size())
        union all
        #end
    #end
) as viewTemp
group by
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount < $columnsToIncludeInNewView.size())
        ,
        #end
    #end
) as aggView
on (
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
    rawView.${columnToInclude} = aggView.${columnToInclude}
        #if($velocityCount < $columnsToIncludeInNewView.size())
        and
        #end
    #end
)
) as $view
#end

##-----------------------------------------------------------------------------
## Query raw tables (as post-aggregation), excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning distinct columns with respective raw counts of
## the specified columns in the counterColumn column.
##
## rawTables : list of raw table partitions
## rawView : the view name to be created from this select
## columnsToIncludeInNewView : columns that should be included in this new view
## counterColumn : the column in raw table that contains a counter of e.g. failures
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## columnToInclude : the distinct columns that should be used in the where clause when selecting from raw tables
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AGGREGATE $rawTables $rawView $columnsToIncludeInNewView $counterColumn $useExclusiveTACs)
(
select
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount <= $columnsToIncludeInNewView.size())
        ,
        #end
    #end
sum($counterColumn) as $counterColumn
from (
    #foreach ($rawTable in $rawTables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
        #GET_DATETIME_ID(),
    count(*) as $counterColumn
    from dc.$rawTable tmpTable
    where
        #GET_DATETIME_RANGE()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
        #elseif ($useExclusiveTACs == "yes")
        and tmpTable.TAC is not null
        #end
    group by
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    DATETIME_ID
        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as rawViewTemp
group by
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount < $columnsToIncludeInNewView.size())
        ,
        #end
    #end
) as $rawView
#end

##-----------------------------------------------------------------------------
## Query raw tables, excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning distinct columns with respective raw counts of
## the specified columns in the counterColumn column based on the conditionColumns condition.
##
## rawTables : list of raw table partitions
## rawView : the view name to be created from this select
## columnsToIncludeInNewView : columns that should be included in this new view
## counterColumn : the column in raw table that contains a counter of e.g. failures
## conditionColumns : the columns on which we match the conditions represented as :conditionColumn
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## columnToInclude : the distinct columns that should be used in the where clause when selecting from raw tables
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AGGREGATE_CONDITIONED $rawTables $rawView $columnsToIncludeInNewView $conditionColumns $useExclusiveTACs)
(
    #foreach ($rawTable in $rawTables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
        #GET_DATETIME_ID()
    from dc.$rawTable tmpTable
    where
        #foreach ($conditionColumn in $conditionColumns)
            $conditionColumn = :$conditionColumn
            #if($velocityCount <= $conditionColumns.size())
            and
            #end
        #end
        #GET_DATETIME_RANGE()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
        #elseif ($useExclusiveTACs == "yes")
        and tmpTable.TAC is not null
        #end
    group by
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    DATETIME_ID
        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as $rawView
#end

##-----------------------------------------------------------------------------
## Query raw tables, excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning non-distinct columns with respective raw counts of
## the specified columns in the counterColumn column based on the conditionColumns condition.
##
## rawTables : list of raw table partitions
## rawView : the view name to be created from this select
## columnsToIncludeInNewView : columns that should be included in this new view
## counterColumn : the column in raw table that contains a counter of e.g. failures
## conditionColumns : the columns on which we match the conditions represented as :conditionColumn
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## columnToInclude : the distinct columns that should be used in the where clause when selecting from raw tables
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_CONDITIONED $rawTables $rawView $columnsToIncludeInNewView $conditionColumns $useExclusiveTACs)
(
    #foreach ($rawTable in $rawTables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawTable tmpTable
    where
        #foreach ($conditionColumn in $conditionColumns)
            $conditionColumn = :$conditionColumn
            #if($velocityCount <= $conditionColumns.size())
            and
            #end
        #end
        #GET_DATETIME_RANGE()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
        #elseif ($useExclusiveTACs == "yes")
        and tmpTable.TAC is not null
        #end
        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as $rawView
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AGGREGATE_IMPACTED_SUBSCRIBERS_WEEK $rawTables $rawView $columnsToIncludeInNewView $counterColumn $imsiColumn $impactedSubscribers $useExclusiveTACs)
(
select
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount <= $columnsToIncludeInNewView.size())
        ,
        #end
    #end
count(distinct $imsiColumn) as $impactedSubscribers,
sum($counterColumn) as $counterColumn
from (
    #foreach ($rawTable in $rawTables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
        #GET_DATETIME_ID(),
        $imsiColumn as $imsiColumn,
    count(*) as $counterColumn
    from dc.$rawTable tmpTable
    where
        #GET_DATE_RANGE_LOCAL()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
        #else
        and tmpTable.TAC is not null
        #end
    group by
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    DATETIME_ID,
        $imsiColumn
        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as rawViewTemp
group by
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount < $columnsToIncludeInNewView.size())
        ,
        #end
    #end
) as $rawView
#end

##-----------------------------------------------------------------------------
## Query raw tables (as post-aggregation), excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning distinct columns with respective raw counts of
## the specified columns in the counterColumn column and number of impactedSubscribers as impactedSubscribers column
## based usually on imsiColumn.
##
## rawTables : list of raw table partitions
## rawView : the view name to be created from this select
## columnsToIncludeInNewView : columns that should be included in this new view
## counterColumn : the column in raw table that contains a counter of e.g. failures
## imsiColumn : the column representing the imsi column in raw tables
## impactedSubscribers : the column representing the number of impacted subscribers as output
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## columnToInclude : the distinct columns that should be used in the where clause when selecting from raw tables
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AGGREGATE_IMPACTED_SUBSCRIBERS $rawTables $rawView $columnsToIncludeInNewView $counterColumn $imsiColumn $impactedSubscribers $useExclusiveTACs)
(
select
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount <= $columnsToIncludeInNewView.size())
        ,
        #end
    #end
count(distinct $imsiColumn) as $impactedSubscribers,
sum($counterColumn) as $counterColumn
from (
    #foreach ($rawTable in $rawTables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
        #GET_DATETIME_ID(),
        $imsiColumn as $imsiColumn,
    count(*) as $counterColumn
    from dc.$rawTable tmpTable
    where
        #GET_DATETIME_RANGE()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
        #else
        and tmpTable.TAC is not null
        #end
    group by
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    DATETIME_ID,
        $imsiColumn
        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as rawViewTemp
group by
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount < $columnsToIncludeInNewView.size())
        ,
        #end
    #end
) as $rawView
#end

##-----------------------------------------------------------------------------
## Query raw tables (as post-aggregation), excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning distinct columns with respective raw counts of
## the specified columns in the counterColumn column and number of impactedSubscribers as impactedSubscribers column
## based usually on imsiColumn.
##
## rawTables : list of raw table partitions
## rawView : the view name to be created from this select
## columnsToIncludeInNewView : columns that should be included in this new view
## counterColumn : the column in raw table that contains a counter of e.g. failures
## imsiColumn : the column representing the imsi column in raw tables
## impactedSubscribers : the column representing the number of impacted subscribers as output
## conditionColumns : the columns on which we match the conditions represented as :conditionColumn
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## columnToInclude : the distinct columns that should be used in the where clause when selecting from raw tables
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AGGREGATE_CONDITIONED_IMPACTED_SUBSCRIBERS $rawTables $rawView $columnsToIncludeInNewView $counterColumn $conditionColumns $imsiColumn $impactedSubscribers $useExclusiveTACs)
(
select
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount <= $columnsToIncludeInNewView.size())
        ,
        #end
    #end
count(distinct $imsiColumn) as $impactedSubscribers,
sum($counterColumn) as $counterColumn
from (
    #foreach ($rawTable in $rawTables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
        #GET_DATETIME_ID(),
        $imsiColumn as $imsiColumn,
    count(*) as $counterColumn
    from dc.$rawTable tmpTable
    where
        #foreach ($conditionColumn in $conditionColumns)
            $conditionColumn = :$conditionColumn
            #if($velocityCount <= $conditionColumns.size())
            and
            #end
        #end
        #GET_DATETIME_RANGE()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
        #else
        and tmpTable.TAC is not null
        #end
    group by
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    DATETIME_ID,
        $imsiColumn
        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as rawViewTemp
group by
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount < $columnsToIncludeInNewView.size())
        ,
        #end
    #end
) as $rawView
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AGGREGATE_CONDITIONED_IMPACTED_SUBSCRIBERS_WEEK $rawTables $rawView $columnsToIncludeInNewView $counterColumn $conditionColumns $imsiColumn $impactedSubscribers $useExclusiveTACs)
(
select
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount <= $columnsToIncludeInNewView.size())
        ,
        #end
    #end
count(distinct $imsiColumn) as $impactedSubscribers,
sum($counterColumn) as $counterColumn
from (
    #foreach ($rawTable in $rawTables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
        #GET_DATETIME_ID(),
        $imsiColumn as $imsiColumn,
    count(*) as $counterColumn
    from dc.$rawTable tmpTable
    where
        #foreach ($conditionColumn in $conditionColumns)
            $conditionColumn = :$conditionColumn
            #if($velocityCount <= $conditionColumns.size())
            and
            #end
        #end
        #GET_DATE_RANGE_LOCAL()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
        #else
        and tmpTable.TAC is not null
        #end
    group by
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    DATETIME_ID,
        $imsiColumn
        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as rawViewTemp
group by
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount < $columnsToIncludeInNewView.size())
        ,
        #end
    #end
) as $rawView
#end

##-----------------------------------------------------------------------------
## Query raw tables (as post-aggregation), excluding Exclusive TACs (non-NULLs only),
## specifying a date/time filter, returning distinct columns and number of impactedSubscribers as impactedSubscribers column
## based usually on imsiColumn, no other counter is retrieved.
##
## rawTables : list of raw table partitions
## rawView : the view name to be created from this select
## columnsToIncludeInNewView : columns that should be included in this new view
## imsiColumn : the column representing the imsi column in raw tables
## impactedSubscribers : the column representing the number of impacted subscribers as output
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## columnToInclude : the distinct columns that should be used in the where clause when selecting from raw tables
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AGGREGATE_IMPACTED_SUBSCRIBERS_NO_FAILURES $rawTables $rawView $columnsToIncludeInNewView $imsiColumn $impactedSubscribers $useExclusiveTACs)
(
select
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount <= $columnsToIncludeInNewView.size())
        ,
        #end
    #end
count(distinct $imsiColumn) as $impactedSubscribers,
sum($counterColumn) as $counterColumn
from (
    #foreach ($rawTable in $rawTables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
        #GET_DATETIME_ID(),
        $imsiColumn as $imsiColumn,
    count(*) as $counterColumn
    from dc.$rawTable tmpTable
    where
        #GET_DATETIME_RANGE()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
        #elseif ($useExclusiveTACs == "yes")
        and tmpTable.TAC is not null
        #end
    group by
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    DATETIME_ID,
        $imsiColumn
        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as rawViewTemp
group by
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount < $columnsToIncludeInNewView.size())
        ,
        #end
    #end
) as $rawView
#end

##-----------------------------------------------------------------------------
## Query raw tables (as post-aggregation), excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning distinct columns and number of impactedSubscribers as impactedSubscribers column
## based usually on imsiColumn, no other counter is retrieved.
##
## rawTables : list of raw table partitions
## rawView : the view name to be created from this select
## columnsToIncludeInNewView : columns that should be included in this new view
## conditionColumns : the columns on which we match the condition represented as :conditionColumn
## imsiColumn : the column representing the imsi column in raw tables
## impactedSubscribers : the column representing the number of impacted subscribers as output
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## columnToInclude : the distinct columns that should be used in the where clause when selecting from raw tables
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AGGREGATE_CONDITIONED_IMPACTED_SUBSCRIBERS_NO_FAILURES $rawTables $rawView $columnsToIncludeInNewView $conditionColumns $imsiColumn $impactedSubscribers $useExclusiveTACs)
(
select
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount <= $columnsToIncludeInNewView.size())
        ,
        #end
    #end
count(distinct $imsiColumn) as $impactedSubscribers,
sum($counterColumn) as $counterColumn
from (
    #foreach ($rawTable in $rawTables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
        #GET_DATETIME_ID(),
        $imsiColumn as $imsiColumn,
    count(*) as $counterColumn
    from dc.$rawTable
    where
        #foreach ($conditionColumn in $conditionColumns)
            $conditionColumn = :$conditionColumn
            #if($velocityCount <= $conditionColumns.size())
            and
            #end
        #end
        #GET_DATETIME_RANGE()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE($rawTable)
        #elseif ($useExclusiveTACs == "yes")
        and dc.${rawTable}.TAC is not null
        #end
    group by
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    DATETIME_ID,
        $imsiColumn
        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as rawViewTemp
group by
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount < $columnsToIncludeInNewView.size())
        ,
        #end
    #end
) as $rawView
#end

##-----------------------------------------------------------------------------
## Query raw tables (as post-aggregation), excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning non-distinct columns with respective raw counts of
## the specified columns in the counterColumn column.
##
## rawTables : list of raw table partitions
## rawView : the view name to be created from this select
## columnsToIncludeInNewView : columns that should be included in this new view
## notNullColumns : the columns wich should be NOT NULL
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## columnToInclude : the distinct columns that should be used in the where clause when selecting from raw tables
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AND_NOT_NULL_COLUMNS_EXCLUSIVE_TAC $rawTables $rawView $columnsToIncludeInNewView $notNullColumns $useExclusiveTACs)
(
    #foreach ($rawTable in $rawTables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawTable tmpTable
    where
        #GET_DATETIME_RANGE()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
        #elseif ($useExclusiveTACs == "yes")
        and tmpTable.TAC is not null
        #end
    and #GET_COLUMNS_WHERE_NOT_NULL($notNullColumns)
        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as $rawView
#end


##-----------------------------------------------------------------------------
## Query raw tables (as post-aggregation), excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning non-distinct columns with respective raw counts of
## the specified columns in the counterColumn column.
##
## rawTables : list of raw table partitions
## rawView : the view name to be created from this select
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## columnToInclude : the distinct columns that should be used in the where clause when selecting from raw tables
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AND_EXCLUSIVE_TAC_AA_RNC_GROUP $rawTables $rawView $columnsToIncludeInNewView $useExclusiveTACs)
(
    #foreach ($rawTable in $rawTables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawTable tmpTable
    where
        #GET_DATETIME_RANGE()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
        #elseif ($useExclusiveTACs == "yes")
        and tmpTable.TAC is not null
        #end
        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as $rawView
#end


##Use this whenever performing a count(distinct(IMSI)), more efficient, see IMSI_Group_Raw_Template.vm as an example
#macro (GET_DATETIME_ID_WITH_DATEADD $interval)
    #if($interval == "1440")
    dateadd(mi,-(datepart(HOUR,DATETIME_ID)*60 + datepart(MINUTE,DATETIME_ID))%$interval,DATETIME_ID) as DATETIME_ID
    #else
    dateadd(mi,-datepart(MINUTE,DATETIME_ID)%$interval,DATETIME_ID) as DATETIME_ID
    #end
#end

##Use this whenever performing a count(distinct(IMSI)), more efficient, see IMSI_Group_Raw_Template.vm as an example
#macro (GET_ALL_COLUMNS_FOR_PERIOD_WITH_OPTIONAL_TAC_EXCLUSION_SPECIFY_COLUMNS $rawtables $rawview $columnsToIncludeInNewView $useTACExclusion $interval)
(
    #foreach ($rawtable in $rawtables)
    select    dateadd(mi,-datepart(MINUTE,DATETIME_ID)%$interval,DATETIME_ID) as DATETIME_ID,
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATETIME_RANGE()
        #if($useTACExclusion)
        and #GET_TAC_EXCLUSION()
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (SELECT_COLUMN_WCDMA_CFA_DETAILED_EVENT_ANALYSIS)
    #if($csv == true)
        DATEADD(minute,$tzOffset,rawview.EVENT_TIME)AS 'Event Time',
       #else
       rawview.EVENT_TIME AS 'Event Time',
       #end

    rawview.IMSI AS IMSI,
    rawview.TAC AS TAC,
    dc.DIM_E_SGEH_TAC.MANUFACTURER AS 'Terminal Make',
    dc.DIM_E_SGEH_TAC.MARKETING_NAME AS 'Terminal Model',
    dc.DIM_E_SGEH_HIER321_CELL.CELL_ID AS 'Access Area',
    dc.DIM_E_RAN_CFA_EVENTTYPE.EVENT_ID_ALTERNATE_DESC AS 'Event Type',
    dc.DIM_E_RAN_CFA_PROCEDURE_INDICATOR.PROCEDURE_INDICATOR_DESC AS 'Procedure Indicator',
    dc.DIM_E_RAN_CFA_EVALUATION_CASE.EVALUATION_CASE_DESC AS 'Evaluation Case',
    dc.DIM_E_RAN_CFA_EXCEPTION_CLASS.EXCEPTION_CLASS_DESC AS 'Exception Class',
    rawview.lac AS 'LAC',
    rawview.rac AS 'RAC',
    dc.DIM_E_SGEH_HIER321_CELL.VENDOR AS 'Vendor'
#end

##Use this whenever performing a count(distinct(IMSI)), more efficient, see IMSI_Group_Raw_Template.vm as an example
#macro (GET_DATETIME_ID_WITH_DATEADD $interval)
    #if($interval == "1440")
    dateadd(mi,-(datepart(HOUR,DATETIME_ID)*60 + datepart(MINUTE,DATETIME_ID))%$interval,DATETIME_ID) as DATETIME_ID
    #else
    dateadd(mi,-datepart(MINUTE,DATETIME_ID)%$interval,DATETIME_ID) as DATETIME_ID
    #end
#end

##Use this whenever performing a count(distinct(IMSI)), more efficient, see IMSI_Group_Raw_Template.vm as an example
#macro (GET_ALL_COLUMNS_FOR_PERIOD_WITH_OPTIONAL_TAC_EXCLUSION_SPECIFY_COLUMNS $rawtables $rawview $columnsToIncludeInNewView $useTACExclusion $interval)
(
    #foreach ($rawtable in $rawtables)
    select    dateadd(mi,-datepart(MINUTE,DATETIME_ID)%$interval,DATETIME_ID) as DATETIME_ID,
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATETIME_RANGE()
        #if($useTACExclusion)
        and #GET_TAC_EXCLUSION()
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (SELECT_COLUMN_WCDMA_CFA_DETAILED_EVENT_ANALYSIS)
    #if($csv == true)
        DATEADD(minute,$tzOffset,rawview.EVENT_TIME)AS 'Event Time',
       #else
       rawview.EVENT_TIME AS 'Event Time',
       #end

    rawview.IMSI AS IMSI,
    rawview.TAC AS TAC,
    case when (rawview.TAC != null AND  rawview.TAC != 0 ) then isnull(dc.DIM_E_SGEH_TAC.MANUFACTURER, 'Manufacturer Unknown')
         when (rawview.TAC = 0) then isnull(dc.DIM_E_SGEH_TAC.MANUFACTURER, 'Manufacturer Invalid')
         else null end AS 'Terminal Make' ,
    case when (rawview.TAC != null AND  rawview.TAC != 0 ) then isnull(dc.DIM_E_SGEH_TAC.MARKETING_NAME, 'Model Unknown')
         when (rawview.TAC = 0) then isnull(dc.DIM_E_SGEH_TAC.MARKETING_NAME, 'Model Invalid')
         else null end AS 'Terminal Model' ,
    dc.DIM_E_SGEH_HIER321_CELL.CELL_ID AS 'Access Area',
    dc.DIM_E_RAN_CFA_EVENTTYPE.EVENT_ID_ALTERNATE_DESC AS 'Event Type',
    dc.DIM_E_RAN_CFA_PROCEDURE_INDICATOR.PROCEDURE_INDICATOR_DESC AS 'Procedure Indicator',
    dc.DIM_E_RAN_CFA_EVALUATION_CASE.EVALUATION_CASE_DESC AS 'Evaluation Case',
    dc.DIM_E_RAN_CFA_EXCEPTION_CLASS.EXCEPTION_CLASS_DESC AS 'Exception Class',
    rawview.lac AS 'LAC',
    rawview.rac AS 'RAC',
    dc.DIM_E_SGEH_HIER321_CELL.VENDOR AS 'Vendor'
#end

#macro (SELECT_COLUMN_WCDMA_CFA_DETAILED_EVENT_ANALYSIS_CONTROLLER)
    #if($csv == true)
        DATEADD(minute,$tzOffset,rawview.EVENT_TIME)AS 'Event Time',
       #else
       rawview.EVENT_TIME AS 'Event Time',
       #end

    rawview.IMSI AS IMSI,
    rawview.TAC AS TAC,
    dc.DIM_E_SGEH_HIER321_CELL.HIERARCHY_3 AS 'Controller',
     case when (rawview.TAC != null AND  rawview.TAC != 0 ) then isnull(dc.DIM_E_SGEH_TAC.MANUFACTURER, 'Manufacturer Unknown')
         when (rawview.TAC = 0) then isnull(dc.DIM_E_SGEH_TAC.MANUFACTURER, 'Manufacturer Invalid')
         else null end AS 'Terminal Make' ,
    case when (rawview.TAC != null AND  rawview.TAC != 0 ) then isnull(dc.DIM_E_SGEH_TAC.MARKETING_NAME, 'Model Unknown')
         when (rawview.TAC = 0) then isnull(dc.DIM_E_SGEH_TAC.MARKETING_NAME, 'Model Invalid')
         else null end AS 'Terminal Model' ,
    dc.DIM_E_SGEH_HIER321_CELL.CELL_ID AS 'Access Area',
    dc.DIM_E_RAN_CFA_EVENTTYPE.EVENT_ID_ALTERNATE_DESC AS 'Event Type',
    dc.DIM_E_RAN_CFA_PROCEDURE_INDICATOR.PROCEDURE_INDICATOR_DESC AS 'Procedure Indicator',
    dc.DIM_E_RAN_CFA_EVALUATION_CASE.EVALUATION_CASE_DESC AS 'Evaluation Case',
    dc.DIM_E_RAN_CFA_EXCEPTION_CLASS.EXCEPTION_CLASS_DESC AS 'Exception Class',
    rawview.lac AS 'LAC',
    rawview.rac AS 'RAC',
    dc.DIM_E_SGEH_HIER321_CELL.VENDOR AS 'Vendor'
#end

##Use this whenever performing a count(distinct(IMSI)), more efficient, see IMSI_Group_Raw_Template.vm as an example
#macro (GET_DATETIME_ID_WITH_DATEADD $interval)
    #if($interval == "1440")
    dateadd(mi,-(datepart(HOUR,DATETIME_ID)*60 + datepart(MINUTE,DATETIME_ID))%$interval,DATETIME_ID) as DATETIME_ID
    #else
    dateadd(mi,-datepart(MINUTE,DATETIME_ID)%$interval,DATETIME_ID) as DATETIME_ID
    #end
#end

##Use this whenever performing a count(distinct(IMSI)), more efficient, see IMSI_Group_Raw_Template.vm as an example
#macro (GET_ALL_COLUMNS_FOR_PERIOD_WITH_OPTIONAL_TAC_EXCLUSION_SPECIFY_COLUMNS $rawtables $rawview $columnsToIncludeInNewView $useTACExclusion $interval)
(
    #foreach ($rawtable in $rawtables)
    select    dateadd(mi,-datepart(MINUTE,DATETIME_ID)%$interval,DATETIME_ID) as DATETIME_ID,
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATETIME_RANGE()
        #if($useTACExclusion)
        and #GET_TAC_EXCLUSION()
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (SELECT_COLUMN_WCDMA_CFA_DETAILED_EVENT_ANALYSIS)
    #if($csv == true)
        DATEADD(minute,$tzOffset,rawview.EVENT_TIME)AS 'Event Time',
       #else
       rawview.EVENT_TIME AS 'Event Time',
       #end

    rawview.IMSI AS IMSI,
    rawview.TAC AS TAC,
    dc.DIM_E_SGEH_TAC.MANUFACTURER AS 'Terminal Make',
    dc.DIM_E_SGEH_TAC.MARKETING_NAME AS 'Terminal Model',
    dc.DIM_E_SGEH_HIER321_CELL.CELL_ID AS 'Access Area',
    dc.DIM_E_RAN_CFA_EVENTTYPE.EVENT_ID_ALTERNATE_DESC AS 'Event Type',
    dc.DIM_E_RAN_CFA_PROCEDURE_INDICATOR.PROCEDURE_INDICATOR_DESC AS 'Procedure Indicator',
    dc.DIM_E_RAN_CFA_EVALUATION_CASE.EVALUATION_CASE_DESC AS 'Evaluation Case',
    dc.DIM_E_RAN_CFA_EXCEPTION_CLASS.EXCEPTION_CLASS_DESC AS 'Exception Class',
    rawview.lac AS 'LAC',
    rawview.rac AS 'RAC',
    dc.DIM_E_SGEH_HIER321_CELL.VENDOR AS 'Vendor'
#end

##Use this whenever performing a count(distinct(IMSI)), more efficient, see IMSI_Group_Raw_Template.vm as an example
#macro (GET_ALL_COLUMNS_FOR_PERIOD_WITH_OPTIONAL_TAC_EXCLUSION_SPECIFY_COLUMNS $rawtables $rawview $columnsToIncludeInNewView $useTACExclusion $interval)
(
    #foreach ($rawtable in $rawtables)
    select    dateadd(mi,-datepart(MINUTE,DATETIME_ID)%$interval,DATETIME_ID) as DATETIME_ID,
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATETIME_RANGE()
        #if($useTACExclusion)
        and #GET_TAC_EXCLUSION()
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end
##Use this whenever performing a count(distinct(IMSI)), more efficient, see IMSI_Group_Raw_Template.vm as an example
#macro (GET_DATETIME_ID_WITH_DATEADD $interval)
    #if($interval == "1440")
    dateadd(mi,-(datepart(HOUR,DATETIME_ID)*60 + datepart(MINUTE,DATETIME_ID))%$interval,DATETIME_ID) as DATETIME_ID
    #else
    dateadd(mi,-datepart(MINUTE,DATETIME_ID)%$interval,DATETIME_ID) as DATETIME_ID
    #end
#end

## Use to obtain values for 2g/3g KPIs for KPI icon feature
#macro (GET_2G3G_CORE_KPI_VALUES)
    max(isnull((case when isnull(err.EVENT_ID, suc.EVENT_ID)=0 then #CALCULATE_PERCENTAGE(["NO_OF_SUCCESSES"] ["NO_OF_ERRORS", "NO_OF_SUCCESSES"]) end),0)) as 'Attach SUCCESSES Rate',
    max(isnull((case when isnull(err.EVENT_ID, suc.EVENT_ID)=1 then #CALCULATE_PERCENTAGE(["NO_OF_SUCCESSES"] ["NO_OF_ERRORS", "NO_OF_SUCCESSES"]) end),0)) as 'PDP Context Activation SUCCESSES Rate',
    max(isnull((case when isnull(err.EVENT_ID, suc.EVENT_ID)=2 then #CALCULATE_PERCENTAGE(["NO_OF_SUCCESSES"] ["NO_OF_ERRORS", "NO_OF_SUCCESSES"]) end),0)) as 'Routing Area Update SUCCESSES Rate',
    max(isnull((case when isnull(err.EVENT_ID, suc.EVENT_ID)=3 then #CALCULATE_PERCENTAGE(["NO_OF_SUCCESSES"] ["NO_OF_ERRORS", "NO_OF_SUCCESSES"]) end),0)) as 'Inter SGSN Routing Area Update SUCCESSES Rate',
    max(isnull((case when isnull(err.EVENT_ID, suc.EVENT_ID)=4 then #CALCULATE_PERCENTAGE(["err.NO_OF_NET_INIT_DEACTIVATES","suc.NO_OF_NET_INIT_DEACTIVATES"] ["NO_OF_ERRORS", "NO_OF_SUCCESSES"]) end),0)) as 'PDP Context cutoff Ratio',
    max(isnull((case when isnull(err.EVENT_ID, suc.EVENT_ID)=14 then #CALCULATE_PERCENTAGE(["NO_OF_SUCCESSES"] ["NO_OF_ERRORS", "NO_OF_SUCCESSES"]) end),0)) as 'Detach SUCCESSES Rate',
    max(isnull((case when isnull(err.EVENT_ID, suc.EVENT_ID)=15 then #CALCULATE_PERCENTAGE(["NO_OF_ERRORS"] ["NO_OF_ERRORS", "NO_OF_SUCCESSES"]) end),0)) as 'Service Request Failure Ratio',
    max(isnull((case when isnull(err.EVENT_ID, suc.EVENT_ID)=15 then #CALCULATE_PERCENTAGE(["err.NO_OF_PAGING_ATTEMPTS"] ["err.NO_OF_PAGING_ATTEMPTS", "suc.NO_OF_PAGING_ATTEMPTS"]) end),0)) as 'Paging Failure Ratio',
    max(isnull((case when isnull(err.EVENT_ID, suc.EVENT_ID)=15 and err.NO_OF_PAGING_ATTEMPTS > 0 then #CALCULATE_QUOTIENT(["err.NO_OF_PAGING_ATTEMPTS"] ["sub.NO_OF_TOTAL_ERR_SUBSCRIBERS"]) end),0)) as 'Paging attempts per err subscriber',
    max(isnull(NO_OF_TOTAL_ERR_SUBSCRIBERS, 0)) as NO_OF_TOTAL_ERR_SUBSCRIBERS
#end

##sessionBrowser KPI only
#macro (GET_CORE_KPI_VALUES)
max(case when isnull(err.EVENT_ID, suc.EVENT_ID)=0 then #CALCULATE_PERCENTAGE(["NO_OF_SUCCESSES"] ["NO_OF_ERRORS", "NO_OF_SUCCESSES"]) end) as 'Attach Success Rate',
max(case when isnull(err.EVENT_ID, suc.EVENT_ID)=1 then #CALCULATE_PERCENTAGE(["NO_OF_SUCCESSES"] ["NO_OF_ERRORS", "NO_OF_SUCCESSES"]) end) as 'PDP Context Activation Success Rate',
max(case when isnull(err.EVENT_ID, suc.EVENT_ID)=2 then #CALCULATE_PERCENTAGE(["NO_OF_SUCCESSES"] ["NO_OF_ERRORS", "NO_OF_SUCCESSES"]) end) as 'RAU Success Rate',
max(case when isnull(err.EVENT_ID, suc.EVENT_ID)=3 then #CALCULATE_PERCENTAGE(["NO_OF_SUCCESSES"] ["NO_OF_ERRORS", "NO_OF_SUCCESSES"]) end) as 'ISRAU Success Rate',
max(case when isnull(err.EVENT_ID, suc.EVENT_ID)=4 then #CALCULATE_PERCENTAGE(["err.NO_OF_NET_INIT_DEACTIVATES","suc.NO_OF_NET_INIT_DEACTIVATES"] ["NO_OF_ERRORS", "NO_OF_SUCCESSES"]) end) as 'PDP Context Cutoff Ratio',
max(case when isnull(err.EVENT_ID, suc.EVENT_ID)=14 then #CALCULATE_PERCENTAGE(["NO_OF_SUCCESSES"] ["NO_OF_ERRORS", "NO_OF_SUCCESSES"]) end) as 'Detach Success Rate',
max(case when isnull(err.EVENT_ID, suc.EVENT_ID)=15 then #CALCULATE_PERCENTAGE(["NO_OF_ERRORS"] ["NO_OF_ERRORS", "NO_OF_SUCCESSES"]) end) AS 'Service Request Failure Ratio',
max(case when isnull(err.EVENT_ID, suc.EVENT_ID)=15 then #CALCULATE_PERCENTAGE(["err.NO_OF_PAGING_ATTEMPTS"] ["err.NO_OF_PAGING_ATTEMPTS", "suc.NO_OF_PAGING_ATTEMPTS"]) end) AS 'Paging Failure Ratio'
#end


##sessionBrowser KPI only
#macro (GET_UP_KPI_VALUES)
(
CASE
WHEN DOWNLINK = 1
THEN SUM(THROUGHPUT)
ELSE NULL
END)  AS TOTAL_DL_TP,
(
CASE
WHEN DOWNLINK = 0
THEN SUM(THROUGHPUT)
ELSE NULL
END)  AS TOTAL_UL_TP,
SUM(SETUP_TIME_TERM)  AS TOTAL_SETUP_TIME_TERM,
SUM(SETUP_TIME_NET)   AS TOTAL_SETUP_TIME_NET,
SUM(PACKET_LOSS_TERM) AS TOTAL_PACKET_LOSS_TERM,
SUM(PACKET_LOSS_NET)  AS TOTAL_PACKET_LOSS_NET
#end



##sessionBrowser KPI only
#macro(GET_UKPI_SAMPLES_AND_VALUES)
SUM(DL_TP_SAMPLE) AS DL_TP_SAMPLE,
SUM(UL_TP_SAMPLE) AS UL_TP_SAMPLE,
SUM(RTT_TERM_SAMPLE) AS RTT_TERM_SAMPLE,
SUM(RTT_NET_SAMPLE) AS RTT_NET_SAMPLE,
SUM(PACKET_LOSS_TERM_SAMPLE) AS PACKET_LOSS_TERM_SAMPLE,
SUM(PACKET_LOSS_NET_SAMPLE) AS PACKET_LOSS_NET_SAMPLE,
CAST(ROUND((SUM(CAST(TOTAL_DL_TP AS DECIMAL(16)))/DL_TP_SAMPLE),4) AS NUMERIC(16,4))                       AS 'Downlink Throughput',
CAST(ROUND((SUM(CAST(TOTAL_UL_TP AS DECIMAL(16)))/UL_TP_SAMPLE),4) AS NUMERIC(16,4))                       AS 'Uplink Throughput',
CAST(ROUND((SUM(CAST(TOTAL_SETUP_TIME_TERM AS DECIMAL(16)))/RTT_TERM_SAMPLE),4) AS NUMERIC(16,4))          AS 'RTT Terminal',
CAST(ROUND((SUM(CAST(TOTAL_SETUP_TIME_NET AS DECIMAL(16)))/RTT_NET_SAMPLE),4) AS NUMERIC(16,4))            AS 'RTT Network',
CAST(ROUND((SUM(CAST(TOTAL_PACKET_LOSS_TERM AS DECIMAL(32,16)))/PACKET_LOSS_TERM_SAMPLE),4) AS NUMERIC(16,4)) AS 'Packet Loss Terminal',
CAST(ROUND((SUM(CAST(TOTAL_PACKET_LOSS_NET AS DECIMAL(32,16)))/PACKET_LOSS_NET_SAMPLE),4) AS NUMERIC(16,4))   AS 'Packet Loss Network'
#end

##sessionBrowser KPI only
#macro(SELECT_UKPI_SAMPLING_COUNT)
(
CASE
WHEN DOWNLINK = 1
THEN COUNT(THROUGHPUT)
ELSE 0
END)AS DL_TP_SAMPLE,
(
CASE
WHEN DOWNLINK = 0
THEN COUNT(THROUGHPUT)
ELSE 0
END)                AS UL_TP_SAMPLE,
COUNT(SETUP_TIME_TERM)  AS RTT_TERM_SAMPLE,
COUNT(SETUP_TIME_NET)   AS RTT_NET_SAMPLE,
COUNT(PACKET_LOSS_TERM) AS PACKET_LOSS_TERM_SAMPLE,
COUNT(PACKET_LOSS_NET)  AS PACKET_LOSS_NET_SAMPLE
#end

#macro(GET_DRILLDOWN_KPI_VALUES)
MAX(CASE WHEN EVENT_ID=0 THEN (CAST (ROUND(( isnull(( isnull(NO_OF_SUCCESSES,0) )/CAST( isnull(NO_OF_ERRORS,0) + isnull(NO_OF_SUCCESSES,0) AS DECIMAL(16)),0))*100, 2) AS NUMERIC(5,2))) END) AS 'Attach Success Rate',
MAX(CASE WHEN EVENT_ID=1 THEN (CAST (ROUND(( isnull(( isnull(NO_OF_SUCCESSES,0) )/CAST( isnull(NO_OF_ERRORS,0) + isnull(NO_OF_SUCCESSES,0) AS DECIMAL(16)),0))*100, 2) AS NUMERIC(5,2))) END) AS 'PDP Context Activation Success Rate',
MAX(CASE WHEN EVENT_ID=2 THEN (CAST (ROUND(( isnull(( isnull(NO_OF_SUCCESSES,0) )/CAST( isnull(NO_OF_ERRORS,0) + isnull(NO_OF_SUCCESSES,0) AS DECIMAL(16)),0))*100, 2) AS NUMERIC(5,2))) END) AS 'RAU Success Rate',
MAX(CASE WHEN EVENT_ID=3 THEN (CAST (ROUND(( isnull(( isnull(NO_OF_SUCCESSES,0) )/CAST( isnull(NO_OF_ERRORS,0) + isnull(NO_OF_SUCCESSES,0) AS DECIMAL(16)),0))*100, 2) AS NUMERIC(5,2))) END) AS 'ISRAU Success Rate',
MAX(CASE WHEN EVENT_ID=4 THEN (CAST (ROUND((isnull(( isnull(NO_OF_NET_INIT_DEACTIVATES_ERR,0) + isnull(NO_OF_NET_INIT_DEACTIVATES_SUC,0) )/CAST( isnull(NO_OF_ERRORS,0) + isnull(NO_OF_SUCCESSES,0) AS DECIMAL(16)),0 ))*100, 2) AS NUMERIC(5,2))) END) AS 'PDP Context Cutoff Ratio',
MAX(CASE WHEN EVENT_ID=14 THEN (CAST (ROUND(( isnull(( isnull(NO_OF_SUCCESSES,0) )/CAST( isnull(NO_OF_ERRORS,0) + isnull(NO_OF_SUCCESSES,0) AS DECIMAL(16)),0))*100, 2) AS NUMERIC(5,2))) END) AS 'Detach Success Rate',
MAX(CASE WHEN EVENT_ID=15 THEN (CAST (ROUND((isnull(( isnull(NO_OF_ERRORS,0) )/CAST( isnull(NO_OF_ERRORS,0) + isnull(NO_OF_SUCCESSES,0) AS DECIMAL(16)),0))*100, 2) AS NUMERIC(5,2))) END) AS 'Service Request Failure Ratio',
MAX(CASE WHEN EVENT_ID=15 THEN (CAST (ROUND((isnull(( isnull(NO_OF_PAGING_ATTEMPTS_ERR,0) )/CAST( isnull(NO_OF_PAGING_ATTEMPTS_ERR,0) + isnull(NO_OF_PAGING_ATTEMPTS_SUC,0) AS DECIMAL(16)),0))*100, 2) AS NUMERIC(5,2))) END) AS 'Paging Failure Ratio'
#end
##-----------------------------------------------------------------------------
## Query aggregation views (as post-aggregation), excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning distinct columns with respective counts of
## the specified columns in the counterColumn column and number of impactedSubscribers as impactedSubscribers column
## based usually on imsiColumn.
##
## rawTables : list of raw table partitions
## aggViews : list of aggregation views
## view : the view name to be created from this select
## columnsToIncludeInNewView : columns that should be included in this new view
## counterColumn : the column in raw table that contains a counter of e.g. failures
## whereClause : the where clause to be applied
## imsiColumn : the column representing the imsi column in raw tables
## impactedSubscribers : the column representing the number of impacted subscribers as output
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## columnToInclude : the distinct columns that should be used in the where clause when selecting from aggregation views
##-----------------------------------------------------------------------------
#macro (UNION_ALL_AGGREGATION_VIEWS_WITH_SPECIFIC_COLUMNS_CONDITIONED_IMPACTED_SUBSCRIBERS $rawTables $aggViews $view $columnsToIncludeInNewView $counterColumn $whereClause $imsiColumn $impactedSubscribers $useExclusiveTACs)
(
select
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
    aggView.${columnToInclude}
        #if($velocityCount <= $columnsToIncludeInNewView.size())
        ,
        #end
    #end
rawView.${impactedSubscribers},
aggView.${counterColumn}
from
    #REPLACE_RAW_VIEW_WITH_RAW_TABLES_TAC_EXCLUSION_SPECIFY_COLUMNS_CONDITIONED_IMPACTED_SUBSCRIBERS_NO_COUNT($rawTables "rawView" $columnsToIncludeInNewView $whereClause $imsiColumn $impactedSubscribers $useExclusiveTACs)
inner join (
select
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount <= $columnsToIncludeInNewView.size())
        ,
        #end
    #end
sum($counterColumn) as $counterColumn
from (
    #foreach ($aggView in $aggViews)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
        #GET_DATETIME_ID(),
    sum($counterColumn) as $counterColumn
    from dc.$aggView
    where
        #GET_DATETIME_RANGE()
        $whereClause
    group by
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    DATETIME_ID
        #if($velocityCount < $aggViews.size())
        union all
        #end
    #end
) as viewTemp
group by
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount < $columnsToIncludeInNewView.size())
        ,
        #end
    #end
) as aggView
on (
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
    rawView.${columnToInclude} = aggView.${columnToInclude}
        #if($velocityCount < $columnsToIncludeInNewView.size())
        and
        #end
    #end
)
) as $view
#end

#macro (UNION_ALL_AGGREGATION_VIEWS_WITH_SPECIFIC_COLUMNS_CONDITIONED_IMPACTED_SUBSCRIBERS_WEEK $rawTables $aggViews $view $columnsToIncludeInNewView $counterColumn $whereClause $imsiColumn $impactedSubscribers $useExclusiveTACs)
(
select
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
    aggView.${columnToInclude}
        #if($velocityCount <= $columnsToIncludeInNewView.size())
        ,
        #end
    #end
rawView.${impactedSubscribers},
aggView.${counterColumn}
from
    #REPLACE_RAW_VIEW_WITH_RAW_TABLES_TAC_EXCLUSION_SPECIFY_COLUMNS_CONDITIONED_IMPACTED_SUBSCRIBERS_NO_COUNT_WEEK($rawTables "rawView" $columnsToIncludeInNewView $whereClause $imsiColumn $impactedSubscribers $useExclusiveTACs)
inner join (
select
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount <= $columnsToIncludeInNewView.size())
        ,
        #end
    #end
sum($counterColumn) as $counterColumn
from (
    #foreach ($aggView in $aggViews)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
        #GET_DATETIME_ID(),
    sum($counterColumn) as $counterColumn
    from dc.$aggView
    where
        #GET_DATETIME_RANGE()
        $whereClause
    group by
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    DATETIME_ID
        #if($velocityCount < $aggViews.size())
        union all
        #end
    #end
) as viewTemp
group by
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount < $columnsToIncludeInNewView.size())
        ,
        #end
    #end
) as aggView
on (
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
    rawView.${columnToInclude} = aggView.${columnToInclude}
        #if($velocityCount < $columnsToIncludeInNewView.size())
        and
        #end
    #end
)
) as $view
#end

##-----------------------------------------------------------------------------
## Query aggregation tables with specific groupname (as post-aggregation), excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning distinct columns and number of impactedSubscribers as impactedSubscribers column
## based usually on imsiColumn together with $counterColumn with the number of failures.
##
## Maximum number of groups is 2.
##
## rawTables : list of raw table partitions
## aggViews : list of aggregation views
## view : the view name to be created from this select
## columns : columns that should be included in the inner selects
## columnsOuter : columns that should be included in this new view (the most outer select)
## groupTables : the array of group tables to be joined based on the GROUP_NAME columns
## groupCondition : the group condition to be applied
## whereClause : the where clause to be applied
## counterColumn : the column name in which we will have the number of occurrences
## imsiColumn : the column representing the imsi column in raw tables
## impactedSubscribers : the column representing the number of impacted subscribers as output
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## columnToInclude : the distinct columns that should be used in the where clause when selecting from raw tables
##-----------------------------------------------------------------------------
#macro (UNION_ALL_AGGREGATION_VIEWS_WITH_SPECIFIC_COLUMNS_CONDITIONED_IMPACTED_SUBSCRIBERS_GROUPS $rawTables $aggViews $view $columns $columnsOuter $groupTables $groupCondition $whereClause $counterColumn $imsiColumn $impactedSubscribers $useExclusiveTACs)
(
select
    #foreach ($columnToInclude in $columnsOuter)
    aggView.${columnToInclude}
        #if($velocityCount <= $columnsOuter.size())
        ,
        #end
    #end
rawView.${impactedSubscribers},
aggView.${counterColumn}
from
    #REPLACE_RAW_VIEW_WITH_RAW_TABLES_TAC_EXCLUSION_SPECIFY_COLUMNS_CONDITIONED_IMPACTED_SUBSCRIBERS_GROUPS_NO_COUNT($rawTables "rawView" $columns $groupTables $groupCondition $whereClause $imsiColumn $impactedSubscribers $useExclusiveTACs)
inner join (
select
    #foreach ($columnToInclude in $columns)
    tempTable.${columnToInclude}
        #if($velocityCount <= $columns.size())
        ,
        #end
    #end
sum($counterColumn) as $counterColumn
from (
    #foreach ($aggView in $aggViews)
    select
        #foreach ($columnToInclude in $columns)
            $columnToInclude
            #if($velocityCount <= $columns.size())
            ,
            #end
        #end
    sum($counterColumn) as $counterColumn
    from dc.$aggView tmpTable,
        #foreach ($groupTable in $groupTables)
            $groupTable
            #if($velocityCount < $groupTables.size())
            full outer join
            #end
        #end
        #if($groupTables.size() > 1)
        on
            #foreach ($groupTable in $groupTables)
                ${groupTable}.GROUP_NAME
                #if($velocityCount < $groupTables.size())
                =
                #end
            #end
        #end
    where
        $groupCondition
        #GET_DATETIME_RANGE()
        $whereClause
    group by
        #foreach ($columnToInclude in $columns)
            $columnToInclude
            #if($velocityCount < $columns.size())
            ,
            #end
        #end
        #if($velocityCount < $aggViews.size())
        union all
        #end
    #end
) as tempTable
group by
    #foreach ($columnToInclude in $columns)
    tempTable.${columnToInclude}
        #if($velocityCount < $columns.size())
        ,
        #end
    #end
) as aggView
on (
    #foreach ($columnToInclude in $columnsOuter)
    rawView.${columnToInclude} = aggView.${columnToInclude}
        #if($velocityCount < $columnsOuter.size())
        and
        #end
    #end
)
) as $view
#end

#macro (UNION_ALL_AGGREGATION_VIEWS_WITH_SPECIFIC_COLUMNS_CONDITIONED_IMPACTED_SUBSCRIBERS_GROUPS_WEEK $rawTables $aggViews $view $columns $columnsOuter $groupTables $groupCondition $whereClause $counterColumn $imsiColumn $impactedSubscribers $useExclusiveTACs)
(
select
    #foreach ($columnToInclude in $columnsOuter)
    aggView.${columnToInclude}
        #if($velocityCount <= $columnsOuter.size())
        ,
        #end
    #end
rawView.${impactedSubscribers},
aggView.${counterColumn}
from
    #REPLACE_RAW_VIEW_WITH_RAW_TABLES_TAC_EXCLUSION_SPECIFY_COLUMNS_CONDITIONED_IMPACTED_SUBSCRIBERS_GROUPS_NO_COUNT_WEEK($rawTables "rawView" $columns $groupTables $groupCondition $whereClause $imsiColumn $impactedSubscribers $useExclusiveTACs)
inner join (
select
    #foreach ($columnToInclude in $columns)
    tempTable.${columnToInclude}
        #if($velocityCount <= $columns.size())
        ,
        #end
    #end
sum($counterColumn) as $counterColumn
from (
    #foreach ($aggView in $aggViews)
    select
        #foreach ($columnToInclude in $columns)
            $columnToInclude
            #if($velocityCount <= $columns.size())
            ,
            #end
        #end
    sum($counterColumn) as $counterColumn
    from dc.$aggView tmpTable,
        #foreach ($groupTable in $groupTables)
            $groupTable
            #if($velocityCount < $groupTables.size())
            full outer join
            #end
        #end
        #if($groupTables.size() > 1)
        on
            #foreach ($groupTable in $groupTables)
                ${groupTable}.GROUP_NAME
                #if($velocityCount < $groupTables.size())
                =
                #end
            #end
        #end
    where
        $groupCondition
        #GET_DATETIME_RANGE()
        $whereClause
    group by
        #foreach ($columnToInclude in $columns)
            $columnToInclude
            #if($velocityCount < $columns.size())
            ,
            #end
        #end
        #if($velocityCount < $aggViews.size())
        union all
        #end
    #end
) as tempTable
group by
    #foreach ($columnToInclude in $columns)
    tempTable.${columnToInclude}
        #if($velocityCount < $columns.size())
        ,
        #end
    #end
) as aggView
on (
    #foreach ($columnToInclude in $columnsOuter)
    rawView.${columnToInclude} = aggView.${columnToInclude}
        #if($velocityCount < $columnsOuter.size())
        and
        #end
    #end
)
) as $view
#end

##-----------------------------------------------------------------------------
## Query aggregation tables without any aggregation, excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning non-distinct columns.
##
## aggViews : list of aggregation views
## view : the view name to be created from this select
## columns : columns that should be included in this new view
## whereClause : the where clause to be applied
## distinct : the 'distinct' keyword string or an empty string
## columnToInclude : the distinct columns that should be used in the where clause when selecting from aggregation tables
##-----------------------------------------------------------------------------
#macro (UNION_ALL_AGGREGATION_VIEWS_WITH_SPECIFIC_COLUMNS_CONDITIONED $aggViews $view $columns $whereClause $distinct)
(
    #foreach ($aggView in $aggViews)
    select
        $distinct
        #foreach ($columnToInclude in $columns)
            $columnToInclude
            #if($velocityCount < $columns.size())
            ,
            #end
        #end
    from dc.$aggView
    where
        #GET_DATETIME_RANGE()
        $whereClause
        #if($velocityCount < $aggViews.size())
        union all
        #end
    #end
) as $view
#end

##-----------------------------------------------------------------------------
## Query aggregation tables with specific groupname without any aggregation, excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning non-distinct.
##
## Maximum number of groups is 2.
##
## rawTables : list of raw table partitions
## rawView : the view name to be created from this select
## columns : columns that should be included in the inner selects
## columnsOuter : columns that should be included in this new view (the most outer select)
## whereClause : the where clause to be applied
## tempTable : the temporary name of the inner table
## groupName : the group name to be applied
## groupTables : the array of group tables to be joined based on the GROUP_NAME columns
## groupCondition : the group condition to be applied
## distinct : the 'distinct' keyword string or an empty string
## columnToInclude : the distinct columns that should be used in the where clause when selecting from raw tables
##-----------------------------------------------------------------------------
#macro (UNION_ALL_AGGREGATION_VIEWS_WITH_SPECIFIC_COLUMNS_CONDITIONED_GROUPS $aggViews $view $columns $columnsOuter $whereClause $tmpTable $groupName $groupTables $groupCondition $distinct)
(
select
    $distinct
    #foreach ($columnToInclude in $columnsOuter)
        ${tmpTable}.$columnToInclude
        #if($velocityCount < $columnsOuter.size())
        ,
        #end
    #end
from (
    #foreach ($aggTable in $aggViews)
    select
        $distinct
        #foreach ($columnToInclude in $columns)
            $columnToInclude
            #if($velocityCount < $columns.size())
            ,
            #end
        #end
    from dc.$aggTable
    where
        #GET_DATETIME_RANGE()
        $whereClause
        #if($velocityCount < $aggViews.size())
        union all
        #end
    #end
) as $tmpTable,
    #foreach ($groupTable in $groupTables)
        $groupTable
        #if($velocityCount < $groupTables.size())
        full outer join
        #end
    #end
    #if($groupTables.size() > 1)
    on
        #foreach ($groupTable in $groupTables)
            ${groupTable}.GROUP_NAME
            #if($velocityCount < $groupTables.size())
            =
            #end
        #end
    #end
where
    #foreach ($groupTable in $groupTables)
        ${groupTable}.GROUP_NAME = $groupName
        #if($velocityCount < $groupTables.size())
        and
        #end
    #end
    $groupCondition
) as $view
#end

##-----------------------------------------------------------------------------
## Query raw tables without any aggregation, excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning non-distinct.
##
## rawTables : list of raw table partitions
## rawView : the view name to be created from this select
## columns : columns that should be included in this new view
## whereClause : the where clause to be applied
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## distinct : the 'distinct' keyword string or an empty string
## columnToInclude : the distinct columns that should be used in the where clause when selecting from raw tables
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_TAC_EXCLUSION_SPECIFY_COLUMNS_CONDITIONED $rawTables $rawView $columns $whereClause $useExclusiveTACs $distinct)
(
    #foreach ($rawTable in $rawTables)
    select
        $distinct
        #foreach ($columnToInclude in $columns)
            $columnToInclude
            #if($velocityCount < $columns.size())
            ,
            #end
        #end
    from dc.$rawTable tmpTable
    where
        #GET_DATETIME_RANGE()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
        #elseif ($useExclusiveTACs == "yes")
        and tmpTable.TAC is not null
        #end
        $whereClause
        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as $rawView
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_TAC_EXCLUSION_SPECIFY_COLUMNS_CONDITIONED_GROUPS_WEEK $rawTables $rawView $columns $columnsOuter $whereClause $tmpTable $groupName $groupTables $groupCondition $useExclusiveTACs $distinct)
(
select
    $distinct
    #foreach ($columnToInclude in $columnsOuter)
        ${tmpTable}.$columnToInclude
        #if($velocityCount < $columnsOuter.size())
        ,
        #end
    #end
from (
    #foreach ($rawTable in $rawTables)
    select
        $distinct
        #foreach ($columnToInclude in $columns)
            $columnToInclude
            #if($velocityCount < $columns.size())
            ,
            #end
        #end
    from dc.$rawTable tmpTable
    where
        #GET_DATE_RANGE_LOCAL()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
        #else
        and tmpTable.TAC is not null
        #end
        $whereClause
        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as $tmpTable,
    #foreach ($groupTable in $groupTables)
        $groupTable
        #if($velocityCount < $groupTables.size())
        full outer join
        #end
    #end
    #if($groupTables.size() > 1)
    on
        #foreach ($groupTable in $groupTables)
            ${groupTable}.GROUP_NAME
            #if($velocityCount < $groupTables.size())
            =
            #end
        #end
    #end
where
    $groupCondition
) as $rawView
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_TAC_EXCLUSION_SPECIFY_COLUMNS_CONDITIONED_WEEK $rawTables $rawView $columns $whereClause $useExclusiveTACs $distinct)
(
    #foreach ($rawTable in $rawTables)
    select
        $distinct
        #foreach ($columnToInclude in $columns)
            $columnToInclude
            #if($velocityCount < $columns.size())
            ,
            #end
        #end
    from dc.$rawTable tmpTable
    where
        #GET_DATE_RANGE_LOCAL()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
        #elseif ($useExclusiveTACs == "yes")
        and tmpTable.TAC is not null
        #end
        $whereClause
        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as $rawView
#end


##-----------------------------------------------------------------------------
## Query raw tables with specific groupname without any aggregation, excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning non-distinct.
##
## Maximum number of groups is 2.
##
## rawTables : list of raw table partitions
## rawView : the view name to be created from this select
## columns : columns that should be included in the inner selects
## columnsOuter : columns that should be included in this new view (the most outer select)
## whereClause : the where clause to be applied
## tempTable : the temporary name of the inner table
## groupName : the group name to be applied
## groupTables : the array of group tables to be joined based on the GROUP_NAME columns
## groupCondition : the group condition to be applied
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## distinct : the 'distinct' keyword string or an empty string
## columnToInclude : the distinct columns that should be used in the where clause when selecting from raw tables
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_TAC_EXCLUSION_SPECIFY_COLUMNS_CONDITIONED_GROUPS $rawTables $rawView $columns $columnsOuter $whereClause $tmpTable $groupName $groupTables $groupCondition $useExclusiveTACs $distinct)
(
select
    $distinct
    #foreach ($columnToInclude in $columnsOuter)
        ${tmpTable}.$columnToInclude
        #if($velocityCount < $columnsOuter.size())
        ,
        #end
    #end
from (
    #foreach ($rawTable in $rawTables)
    select
        $distinct
        #foreach ($columnToInclude in $columns)
            $columnToInclude
            #if($velocityCount < $columns.size())
            ,
            #end
        #end
    from dc.$rawTable tmpTable
    where
        #GET_DATETIME_RANGE()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
        #elseif ($useExclusiveTACs == "yes")
        and tmpTable.TAC is not null
        #end
        $whereClause
        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as $tmpTable,
    #foreach ($groupTable in $groupTables)
        $groupTable
        #if($velocityCount < $groupTables.size())
        full outer join
        #end
    #end
    #if($groupTables.size() > 1)
    on
        #foreach ($groupTable in $groupTables)
            ${groupTable}.GROUP_NAME
            #if($velocityCount < $groupTables.size())
            =
            #end
        #end
    #end
where
    $groupCondition
) as $rawView
#end

##-----------------------------------------------------------------------------
## Query raw tables (as post-aggregation), excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning distinct columns and number of impactedSubscribers as impactedSubscribers column
## based usually on imsiColumn together with $counterColumn with the number of failures.
##
## rawTables : list of raw table partitions
## rawView : the view name to be created from this select
## columns : columns that should be included in this new view
## counterColumn : the column name in which we will have the number of occurrences
## whereClause : the where clause to be applied
## imsiColumn : the column representing the imsi column in raw tables
## impactedSubscribers : the column representing the number of impacted subscribers as output
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## columnToInclude : the distinct columns that should be used in the where clause when selecting from raw tables
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_TAC_EXCLUSION_SPECIFY_COLUMNS_CONDITIONED_IMPACTED_SUBSCRIBERS $rawTables $rawView $columns $counterColumn $whereClause $imsiColumn $impactedSubscribers $useExclusiveTACs)
(
select
    #foreach ($columnToInclude in $columns)
        $columnToInclude
        #if($velocityCount <= $columns.size())
        ,
        #end
    #end
count(distinct $imsiColumn) as $impactedSubscribers,
sum($counterColumn) as $counterColumn
from (
    #foreach ($rawTable in $rawTables)
    select
        #foreach ($columnToInclude in $columns)
            $columnToInclude
            #if($velocityCount <= $columns.size())
            ,
            #end
        #end
        #GET_DATETIME_ID(),
        $imsiColumn as $imsiColumn,
    count(*) as $counterColumn
    from dc.$rawTable tmpTable
    where
        #GET_DATETIME_RANGE()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
        #elseif ($useExclusiveTACs == "yes")
        and tmpTable.TAC is not null
        #end
        $whereClause
    group by
        #foreach ($columnToInclude in $columns)
            $columnToInclude
            #if($velocityCount <= $columns.size())
            ,
            #end
        #end
    DATETIME_ID,
        $imsiColumn
        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as rawViewTemp
group by
    #foreach ($columnToInclude in $columns)
        $columnToInclude
        #if($velocityCount < $columns.size())
        ,
        #end
    #end
) as $rawView
#end
##-----------------------------------------------------------------------------
## Query raw tables (as post-aggregation), excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning distinct columns and number of impactedSubscribers as impactedSubscribers column
## based usually on imsiColumn together with $counterColumn with the number of failures.
##
## rawTables : list of raw table partitions
## rawView : the view name to be created from this select
## columns : columns that should be included in this new view
## counterColumn : the column name in which we will have the number of occurrences
## whereClause : the where clause to be applied
## imsiColumn : the column representing the imsi column in raw tables
## impactedSubscribers : the column representing the number of impacted subscribers as output
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## columnToInclude : the distinct columns that should be used in the where clause when selecting from raw tables
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_TAC_EXCLUSION_SPECIFY_COLUMNS_CONDITIONED_IMPACTED_SUBSCRIBERS $rawTables $rawView $columns $counterColumn $whereClause $imsiColumn $impactedSubscribers $useExclusiveTACs)
(
select
    #foreach ($columnToInclude in $columns)
        $columnToInclude
        #if($velocityCount <= $columns.size())
        ,
        #end
    #end
count(distinct $imsiColumn) as $impactedSubscribers,
sum($counterColumn) as $counterColumn
from (
    #foreach ($rawTable in $rawTables)
    select
        #foreach ($columnToInclude in $columns)
            $columnToInclude
            #if($velocityCount <= $columns.size())
            ,
            #end
        #end
        #GET_DATETIME_ID(),
        $imsiColumn as $imsiColumn,
    count(*) as $counterColumn
    from dc.$rawTable tmpTable
    where
        #GET_DATETIME_RANGE()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
        #elseif ($useExclusiveTACs == "yes")
        and tmpTable.TAC is not null
        #end
        $whereClause
    group by
        #foreach ($columnToInclude in $columns)
            $columnToInclude
            #if($velocityCount <= $columns.size())
            ,
            #end
        #end
    DATETIME_ID,
        $imsiColumn
        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as rawViewTemp
group by
    #foreach ($columnToInclude in $columns)
        $columnToInclude
        #if($velocityCount < $columns.size())
        ,
        #end
    #end
) as $rawView
#end

##-----------------------------------------------------------------------------
## Query raw tables (as post-aggregation), excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning distinct columns and number of impactedSubscribers as impactedSubscribers column
## based usually on imsiColumn together with $counterColumn with the number of failures.
##
## rawTables : list of raw table partitions
## rawView : the view name to be created from this select
## columns : columns that should be included in this new view
## columnsOuter : The columns to select in the outer select query, ie after all the joins and unions
## $groupTables : List of group tables to join on.
## $groupCondition : The column in the raw tables to use in teh where clause. The order and number must match what is in groupTables
## $groupConditionEquals : The column in the group tables to use in teh where clause. The order and number must match what is in groupTables
## counterColumn : the column name in which we will have the number of occurrences
## whereClause : A list of where clauses, must match the order and number of elements in groupTables
## imsiColumn : the column representing the imsi column in raw tables
## impactedSubscribers : the column representing the number of impacted subscribers as output
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_TAC_EXCLUSION_SPECIFY_COLUMNS_CONDITIONED_IMPACTED_SUBSCRIBERS_GROUPS_IMPROVED $rawTables $rawView $columns $columnsOuter $groupTables $groupCondition $groupConditionEquals $whereClause $counterColumn $imsiColumn $impactedSubscribers $useExclusiveTACs)
    (
        select
            #foreach ($columnToInclude in $columnsOuter)
                tempTable.${columnToInclude}
                #if($velocityCount <= $columnsOuter.size())
                ,
                #end
            #end
            isnull(count(distinct $imsiColumn), 0) as $impactedSubscribers,
            sum($counterColumn) as $counterColumn
        from (
            #foreach ($rawTable in $rawTables)
                #foreach ($groupTable in $groupTables)
                #set($index=$velocityCount - 1)
                    select
                        #foreach ($columnToInclude in $columns)
                             $columnToInclude
                            #if($velocityCount <= $columns.size())
                            ,
                            #end
                        #end
                        $imsiColumn,
                        count(*) as $counterColumn
                    from dc.$rawTable tmpTable,
                            $groupTable
                    where
                        ${groupTable}.GROUP_NAME = :groupname
                        AND tmpTable.$groupCondition.get($index) = ${groupTable}.$groupConditionEquals.get($index) AND
                        #GET_DATETIME_RANGE()
                        #if ($useExclusiveTACs == "no")
                            and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
                        #elseif ($useExclusiveTACs == "yes")
                            and tmpTable.TAC is not null
                        #end
                        $whereClause.get($index)
                    group by
                        #foreach ($columnToInclude in $columns)
                            $columnToInclude
                            #if($velocityCount <= $columns.size())
                            ,
                            #end
                        #end
                        $imsiColumn
                    #if($velocityCount < $groupTables.size())
                        union all
                    #end
                #end
                #if($velocityCount < $rawTables.size())
                    union all
                #end
            #end
            ) as tempTable
        group by
            #foreach ($columnToInclude in $columnsOuter)
                tempTable.${columnToInclude}
                #if($velocityCount < $columnsOuter.size())
                ,
                #end
            #end
    ) as $rawView
#end


##-----------------------------------------------------------------------------
## Query raw tables with specific groupname without any aggregation, excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning non-distinct.
## Improved due to ASSURE EQEV-2188 W-CFA/HFA: EE 3.2.5 RV : 1wk HFA queries failing with 500 error
##
## Maximum number of groups is 1.
##
## rawTables : list of raw table partitions
## rawView : the view name to be created from this select
## columns : columns that should be included in the inner selects
## columnsOuter : columns that should be included in this new view (the most outer select)
## whereClause : the where clause to be applied
## tempTable : the temporary name of the inner table
## groupName : the group name to be applied
## groupTables : the array of group tables to be joined based on the GROUP_NAME columns
## groupCondition : the group condition to be applied
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## distinct : the 'distinct' keyword string or an empty string
## columnToInclude : the distinct columns that should be used in the where clause when selecting from raw tables
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_TAC_EXCLUSION_SPECIFY_COLUMNS_CONDITIONED_GROUPS_IMPROVED $rawTables $rawView $columns $columnsOuter $whereClause $tmpTable $groupName $groupTable $tmpGrpTblName $groupCondition $useExclusiveTACs $distinct)
    (
         select
         $distinct
            #foreach ($columnToInclude in $columnsOuter)
                ${tmpTable}.$columnToInclude
                #if($velocityCount < $columnsOuter.size())
                ,
                #end
            #end
         from (
                #foreach ($rawTable in $rawTables)
                    select
                        #foreach ($columnToInclude in $columns)
                            $columnToInclude
                            #if($velocityCount < $columns.size())
                            ,
                            #end
                        #end
                    from dc.$rawTable tmpTable
                    , $groupTable $tmpGrpTblName
                    where
                        $whereClause
                        #GET_DATETIME_RANGE()
                        #if ($useExclusiveTACs == "no")
                            and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
                        #elseif ($useExclusiveTACs == "yes")
                            and tmpTable.TAC is not null
                        #end
                              group by
                  #foreach ($columnToInclude in $columns)
                      $columnToInclude
                      #if($velocityCount < $columns.size())
                      ,
                    #end
                  #end
                    #if($velocityCount < $rawTables.size())
                            union all
                    #end
                #end
                ) as $tmpTable) as $rawView
#end


##-----------------------------------------------------------------------------
## Query raw tables (as post-aggregation), excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning distinct columns and number of impactedSubscribers as impactedSubscribers column
## based usually on imsiColumn together with $counterColumn with the number of failures.
##
## Maximum number of groups is 2.
##
## rawTables : list of raw table partitions
## rawView : the view name to be created from this select
## columns : columns that should be included in the inner selects
## columnsOuter : columns that should be included in this new view (the most outer select)
## whereClause : the where clause to be applied
## tempTable : the temporary name of the inner table
## groupTables : the array of group tables to be joined based on the GROUP_NAME columns
## groupCondition : the group condition to be applied
## whereClause : the where clause to be applied
## counterColumn : the column name in which we will have the number of occurrences
## imsiColumn : the column representing the imsi column in raw tables
## impactedSubscribers : the column representing the number of impacted subscribers as output
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## columnToInclude : the distinct columns that should be used in the where clause when selecting from raw tables
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_TAC_EXCLUSION_SPECIFY_COLUMNS_CONDITIONED_IMPACTED_SUBSCRIBERS_GROUPS $rawTables $rawView $columns $columnsOuter $groupTables $groupCondition $whereClause $counterColumn $imsiColumn $impactedSubscribers $useExclusiveTACs)
(
select
    #foreach ($columnToInclude in $columnsOuter)
    tempTable.${columnToInclude}
        #if($velocityCount <= $columnsOuter.size())
        ,
        #end
    #end
isnull(count(distinct $imsiColumn), 0) as $impactedSubscribers,
sum($counterColumn) as $counterColumn
from (
    #foreach ($rawTable in $rawTables)
    select
        #foreach ($columnToInclude in $columns)
            $columnToInclude
            #if($velocityCount <= $columns.size())
            ,
            #end
        #end
        $imsiColumn,
    count(*) as $counterColumn
    from dc.$rawTable tmpTable,
        #foreach ($groupTable in $groupTables)
            $groupTable
            #if($velocityCount < $groupTables.size())
            full outer join
            #end
        #end
        #if($groupTables.size() > 1)
        on
            #foreach ($groupTable in $groupTables)
                ${groupTable}.GROUP_NAME
                #if($velocityCount < $groupTables.size())
                =
                #end
            #end
        #end
    where
        $groupCondition
        #GET_DATETIME_RANGE()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
        #elseif ($useExclusiveTACs == "yes")
        and tmpTable.TAC is not null
        #end
        $whereClause
    group by
        $imsiColumn ,
        #foreach ($columnToInclude in $columns)
            $columnToInclude
            #if($velocityCount < $columns.size())
            ,
            #end
        #end

        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as tempTable
group by
    #foreach ($columnToInclude in $columnsOuter)
    tempTable.${columnToInclude}
        #if($velocityCount < $columnsOuter.size())
        ,
        #end
    #end
) as $rawView
#end


##-----------------------------------------------------------------------------
## Query raw tables (as lookup for distinct values), excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning distinct columns and number of impactedSubscribers as impactedSubscribers column
## based usually on imsiColumn, no other counter is retrieved.
##
## rawTables : list of raw table partitions
## rawView : the view name to be created from this select
## columns : columns that should be included in this new view
## whereClause : the where clause to be applied
## imsiColumn : the column representing the imsi column in raw tables
## impactedSubscribers : the column representing the number of impacted subscribers as output
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## columnToInclude : the distinct columns that should be used in the where clause when selecting from raw tables
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_TAC_EXCLUSION_SPECIFY_COLUMNS_CONDITIONED_IMPACTED_SUBSCRIBERS_NO_COUNT $rawTables $rawView $columns $whereClause $imsiColumn $impactedSubscribers $useExclusiveTACs)
(
select
    #foreach ($columnToInclude in $columns)
        $columnToInclude
        #if($velocityCount <= $columns.size())
        ,
        #end
    #end
isnull(count(distinct $imsiColumn), 0) as $impactedSubscribers
from (
    #foreach ($rawTable in $rawTables)
    select
    distinct
        #foreach ($columnToInclude in $columns)
            $columnToInclude
            #if($velocityCount <= $columns.size())
            ,
            #end
        #end
        $imsiColumn as $imsiColumn
    from dc.$rawTable tmpTable
    where
        #GET_DATETIME_RANGE()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
        #elseif ($useExclusiveTACs == "yes")
        and tmpTable.TAC is not null
        #end
        $whereClause
        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as rawViewTemp
group by
    #foreach ($columnToInclude in $columns)
        $columnToInclude
        #if($velocityCount < $columns.size())
        ,
        #end
    #end
) as $rawView
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_TAC_EXCLUSION_SPECIFY_COLUMNS_CONDITIONED_IMPACTED_SUBSCRIBERS_NO_COUNT_WEEK $rawTables $rawView $columns $whereClause $imsiColumn $impactedSubscribers $useExclusiveTACs)
(
select
    #foreach ($columnToInclude in $columns)
        $columnToInclude
        #if($velocityCount <= $columns.size())
        ,
        #end
    #end
isnull(count(distinct $imsiColumn), 0) as $impactedSubscribers
from (
    #foreach ($rawTable in $rawTables)
    select
    distinct
        #foreach ($columnToInclude in $columns)
            $columnToInclude
            #if($velocityCount <= $columns.size())
            ,
            #end
        #end
        $imsiColumn as $imsiColumn
    from dc.$rawTable tmpTable
    where
        #GET_DATE_RANGE_LOCAL()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
        #else
        and tmpTable.TAC is not null
        #end
        $whereClause
        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as rawViewTemp
group by
    #foreach ($columnToInclude in $columns)
        $columnToInclude
        #if($velocityCount < $columns.size())
        ,
        #end
    #end
) as $rawView
#end

##-----------------------------------------------------------------------------
## Query raw tables (as lookup for distinct values), excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning distinct columns and number of impactedSubscribers as impactedSubscribers column
## based usually on imsiColumn, no other counter is retrieved.
##
## rawTables : list of raw table partitions
## rawView : the view name to be created from this select
## columns : columns that should be included in this new view
## groupTables : the array of group tables to be joined based on the GROUP_NAME columns
## groupCondition : the group condition to be applied
## whereClause : the where clause to be applied
## imsiColumn : the column representing the imsi column in raw tables
## impactedSubscribers : the column representing the number of impacted subscribers as output
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## columnToInclude : the distinct columns that should be used in the where clause when selecting from raw tables
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_TAC_EXCLUSION_SPECIFY_COLUMNS_CONDITIONED_IMPACTED_SUBSCRIBERS_GROUPS_NO_COUNT $rawTables $rawView $columns $groupTables $groupCondition $whereClause $imsiColumn $impactedSubscribers $useExclusiveTACs)
(
select
    #foreach ($columnToInclude in $columns)
        $columnToInclude
        #if($velocityCount <= $columns.size())
        ,
        #end
    #end
isnull(count(distinct $imsiColumn), 0) as $impactedSubscribers
from (
    #foreach ($rawTable in $rawTables)
    select
        #foreach ($columnToInclude in $columns)
            $columnToInclude
            #if($velocityCount <= $columns.size())
            ,
            #end
        #end
        $imsiColumn
    from dc.$rawTable as tmpTable,
        #foreach ($groupTable in $groupTables)
            $groupTable
            #if($velocityCount < $groupTables.size())
            full outer join
            #end
        #end
        #if($groupTables.size() > 1)
        on
            #foreach ($groupTable in $groupTables)
                ${groupTable}.GROUP_NAME
                #if($velocityCount < $groupTables.size())
                =
                #end
            #end
        #end
    where
        $groupCondition
        #GET_DATETIME_RANGE()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
        #elseif ($useExclusiveTACs == "yes")
        and tmpTable.TAC is not null
        #end
        $whereClause
    group by
        #foreach ($columnToInclude in $columns)
            $columnToInclude
            #if($velocityCount <= $columns.size())
            ,
            #end
        #end
        $imsiColumn
        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as rawViewTemp
group by
    #foreach ($columnToInclude in $columns)
        $columnToInclude
        #if($velocityCount < $columns.size())
        ,
        #end
    #end
) as $rawView
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_TAC_EXCLUSION_SPECIFY_COLUMNS_CONDITIONED_IMPACTED_SUBSCRIBERS_GROUPS_NO_COUNT_WEEK $rawTables $rawView $columns $groupTables $groupCondition $whereClause $imsiColumn $impactedSubscribers $useExclusiveTACs)
(
select
    #foreach ($columnToInclude in $columns)
        $columnToInclude
        #if($velocityCount <= $columns.size())
        ,
        #end
    #end
isnull(count(distinct $imsiColumn), 0) as $impactedSubscribers
from (
    #foreach ($rawTable in $rawTables)
    select
        #foreach ($columnToInclude in $columns)
            $columnToInclude
            #if($velocityCount <= $columns.size())
            ,
            #end
        #end
        $imsiColumn
    from dc.$rawTable as tmpTable,
        #foreach ($groupTable in $groupTables)
            $groupTable
            #if($velocityCount < $groupTables.size())
            full outer join
            #end
        #end
        #if($groupTables.size() > 1)
        on
            #foreach ($groupTable in $groupTables)
                ${groupTable}.GROUP_NAME
                #if($velocityCount < $groupTables.size())
                =
                #end
            #end
        #end
    where
        $groupCondition
        #GET_DATE_RANGE_LOCAL()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
        #else
        and tmpTable.TAC is not null
        #end
        $whereClause
    group by
        #foreach ($columnToInclude in $columns)
            $columnToInclude
            #if($velocityCount <= $columns.size())
            ,
            #end
        #end
        $imsiColumn
        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as rawViewTemp
group by
    #foreach ($columnToInclude in $columns)
        $columnToInclude
        #if($velocityCount < $columns.size())
        ,
        #end
    #end
) as $rawView
#end

#macro (FILTER_BY $filter $source )
    #set ( $filterTypeString = ${filterType} )

    #if ($filterTypeString == $filter)
    AND $source = :filterValue
    #end

#end


#macro (FILTER_BY_LIST $filter $source )
    #set ( $filterTypeStringList = ${filterType} )
    #set ( $filterValueStringList = ${filterValue} )

    #set ( $filterTypeList = $filterTypeStringList.split(",") )
    #set ( $filterValueList = $filterValueStringList.split(",") )

    #set ( $outSideLoopCount = 0 )

    #foreach($filterType in $filterTypeList)
        #set ( $outSideLoopCount = $velocityCount )

        #foreach($filterValue in $filterValueList)

            #if ($outSideLoopCount == $velocityCount)
                #if ($filterType == $filter)
                AND $source = $filterValue
                #end
            #end
        #end
    #end

#end

#macro(KPI_RATIO_QUERY_FOR_DATA_TIERED $columns $networkType $aggSucTablesToUseInQuery $rawErrTablesToUseInQuery $rawSucTablesToUseInQuery $useRawSucTable $useCcScc $protjoin )
(    select
    #if($useCcScc)
        #GET_COLUMNS_BY_TABLE ("err" $columns)
    #else
        #GET_NOT_NULL_COLUMN (["suc","err"] $columns)
    #end
    #if($useCcScc)
    ccref.CAUSE_CODE_DESC ,
    sccref.SUBCAUSE_CODE_DESC ,
    #end
etref.EVENT_ID_DESC ,
max(isnull(err.NO_OF_ERRORS, 0)) as NO_OF_ERRORS,
    #if(!$useCcScc)
    max(isnull(suc.NO_OF_SUCCESSES,0)) as NO_OF_SUCCESSES,
    NO_OF_ERRORS + NO_OF_SUCCESSES as OCCURRENCES,
    #CALCULATE_KPI_RATIO() AS KPI,
    #end
max(isnull(err.NO_OF_TOTAL_ERR_SUBSCRIBERS,0)) as  NO_OF_TOTAL_ERR_SUBSCRIBERS

from
(select
    #GET_COLUMNS_BY_TABLE ("temp_err" $columns)
count(*),
count(distinct(IMSI))
from
    #REPLACE_RAW_VIEW_WITH_RAW_TABLES_TAC_EXCLUSION_SPECIFY_COLUMNS_CONDITIONED($rawErrTablesToUseInQuery "temp_err" $columnsToSelectErrorRAW $conditionToSelectErrorRAW $useExclusiveTAC "")
group by
    #GET_COLUMNS_BY_TABLE_NO_COMMA_TRAILING ("temp_err" $columns)
) as err (
    #GET_COLUMNS ($columns)
NO_OF_ERRORS,
NO_OF_TOTAL_ERR_SUBSCRIBERS)

    #if(!$useCcScc)
    full outer join

    (select
        #GET_COLUMNS_BY_TABLE ("temp_suc" $columns)
        #if($useRawSucTable)
        count(*)
        #else
        sum(NO_OF_SUCCESSES)
        #end
    from
        #if($useRawSucTable)
            #REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION($rawSucTablesToUseInQuery "temp_suc")
        #else
            $aggSucTablesToUseInQuery temp_suc
        #end
    where
        #GET_DATETIME_RANGE()
        $conditionToSelectErrorRAW
    group by
        #GET_COLUMNS_BY_TABLE_NO_COMMA_TRAILING ("temp_suc" $columns)
    ) as suc (
        #GET_COLUMNS ($columns)
    NO_OF_SUCCESSES
    )
    on (
        #GET_JOIN("suc" "err" $columns)
    )
    #end
,DIM_E_${networkType}_EVENTTYPE etref
    #if($useCcScc)
    ,dc.DIM_E_${networkType}_CAUSECODE ccref
    ,dc.DIM_E_${networkType}_SUBCAUSECODE sccref
    where
    etref.EVENT_ID = :$ApplicationConstants.EVENT_ID_PARAM
    #if($protjoin)
        and ( err.CAUSE_CODE *= ccref.CAUSE_CODE
        and err.CAUSE_PROT_TYPE *= ccref.CAUSE_PROT_TYPE )
    #else
        and err.CAUSE_CODE *= ccref.CAUSE_CODE
    #end
    and err.SUBCAUSE_CODE *= sccref.SUBCAUSE_CODE
    #else
    where
    etref.EVENT_ID = :$ApplicationConstants.EVENT_ID_PARAM
    #end
group by
    #if($useCcScc)
        #GET_COLUMNS_BY_TABLE ("err" $columns)
    ccref.CAUSE_CODE_DESC,
    sccref.SUBCAUSE_CODE_DESC,
    #else
        #GET_COLUMNS_BY_TABLE ("err" $columns)
        #GET_COLUMNS_BY_TABLE ("suc" $columns)
    #end
etref.EVENT_ID_DESC
)
#end

#macro(KPI_RATIO_QUERY_FOR_DATA_TIERED_WITH_TAC $columns $networkType $aggSucTablesToUseInQuery $rawErrTablesToUseInQuery $rawSucTablesToUseInQuery $useRawSucTable $useCcScc $useExclusiveTAC $protjoin)
(    select
        #if($useCcScc)
            #GET_COLUMNS_BY_TABLE ("err" $columns)
        #else
            #GET_NOT_NULL_COLUMN (["suc","err"] $columns)
        #end
        #if($useCcScc)
        ccref.CAUSE_CODE_DESC ,
        sccref.SUBCAUSE_CODE_DESC ,
        #end
        etref.EVENT_ID_DESC ,
        max(isnull(err.NO_OF_ERRORS, 0)) as NO_OF_ERRORS,
        #if(!$useCcScc)
        max(isnull(suc.NO_OF_SUCCESSES,0)) as NO_OF_SUCCESSES,
        NO_OF_ERRORS + NO_OF_SUCCESSES as OCCURRENCES,
        #CALCULATE_KPI_RATIO() AS KPI,
        #end
        max(isnull(err.NO_OF_TOTAL_ERR_SUBSCRIBERS,0)) as  NO_OF_TOTAL_ERR_SUBSCRIBERS

    from
        (select
            #GET_COLUMNS_BY_TABLE ("temp_err" $columns)
            count(*),
            count(distinct(IMSI))
        from
            #if ($timerange == "TR_4")
            #REPLACE_RAW_VIEW_WITH_RAW_TABLES_TAC_EXCLUSION_SPECIFY_COLUMNS_CONDITIONED_WEEK($rawErrTablesToUseInQuery "temp_err" $columnsToSelectErrorRAW $conditionToSelectErrorRAW $useExclusiveTAC "")
            #else
            #REPLACE_RAW_VIEW_WITH_RAW_TABLES_TAC_EXCLUSION_SPECIFY_COLUMNS_CONDITIONED($rawErrTablesToUseInQuery "temp_err" $columnsToSelectErrorRAW $conditionToSelectErrorRAW $useExclusiveTAC "")
            #end
        group by
            #GET_COLUMNS_BY_TABLE_NO_COMMA_TRAILING ("temp_err" $columns)
        ) as err (
            #GET_COLUMNS ($columns)
            NO_OF_ERRORS,
            NO_OF_TOTAL_ERR_SUBSCRIBERS)

    #if(!$useCcScc)
        full outer join

        (select
            #GET_COLUMNS_BY_TABLE ("temp_suc" $columns)
            #if($useRawSucTable)
            count(*)
            #else
            sum(NO_OF_SUCCESSES)
            #end
        from
            #if($useRawSucTable)
                #if ($timerange == "TR_4")
                    #REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_WEEK($rawSucTablesToUseInQuery "temp_suc")
                #else
                    #REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION($rawSucTablesToUseInQuery "temp_suc")
                #end
                where 1=1 $conditionToSelectErrorRAW
            #else
                $aggSucTablesToUseInQuery temp_suc
                where
                #if ($timerange == "TR_4")
                #GET_DATE_RANGE_LOCAL()
                #else
                #GET_DATETIME_RANGE()
                #end
                $conditionToSelectErrorRAW
            #end
        group by
            #GET_COLUMNS_BY_TABLE_NO_COMMA_TRAILING ("temp_suc" $columns)
        ) as suc (
               #GET_COLUMNS ($columns)
            NO_OF_SUCCESSES
        )
        on (
            #GET_JOIN("suc" "err" $columns)
        )
    #end
    ,DIM_E_${networkType}_EVENTTYPE etref
    #if($useCcScc)
    ,dc.DIM_E_${networkType}_CAUSECODE ccref
    ,dc.DIM_E_${networkType}_SUBCAUSECODE sccref
    where
        etref.EVENT_ID = :$ApplicationConstants.EVENT_ID_PARAM
        #if($protjoin)
            and ( err.CAUSE_CODE *= ccref.CAUSE_CODE
            and err.CAUSE_PROT_TYPE *= ccref.CAUSE_PROT_TYPE )
        #else
            and err.CAUSE_CODE *= ccref.CAUSE_CODE
        #end
        and err.SUBCAUSE_CODE *= sccref.SUBCAUSE_CODE
    #else
    where
        etref.EVENT_ID = :$ApplicationConstants.EVENT_ID_PARAM
    #end
    group by
        #if($useCcScc)
        #GET_COLUMNS_BY_TABLE ("err" $columns)
        ccref.CAUSE_CODE_DESC,
        sccref.SUBCAUSE_CODE_DESC,
        #else
            #GET_COLUMNS_BY_TABLE ("err" $columns)
            #GET_COLUMNS_BY_TABLE ("suc" $columns)
        #end
        etref.EVENT_ID_DESC
)
#end

##New macro for group by columns
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_SPECIFY_COLUMNS_WITH_GROUP_BY $rawtables $rawview $columns $columnsToIncludeInNewView $groupbyColumns)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATETIME_RANGE()
    and #GET_COLUMNS_WHERE($columns)
    GROUP BY
        #foreach ($column in $groupbyColumns)
            $column
            #if($velocityCount < $groupbyColumns.size())
            ,
            #end
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

##-----------------------------------------------------------------------------
## Returns APN from table with LAST_SEEN condition
## :dateFromForApnRetention
##-----------------------------------------------------------------------------
#macro(GET_APN_LAST_SEEN $dimAPNTable)
(
select
APN
from $dimAPNTable
where
LAST_SEEN >= :dateFromForApnRetention
)
#end

##-----------------------------------------------------------------------------
## Query raw tables without any aggregation, excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, filtering out APN being set up before LAST_SEEN time
##
## rawTables : list of raw table partitions
## rawView : the view name to be created from this select
## columnsToIncludeInNewView : columns that should be included in this new view
## columnToInclude : the distinct columns that should be used in the where clause when selecting from raw tables
## dimApnTable : dim table that holds APN information
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_APN_IN_DIM_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS $rawtables $rawview $columnsToIncludeInNewView $dimApnTable)
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATETIME_RANGE()
    and #GET_TAC_EXCLUSION()
    and APN in #GET_APN_LAST_SEEN( $dimApnTable )
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
#end

##-----------------------------------------------------------------------------
## Returns ranking information for data tiering, excluding Exclusive TACs (non-NULLs only),
## specifying a date/time filter
##
## columns : the distinct columns that should be selected from err raw table and suc agg table
## errRawTable : the raw table being used to select columns for error information
## sucAggTable : the aggregation table being used to select columns for success information
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
##-----------------------------------------------------------------------------
#macro(SELECT_DATA_TIERED_RANKING_DATA $columns $errRawTable $sucAggTable $useExclusiveTAC)
SELECT
    #GET_NOT_NULL_COLUMN(["temp_err", "temp_suc"] $columns)
MAX(isnull(NO_OF_ERRORS, 0))                       AS NO_OF_ERRORS,
MAX(isnull(NO_OF_SUCCESSES,0))                     AS NO_OF_SUCCESSES
FROM
(select
    #GET_COLUMNS($columns)
count(*) as NO_OF_ERRORS
from
    #REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_CONDITIONED($errRawTable "err" $columns "" $useExclusiveTAC)
group by
    #GET_COLUMNS_NO_COMMA_TRAILING($columns)
) as temp_err (#GET_COLUMNS($columns) NO_OF_ERRORS)
FULL OUTER JOIN
(select
    #GET_COLUMNS($columns)
sum(NO_OF_SUCCESSES)
from
    $sucAggTable
where
    #GET_DATETIME_RANGE()
group by
    #GET_COLUMNS_NO_COMMA_TRAILING($columns)
) as temp_suc (#GET_COLUMNS($columns) NO_OF_SUCCESSES)
ON(
    #GET_JOIN("temp_err" "temp_suc" $columns)
)
GROUP BY
    #GET_COLUMNS_WITH_TABLE_NAMES(["temp_err", "temp_suc"] $columns)
#end

##Control PLANE KPI query only
##param $isNetworkLevel3G is only used by network level KPI. Set to false if on controller or cell level.
#macro (CP_KPI_REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_PLUS_GROUPBY $rawtables $rawview $columns $columnsToSelectFromCPTables $isNetworkLevel3G $groupbyColumns)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToSelectFromCPTables)
            $columnToInclude
            #if($velocityCount < $columnsToSelectFromCPTables.size())
            ,
            #end
        #end
    FROM
    dc.$rawtable
    WHERE
        #GET_DATETIME_RANGE()
        #if($columns!=[])
        and #GET_COLUMNS_WHERE($columns)
        #end
    AND #GET_TAC_EXCLUSION()
    AND EVENT_ID IS NOT NULL
    AND HIERARCHY_3 <> 'Unknown'
        #if($isNetworkLevel3G)
        AND RAT = 1
        #end
    GROUP BY
        #foreach ($column in $groupbyColumns)
            $column
            #if($velocityCount < $groupbyColumns.size())
            ,
            #end
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

##For Control plane KPI drilldown usage only
##Replaced datetime with kpitime
#macro (CP_DRILL_KPI_REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_PLUS_GROUPBY $kpiStartTime $kpiEndTime $rawtables $rawview $columns $columnsToSelectFromCPTables $isNetworkLevel3G $groupbyColumns)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToSelectFromCPTables)
            $columnToInclude
            #if($velocityCount < $columnsToSelectFromCPTables.size())
            ,
            #end
        #end
    FROM
    dc.$rawtable
    WHERE
    DATETIME_ID >= '$kpiStartTime'
    AND DATETIME_ID < '$kpiEndTime'
        #if($columns!=[])
        and #GET_COLUMNS_WHERE($columns)
        #end
    AND #GET_TAC_EXCLUSION()
    AND EVENT_ID IS NOT NULL
        #if($isNetworkLevel3G)
        AND RAT = 1
        #end
    GROUP BY
        #foreach ($column in $groupbyColumns)
            $column
            #if($velocityCount < $groupbyColumns.size())
            ,
            #end
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro(GET_DRILLDOWN_CP_KPI_BY_TYPE $KPI)
    #if($KPI == "Attach Success Rate")
    (CASE WHEN EVENT_ID=0 THEN (CAST (ROUND(( isnull(( SUM(isnull(NO_OF_SUCCESSES,0)) )/CAST( SUM(isnull(NO_OF_ERRORS,0)) + SUM(isnull(NO_OF_SUCCESSES,0)) AS DECIMAL(16)),0))*100, 2) AS NUMERIC(5,2))) END) AS value
    #elseif($KPI == "PDP Context Activation Success Rate")
    (CASE WHEN EVENT_ID=1 THEN (CAST (ROUND(( isnull(( SUM(isnull(NO_OF_SUCCESSES,0)) )/CAST( SUM(isnull(NO_OF_ERRORS,0)) + SUM(isnull(NO_OF_SUCCESSES,0)) AS DECIMAL(16)),0))*100, 2) AS NUMERIC(5,2))) END) AS value
    #elseif($KPI == "RAU Success Rate")
    (CASE WHEN EVENT_ID=2 THEN (CAST (ROUND(( isnull(( SUM(isnull(NO_OF_SUCCESSES,0)) )/CAST( SUM(isnull(NO_OF_ERRORS,0)) + SUM(isnull(NO_OF_SUCCESSES,0)) AS DECIMAL(16)),0))*100, 2) AS NUMERIC(5,2))) END) AS value
    #elseif($KPI == "ISRAU Success Rate")
    (CASE WHEN EVENT_ID=3 THEN (CAST (ROUND(( isnull(( SUM(isnull(NO_OF_SUCCESSES,0)) )/CAST( SUM(isnull(NO_OF_ERRORS,0)) + SUM(isnull(NO_OF_SUCCESSES,0)) AS DECIMAL(16)),0))*100, 2) AS NUMERIC(5,2))) END) AS value
    #elseif($KPI == "PDP Context Cutoff Ratio")
    (CASE WHEN EVENT_ID=4 THEN (CAST (ROUND((isnull(( SUM(isnull(NO_OF_NET_INIT_DEACTIVATES_ERR,0)) + SUM(isnull(NO_OF_NET_INIT_DEACTIVATES_SUC,0)) )/CAST( SUM(isnull(NO_OF_ERRORS,0)) + SUM(isnull(NO_OF_SUCCESSES,0)) AS DECIMAL(16)),0 ))*100, 2) AS NUMERIC(5,2))) END) AS value
    #elseif($KPI == "Detach Success Rate")
    (CASE WHEN EVENT_ID=14 THEN (CAST (ROUND(( isnull(( SUM(isnull(NO_OF_SUCCESSES,0)) )/CAST( SUM(isnull(NO_OF_ERRORS,0)) + SUM(isnull(NO_OF_SUCCESSES,0)) AS DECIMAL(16)),0))*100, 2) AS NUMERIC(5,2))) END) AS value
    #elseif($KPI == "Service Request Failure Ratio")
    (CASE WHEN EVENT_ID=15 THEN (CAST (ROUND((isnull(( SUM(isnull(NO_OF_ERRORS,0)) )/CAST( SUM(isnull(NO_OF_ERRORS,0)) + SUM(isnull(NO_OF_SUCCESSES,0)) AS DECIMAL(16)),0))*100, 2) AS NUMERIC(5,2))) END) AS value
    #elseif($KPI == "Paging Failure Ratio")
    (CASE WHEN EVENT_ID=15 THEN (CAST (ROUND((isnull(( SUM(isnull(NO_OF_PAGING_ATTEMPTS_ERR,0)) )/CAST( SUM(isnull(NO_OF_PAGING_ATTEMPTS_ERR,0)) + SUM(isnull(NO_OF_PAGING_ATTEMPTS_SUC,0)) AS DECIMAL(16)),0))*100, 2) AS NUMERIC(5,2))) END) AS value
    #end
#end

##macro used for Control plane KPI drilldown
##return TAC for input kpi type
#macro(GET_DRILLDOWN_CP_DRILLTAC_BY_TYPE $KPI)
    #if($KPI == "Attach Success Rate")
    (CASE WHEN EVENT_ID=0 THEN TAC END)AS drillBy
    #elseif($KPI == "PDP Context Activation Success Rate")
    (CASE WHEN EVENT_ID=1 THEN TAC END)AS drillBy
    #elseif($KPI == "RAU Success Rate")
    (CASE WHEN EVENT_ID=2 THEN TAC END)AS drillBy
    #elseif($KPI == "ISRAU Success Rate")
    (CASE WHEN EVENT_ID=3 THEN TAC END)AS drillBy
    #elseif($KPI == "PDP Context Cutoff Ratio")
    (CASE WHEN EVENT_ID=4 THEN TAC END)AS drillBy
    #elseif($KPI == "Detach Success Rate")
    (CASE WHEN EVENT_ID=14 THEN TAC END)AS drillBy
    #elseif($KPI == "Service Request Failure Ratio")
    (CASE WHEN EVENT_ID=15 THEN TAC END)AS drillBy
    #elseif($KPI == "Paging Failure Ratio")
    (CASE WHEN EVENT_ID=15 THEN TAC END)AS drillBy
    #end
#end

##macro used for Control plane KPI drilldown
##return make or (make and model) for input kpi type
#macro(GET_DRILLDOWN_CP_DRILLMAKE_BY_TYPE $KPI $drilltype $tacRefView)
    #if($KPI == "Attach Success Rate")
        #if($drilltype==$TYPE_MAN)
            (CASE WHEN EVENT_ID=0 THEN ${tacRefView}.VENDOR_NAME END)AS drillBy
        #else
            (CASE WHEN EVENT_ID=0 THEN ${tacRefView}.VENDOR_NAME||'-'|| ${tacRefView}.MARKETING_NAME END)AS drillBy
        #end
    #elseif($KPI == "PDP Context Activation Success Rate")
        #if($drilltype==$TYPE_MAN)
            (CASE WHEN EVENT_ID=1 THEN ${tacRefView}.VENDOR_NAME END)AS drillBy
        #else
            (CASE WHEN EVENT_ID=1 THEN ${tacRefView}.VENDOR_NAME||'-'|| ${tacRefView}.MARKETING_NAME END)AS drillBy
        #end
    #elseif($KPI == "RAU Success Rate")
        #if($drilltype==$TYPE_MAN)
            (CASE WHEN EVENT_ID=2 THEN ${tacRefView}.VENDOR_NAME END)AS drillBy
        #else
            (CASE WHEN EVENT_ID=2 THEN ${tacRefView}.VENDOR_NAME||'-'|| ${tacRefView}.MARKETING_NAME END)AS drillBy
        #end
    #elseif($KPI == "ISRAU Success Rate")
        #if($drilltype==$TYPE_MAN)
            (CASE WHEN EVENT_ID=3 THEN ${tacRefView}.VENDOR_NAME END)AS drillBy
        #else
            (CASE WHEN EVENT_ID=3 THEN ${tacRefView}.VENDOR_NAME||'-'|| ${tacRefView}.MARKETING_NAME END)AS drillBy
        #end
    #elseif($KPI == "PDP Context Cutoff Ratio")
        #if($drilltype==$TYPE_MAN)
            (CASE WHEN EVENT_ID=4 THEN ${tacRefView}.VENDOR_NAME END)AS drillBy
        #else
            (CASE WHEN EVENT_ID=4 THEN ${tacRefView}.VENDOR_NAME||'-'|| ${tacRefView}.MARKETING_NAME END)AS drillBy
        #end
    #elseif($KPI == "Detach Success Rate")
        #if($drilltype==$TYPE_MAN)
            (CASE WHEN EVENT_ID=14 THEN ${tacRefView}.VENDOR_NAME END)AS drillBy
        #else
            (CASE WHEN EVENT_ID=14 THEN ${tacRefView}.VENDOR_NAME||'-'|| ${tacRefView}.MARKETING_NAME END)AS drillBy
        #end
    #elseif($KPI == "Service Request Failure Ratio")
        #if($drilltype==$TYPE_MAN)
            (CASE WHEN EVENT_ID=15 THEN ${tacRefView}.VENDOR_NAME END)AS drillBy
        #else
            (CASE WHEN EVENT_ID=15 THEN ${tacRefView}.VENDOR_NAME||'-'|| ${tacRefView}.MARKETING_NAME END)AS drillBy
        #end
    #elseif($KPI == "Paging Failure Ratio")
        #if($drilltype==$TYPE_MAN)
            (CASE WHEN EVENT_ID=15 THEN ${tacRefView}.VENDOR_NAME END)AS drillBy
        #else
            (CASE WHEN EVENT_ID=15 THEN ${tacRefView}.VENDOR_NAME||'-'|| ${tacRefView}.MARKETING_NAME END)AS drillBy
        #end
    #end
#end

##USER PLANE KPI query only
#macro (USERPLANE_KPI_REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_PLUS_GROUPBY $rawtables $rawview $columns $columnsToIncludeInNewView $notNullColumns $groupbyColumns)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end,
        #SELECT_UKPI_SAMPLING_COUNT(),
        #GET_UP_KPI_VALUES()
    FROM
    dc.$rawtable
    WHERE
        #if($columns!=[])
            #GET_COLUMNS_WHERE($columns)
        #end
        #if($notNullColumns!=[])
            #GET_COLUMNS_WHERE_NOT_NULL($notNullColumns)
        #end
    and FIVE_MIN_AGG_TIME >= :dateFrom
    and FIVE_MIN_AGG_TIME < :dateTo
    and #GET_TAC_EXCLUSION()
    GROUP BY
        #foreach ($column in $groupbyColumns)
            $column
            #if($velocityCount < $groupbyColumns.size())
            ,
            #end
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

##USER PLANE KPI drilldown query only
#macro (USERPLANE_KPI_DRILLDOWN_WITH_FILTERS $rawtables $rawview $columns $columnsToIncludeInNewView $notNullColumns $groupbyColumns $KPI)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end,
        #if($KPI == 0)
             COUNT(THROUGHPUT)AS UL_TP_SAMPLE,
             SUM(THROUGHPUT) AS TOTAL_UL_TP
        #elseif($KPI == 1)
             COUNT(THROUGHPUT) AS DL_TP_SAMPLE,
             SUM(THROUGHPUT)  AS TOTAL_DL_TP
        #elseif($KPI == 2)
            COUNT(SETUP_TIME_TERM)  AS RTT_TERM_SAMPLE,
            SUM(SETUP_TIME_TERM)  AS TOTAL_SETUP_TIME_TERM
        #elseif($KPI == 3)
            COUNT(SETUP_TIME_NET)   AS RTT_NET_SAMPLE,
            SUM(SETUP_TIME_NET)   AS TOTAL_SETUP_TIME_NET
        #elseif($KPI == 4)
            COUNT(PACKET_LOSS_TERM) AS PACKET_LOSS_TERM_SAMPLE,
            SUM(PACKET_LOSS_TERM) AS TOTAL_PACKET_LOSS_TERM
        #elseif($KPI == 5)
            COUNT(PACKET_LOSS_NET)  AS PACKET_LOSS_NET_SAMPLE,
            SUM(PACKET_LOSS_NET)  AS TOTAL_PACKET_LOSS_NET
        #end
    FROM
        dc.$rawtable
    WHERE
        FIVE_MIN_AGG_TIME = '$kpiStartTime'
        #if($columns!=[])
         AND #GET_COLUMNS_WHERE($columns)
        #end
        #if($notNullColumns!=[])
            AND #GET_COLUMNS_WHERE_NOT_NULL($notNullColumns)
        #end
    and #GET_TAC_EXCLUSION()
    #if($KPI == 0)
        AND DOWNLINK = 0
    #elseif($KPI == 1)
        AND DOWNLINK = 1
    #end
    GROUP BY
        #foreach ($column in $groupbyColumns)
                    $column
                    #if($velocityCount < $groupbyColumns.size())
                    ,
                    #end
        #end
    #if($velocityCount < $rawtables.size())
        union all
    #end
  #end
) as $rawview
#end

##sessionBrowser KPI only
#macro(SELECT_UKPI_FOR_DRILLDOWN $drillColumns $KPI)
    #if($drilltype=="HS_CATEGORY")
    hsRef.HSDPA_UE_CATEGORY as drillBy,
    #elseif($drilltype=="EUL_CATEGORY")
    eulCategory.EUL_UE_CATEGORY as drillBy,
    #elseif($drilltype=="ECNO_AVG")
    ecnoMapping.ECNO_DBM as drillBy,
    #elseif($drilltype=="RSCP_AVG")
    rscpMapping.RSCP_DBM as drillBy,
    #elseif($drilltype=="UL_INTERFERENCE_AVG")
    ulintMapping.ULINT_DBM as drillBy,
    #elseif($drilltype=="HSDSCH_AVG_USERS")
    HSDSCH_AVG_USERS as drillBy,
    #else
        #GET_COLUMNS_NO_COMMA_TRAILING($drillColumns) as drillBy,
    #end
    #GET_UKPI_DRILLDOWN_SAMPLES_AND_VALUES($KPI)
#end

#macro (UP_KPI_INTERNAL_RAW_JOIN_RAN_SESSION_WITH_FILTER $rawtables $rawview $ranColumns $columnsToIncludeInNewView $sessionGroupbyColumns)
    (
        select
            #foreach ($columnToInclude in $sessionGroupbyColumns)
                $columnToInclude
                #if($velocityCount < $sessionGroupbyColumns.size())
                ,
                #end
            #end
            from
        (
        #foreach ($rawtable in $rawtables)
            select
                #foreach ($columnToInclude in $columnsToIncludeInNewView)
                    $columnToInclude
                    #if($velocityCount < $columnsToIncludeInNewView.size())
                    ,
                    #end
                #end
            from dc.$rawtable
            where
                DATETIME_ID = '$kpiStartTime'
            #if($columns!=[])
                and #GET_COLUMNS_WHERE($ranColumns)
            #end
            GROUP BY
            #foreach ($columnToInclude in $sessionGroupbyColumns)
                $columnToInclude
                #if($velocityCount < $sessionGroupbyColumns.size())
                ,
                #end
            #end
            #if($velocityCount < $rawtables.size())
                    union all
            #end
        #end ) as temp
        GROUP BY
        #foreach ($columnToInclude in $sessionGroupbyColumns)
            $columnToInclude
            #if($velocityCount < $sessionGroupbyColumns.size())
            ,
            #end
        #end
    ) as $rawview
#end

##sessionBrowser KPI only
#macro(UP_KPI_JOIN_PART $sessionTableList $columns $ranColumnsToSelect $drilltype $joinColumns $sessionGroupbyColumns)
    #if($drilltype=="HSDSCH_AVG_USERS")
    RIGHT OUTER JOIN
        #UP_KPI_INTERNAL_RAW_JOIN_RAN_SESSION_WITH_FILTER($sessionTableList "srawview" $columns $ranColumnsToSelect $sessionGroupbyColumns)
    ON(#GET_JOIN("rawview" "srawview" $joinColumns))
    #else
    LEFT OUTER JOIN
        #UP_KPI_INTERNAL_RAW_JOIN_RAN_SESSION_WITH_FILTER($sessionTableList "srawview" $columns $ranColumnsToSelect $sessionGroupbyColumns)
    ON(#GET_JOIN("rawview" "srawview" $joinColumns))
        #if($drilltype=="HS_CATEGORY")
        RIGHT OUTER JOIN
        DIM_E_RAN_SESSION_HSDPA_UE_CATEGORY hsRef
        ON(srawview.HSDPA_UE_CATEGORY = hsRef.HSDPA_UE_CATEGORY)
        #elseif($drilltype=="EUL_CATEGORY")
        RIGHT OUTER JOIN
        DIM_E_RAN_SESSION_EUL_UE_CATEGORY eulCategory
        ON(srawview.EUL_UE_CATEGORY = eulCategory.EUL_UE_CATEGORY)
        #elseif($drilltype=="ECNO_AVG")
        RIGHT OUTER JOIN
        DIM_E_RAN_ECNO_MAPPING ecnoMapping
        ON(srawview.ECNO_AVG = ecnoMapping.ECNO_DBM)
        #elseif($drilltype=="RSCP_AVG")
        RIGHT OUTER JOIN
        DIM_E_RAN_RSCP_MAPPING rscpMapping
        ON(srawview.RSCP_AVG = rscpMapping.RSCP_DBM)
        #elseif($drilltype=="UL_INTERFERENCE_AVG")
        RIGHT OUTER JOIN
        DIM_E_RAN_ULINT_MAPPING ulintMapping
        ON(srawview.UL_INTERFERENCE_AVG = ulintMapping.ULINT_DBM)
        #end
    #end
#end

##sessionBrowser KPI only
#macro(UP_KPI_WHERE_PART $drillColumns $drilltype)
    #if($drilltype!="ECNO_AVG"&&$drilltype!="RSCP_AVG"&&$drilltype!="HS_CATEGORY"&&$drilltype!="EUL_CATEGORY"&&$drilltype!="UL_INTERFERENCE_AVG")
    WHERE
        #GET_COLUMNS_WHERE_NOT_NULL($drillColumns)
    #end
#end

##sessionBrowser KPI only
#macro(UP_KPI_ORDERBY_PART $drilltype)
    #if($drilltype=="ECNO_AVG"||$drilltype=="RSCP_AVG"||$drilltype=="HS_CATEGORY"||$drilltype=="EUL_CATEGORY"||$drilltype=="HSDSCH_AVG_USERS"||$drilltype=="UL_INTERFERENCE_AVG")
    drillBy ASC
    #else
    drillBy DESC
    #end
#end

##sessionBrowser KPI only
#macro(GET_UKPI_DRILLDOWN_SAMPLES_AND_VALUES $KPI)
#if($KPI == 0)
    ISNULL(SUM(UL_TP_SAMPLE),0) AS samples,
    ISNULL(CAST(ROUND((SUM(CAST(TOTAL_UL_TP AS DECIMAL(16)))/samples),4) AS NUMERIC(16,4)),0) AS value
#elseif($KPI == 1)
    ISNULL(SUM(DL_TP_SAMPLE),0) AS samples,
    ISNULL(CAST(ROUND((SUM(CAST(TOTAL_DL_TP AS DECIMAL(16)))/samples),4) AS NUMERIC(16,4)),0) AS value
#elseif($KPI == 2)
    ISNULL(SUM(RTT_TERM_SAMPLE),0) AS samples,
    ISNULL(CAST(ROUND((SUM(CAST(TOTAL_SETUP_TIME_TERM AS DECIMAL(16)))/samples),4) AS NUMERIC(16,4)),0) AS value
#elseif($KPI == 3)
    ISNULL(SUM(RTT_NET_SAMPLE),0) AS samples,
    ISNULL(CAST(ROUND((SUM(CAST(TOTAL_SETUP_TIME_NET AS DECIMAL(16)))/samples),4) AS NUMERIC(16,4)),0) AS value
#elseif($KPI == 4)
    ISNULL(SUM(PACKET_LOSS_TERM_SAMPLE),0) AS samples,
    ISNULL(CAST(ROUND((SUM(CAST(TOTAL_PACKET_LOSS_TERM AS DECIMAL(32,16)))/samples),4) AS NUMERIC(16,4)),0) AS value
#elseif($KPI == 5)
    ISNULL(SUM(PACKET_LOSS_NET_SAMPLE),0) AS samples,
    ISNULL(CAST(ROUND((SUM(CAST(TOTAL_PACKET_LOSS_NET AS DECIMAL(32,16)))/samples),4) AS NUMERIC(16,4)),0)  AS value
#end
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_SPECIFY_COLUMNS_WEEKLY $rawtables $rawview $columnsToIncludeInResult)
    #PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_SPECIFY_COLUMNS_WEEKLY($rawtables $rawview $columnsToIncludeInResult false)
#end

##-----------------------------------------------------------------------------
## function used to iterate over list of raw tables
##
## rawtables: list of raw tables
## rawview: what to call the final result
## columnsToIncludeInResult: columns from raw tables that should be included in select from
##-----------------------------------------------------------------------------
#macro (PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_SPECIFY_COLUMNS_WEEKLY $rawtables $rawview $columnsToIncludeInResult $useImsiZeroExclusion)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInResult)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInResult.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATE_RANGE_LOCAL()
        #if ($useImsiZeroExclusion)
        and #GET_IMSI0_EXCLUSION($rawtable)
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WITH_TAC_EXCLUSION_IMSI0_EXCLUSION_SUC_WEEKLY $rawtables $rawview $columnsToIncludeInNewView)
    #PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WITH_TAC_EXCLUSION_SUC_WEEKLY($rawtables $rawview $columnsToIncludeInNewView true false)
#end

##new function used to replace raw view with raw tables with tac exclusion and roaming
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_AND_ROAMING_WEEKLY $rawtables $rawview $columnsToIncludeInNewView)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATE_RANGE_LOCAL()
    and #GET_TAC_EXCLUSION()
    and ROAMING = 1
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end



##new function used to replace raw view with raw tables with tac exclusion and roaming
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_AND_ROAMING_MCC_WEEKLY $rawtables $rawview $columnsToIncludeInNewView)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATE_RANGE_LOCAL()
    and #GET_TAC_EXCLUSION()
    and ROAMING = 1
    and IMSI_MCC = '${MCC}'
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end


##new function used to replace raw view with raw tables with tac exclusion and roaming
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_AND_ROAMING_MCC_MNC_WEEKLY $rawtables $rawview $columnsToIncludeInNewView)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATE_RANGE_LOCAL()
    and #GET_TAC_EXCLUSION()
    and ROAMING = 1
    and IMSI_MCC = '${MCC}'
    and IMSI_MNC = '${MNC}'
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_IMSI0_EXCLUSION_WEEKLY $rawtables $rawview $columnsToIncludeInNewView)
    #PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_WEEKLY($rawtables $rawview $columnsToIncludeInNewView true)
#end
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_WEEKLY $rawtables $rawview $columnsToIncludeInNewView)
    #PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_WEEKLY($rawtables $rawview $columnsToIncludeInNewView false)
#end

##new function used to replace raw view with raw tables with tac exclusion
#macro (PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_WEEKLY $rawtables $rawview $columnsToIncludeInNewView $useImsiZeroExclusion)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATE_RANGE_LOCAL()
    and #GET_TAC_EXCLUSION()
        #if ($useImsiZeroExclusion)
        and #GET_IMSI0_EXCLUSION($rawtable)
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end


##new function to replace raw views with raw tables and specify columns to be contained in the result set
##this function filters only on the datetime range
#macro (PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WITH_TAC_EXCLUSION_WEEKLY $rawtables $rawview $columnsToIncludeInNewView $useImsiZeroExclusion $useImsiNullExclusion)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATE_RANGE_LOCAL()
    and #GET_TAC_EXCLUSION()
        #if ($useImsiZeroExclusion)
        and #GET_IMSI0_EXCLUSION($rawtable)
        #end
        #if ($useImsiNullExclusion)
        and #GET_IMSINULL_EXCLUSION($rawtable)
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WITH_TAC_EXCLUSION_IMSI0_EXCLUSION_IMSINULL_EXCLUSION_WEEKLY $rawtables $rawview $columnsToIncludeInNewView)
    #PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WITH_TAC_EXCLUSION_WEEKLY($rawtables $rawview $columnsToIncludeInNewView true true)
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WITH_TAC_EXCLUSION_WEEKLY $rawtables $rawview $columnsToIncludeInNewView)
    #PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WITH_TAC_EXCLUSION_WEEKLY($rawtables $rawview $columnsToIncludeInNewView false false)
#end


##-----------------------------------------------------------------------------
## Query raw tables, excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning non-distinct columns with respective raw counts of
## the specified columns in the counterColumn column based on the conditionColumns condition.
##
## rawTables : list of raw table partitions
## rawView : the view name to be created from this select
## columnsToIncludeInNewView : columns that should be included in this new view
## counterColumn : the column in raw table that contains a counter of e.g. failures
## conditionColumns : the columns on which we match the conditions represented as :conditionColumn
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## columnToInclude : the distinct columns that should be used in the where clause when selecting from raw tables
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_CONDITIONED_WEEKLY $rawTables $rawView $columnsToIncludeInNewView $conditionColumns $useExclusiveTACs)
(
    #foreach ($rawTable in $rawTables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawTable tmpTable
    where
        #foreach ($conditionColumn in $conditionColumns)
            $conditionColumn = :$conditionColumn
            #if($velocityCount <= $conditionColumns.size())
            and
            #end
        #end
        #GET_DATE_RANGE_LOCAL()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
        #elseif ($useExclusiveTACs == "yes")
        and tmpTable.TAC is not null
        #end
        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as $rawView
#end


##-----------------------------------------------------------------------------
## Query raw tables (as post-aggregation), excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning distinct columns and number of impactedSubscribers as impactedSubscribers column
## based usually on imsiColumn, no other counter is retrieved.
##
## rawTables : list of raw table partitions
## rawView : the view name to be created from this select
## columnsToIncludeInNewView : columns that should be included in this new view
## conditionColumns : the columns on which we match the condition represented as :conditionColumn
## imsiColumn : the column representing the imsi column in raw tables
## impactedSubscribers : the column representing the number of impacted subscribers as output
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## columnToInclude : the distinct columns that should be used in the where clause when selecting from raw tables
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AGGREGATE_CONDITIONED_IMPACTED_SUBSCRIBERS_NO_FAILURES_WEEKLY $rawTables $rawView $columnsToIncludeInNewView $conditionColumns $imsiColumn $impactedSubscribers $useExclusiveTACs)
(
select
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount <= $columnsToIncludeInNewView.size())
        ,
        #end
    #end
count(distinct $imsiColumn) as $impactedSubscribers,
sum($counterColumn) as $counterColumn
from (
    #foreach ($rawTable in $rawTables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
        #GET_DATETIME_ID(),
        $imsiColumn as $imsiColumn,
    count(*) as $counterColumn
    from dc.$rawTable
    where
        #foreach ($conditionColumn in $conditionColumns)
            $conditionColumn = :$conditionColumn
            #if($velocityCount <= $conditionColumns.size())
            and
            #end
        #end
        #GET_DATE_RANGE_LOCAL()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE($rawTable)
        #elseif ($useExclusiveTACs == "yes")
        and dc.${rawTable}.TAC is not null
        #end
    group by
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    DATETIME_ID,
        $imsiColumn
        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as rawViewTemp
group by
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount < $columnsToIncludeInNewView.size())
        ,
        #end
    #end
) as $rawView
#end


##-----------------------------------------------------------------------------
## Query raw tables (as post-aggregation), excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning non-distinct columns with respective raw counts of
## the specified columns in the counterColumn column.
##
## rawTables : list of raw table partitions
## rawView : the view name to be created from this select
## columnsToIncludeInNewView : columns that should be included in this new view
## notNullColumns : the columns wich should be NOT NULL
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## columnToInclude : the distinct columns that should be used in the where clause when selecting from raw tables
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AND_NOT_NULL_COLUMNS_EXCLUSIVE_TAC_WEEKLY $rawTables $rawView $columnsToIncludeInNewView $notNullColumns $useExclusiveTACs)
(
    #foreach ($rawTable in $rawTables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawTable tmpTable
    where
        #GET_DATE_RANGE_LOCAL()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
        #elseif ($useExclusiveTACs == "yes")
        and tmpTable.TAC is not null
        #end
    and #GET_COLUMNS_WHERE_NOT_NULL($notNullColumns)
        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as $rawView
#end


##-----------------------------------------------------------------------------
## Query raw tables (as post-aggregation), excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning non-distinct columns with respective raw counts of
## the specified columns in the counterColumn column.
##
## rawTables : list of raw table partitions
## rawView : the view name to be created from this selectL
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## columnToInclude : the distinct columns that should be used in the where clause when selecting from raw tables
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AND_EXCLUSIVE_TAC_WEEKLY_AA_RNC_GROUP $rawTables $rawView $columnsToIncludeInNewView $useExclusiveTACs)
(
    #foreach ($rawTable in $rawTables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawTable tmpTable
    where
        #GET_DATE_RANGE_LOCAL()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
        #elseif ($useExclusiveTACs == "yes")
        and tmpTable.TAC is not null
        #end
        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as $rawView
#end


##-----------------------------------------------------------------------------
## Query aggregation views (as post-aggregation), excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning distinct columns with respective counts of
## the specified columns in the counterColumn column and number of impactedSubscribers as impactedSubscribers column
## based usually on imsiColumn.
##
## rawTables : list of raw table partitions
## aggViews : list of aggregation views
## view : the view name to be created from this select
## columnsToIncludeInNewView : columns that should be included in this new view
## counterColumn : the column in raw table that contains a counter of e.g. failures
## conditionColumns : the columns on which we match the condition represented as :conditionColumn
## imsiColumn : the column representing the imsi column in raw tables
## impactedSubscribers : the column representing the number of impacted subscribers as output
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## columnToInclude : the distinct columns that should be used in the where clause when selecting from aggregation views
##-----------------------------------------------------------------------------
#macro (UNION_ALL_AGGREGATION_VIEWS_WITH_SPECIFIC_COLUMNS_POST_AGGREGATE_CONDITIONED_IMPACTED_SUBSCRIBERS_WEEKLY $rawTables $aggViews $view $columnsToIncludeInNewView $counterColumn $conditionColumns $imsiColumn $impactedSubscribers $useExclusiveTACs)
(
select
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
    aggView.${columnToInclude}
        #if($velocityCount <= $columnsToIncludeInNewView.size())
        ,
        #end
    #end
rawView.${impactedSubscribers},
aggView.${counterColumn}
from
    #REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_TAC_EXCLUSION_SPECIFY_COLUMNS_AGGREGATE_CONDITIONED_IMPACTED_SUBSCRIBERS_NO_FAILURES_WEEKLY($rawTables "rawView" $columnsToIncludeInNewView $conditionColumns $imsiColumn $impactedSubscribers $useExclusiveTACs)
inner join (
select
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount <= $columnsToIncludeInNewView.size())
        ,
        #end
    #end
sum($counterColumn) as $counterColumn
from (
    #foreach ($aggView in $aggViews)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
        #GET_DATETIME_ID(),
    sum($counterColumn) as $counterColumn
    from dc.$aggView
    where
        #foreach ($conditionColumn in $conditionColumns)
            $conditionColumn = :$conditionColumn
            #if($velocityCount <= $conditionColumns.size())
            and
            #end
        #end
        #GET_DATETIME_RANGE()
    group by
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount <= $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    DATETIME_ID
        #if($velocityCount < $aggViews.size())
        union all
        #end
    #end
) as viewTemp
group by
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $columnToInclude
        #if($velocityCount < $columnsToIncludeInNewView.size())
        ,
        #end
    #end
) as aggView
on (
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
    rawView.${columnToInclude} = aggView.${columnToInclude}
        #if($velocityCount < $columnsToIncludeInNewView.size())
        and
        #end
    #end
)
) as $view
#end


##-----------------------------------------------------------------------------
## Query raw tables without any aggregation, excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning non-distinct.
##
## rawTables : list of raw table partitions
## rawView : the view name to be created from this select
## columns : columns that should be included in this new view
## whereClause : the where clause to be applied
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## distinct : the 'distinct' keyword string or an empty string
## columnToInclude : the distinct columns that should be used in the where clause when selecting from raw tables
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_TAC_EXCLUSION_SPECIFY_COLUMNS_CONDITIONED_WEEKLY $rawTables $rawView $columns $whereClause $useExclusiveTACs $distinct)
(
    #foreach ($rawTable in $rawTables)
    select
        $distinct
        #foreach ($columnToInclude in $columns)
            $columnToInclude
            #if($velocityCount < $columns.size())
            ,
            #end
        #end
    from dc.$rawTable tmpTable
    where
        #GET_DATE_RANGE_LOCAL()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
        #elseif ($useExclusiveTACs == "yes")
        and tmpTable.TAC is not null
        #end
        $whereClause
        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as $rawView
#end

##new function to replace raw views with raw tables and specify columns to be contained in the result set
##this function filters only on the date range
#macro (PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS_WITH_TAC_EXCLUSION_SUC_WEEKLY $rawtables $rawview $columnsToIncludeInNewView $useImsiZeroExclusion $useImsiNullExclusion)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInNewView)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInNewView.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_DATE_RANGE_LOCAL()
    and #GET_TAC_EXCLUSION()
        #if ($useImsiZeroExclusion)
        and #GET_IMSI0_EXCLUSION($rawtable)
        #end
        #if ($useImsiNullExclusion)
        and #GET_IMSINULL_EXCLUSION($rawtable)
        #end
    and dc.${rawtable}.IMSI in (select IMSI from temp_imsi_ranking_table)
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_SPECIFY_COLUMNS_ADJUSTED $rawtables $rawview $columnsToIncludeInResult)
    #PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_SPECIFY_COLUMNS_ADJUSTED($rawtables $rawview $columnsToIncludeInResult false)
#end

##-----------------------------------------------------------------------------
## function used to iterate over list of raw tables
##
## rawtables: list of raw tables
## rawview: what to call the final result
## columnsToIncludeInResult: columns from raw tables that should be included in select from
##-----------------------------------------------------------------------------
#macro (PRIVATE_REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_SPECIFY_COLUMNS_ADJUSTED $rawtables $rawview $columnsToIncludeInResult $useImsiZeroExclusion)
(
    #foreach ($rawtable in $rawtables)
    select
        #foreach ($columnToInclude in $columnsToIncludeInResult)
            $columnToInclude
            #if($velocityCount < $columnsToIncludeInResult.size())
            ,
            #end
        #end
    from dc.$rawtable
    where
        #GET_ADJUSTED_DATETIME_RANGE()
        #if ($useImsiZeroExclusion)
        and #GET_IMSI0_EXCLUSION($rawtable)
        #end
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as $rawview
#end

##-----------------------------------------------------------------------------
## Query raw tables (as post-aggregation), excluding Exclusive TACs (non-NULLs only), filtering on provided values,
## specifying a date/time filter, returning distinct columns and number of impactedSubscribers as impactedSubscribers column
## based usually on imsiColumn together with $counterColumn with the number of failures.
##
## Maximum number of groups is 2.
##
## rawTables : list of raw table partitions
## rawView : the view name to be created from this select
## columns : columns that should be included in the inner selects
## columnsOuter : columns that should be included in this new view (the most outer select)
## whereClause : the where clause to be applied
## tempTable : the temporary name of the inner table
## groupTables : the array of group tables to be joined based on the GROUP_NAME columns
## groupCondition : the group condition to be applied
## whereClause : the where clause to be applied
## counterColumn : the column name in which we will have the number of occurrences
## imsiColumn : the column representing the imsi column in raw tables
## impactedSubscribers : the column representing the number of impacted subscribers as output
## useExclusiveTACs : 'yes' means to include exclusive TACs, 'no' means to exclude the exclusive TACs
## columnToInclude : the distinct columns that should be used in the where clause when selecting from raw tables
## sourcetable : Selecting source tables used in select for particular column
## targettable :Selecting target tables used in select for particular column
## groupcolumns :groups tables are included  
##-----------------------------------------------------------------------------
#macro (REPLACE_RAW_VIEW_WITH_RAW_TABLES_TAC_EXCLUSION_SPECIFY_COLUMNS_CONDITIONED_IMPACTED_SUBSCRIBERS_GROUPS_REFINE $rawTables $rawView $columns $columnsOuter $groupTables $sourcetable $targettable $groupCondition $whereClause $counterColumn $imsiColumn $impactedSubscribers $useExclusiveTACs $groupcolumns)
(    
select
    #foreach ($columnToInclude in $columnsOuter)
    tempTable.${columnToInclude}
        #if($velocityCount <= $columnsOuter.size())
        ,
        #end
    #end
isnull(count(distinct $imsiColumn), 0) as $impactedSubscribers,
sum($counterColumn) as $counterColumn
from (
    #foreach ($rawTable in $rawTables)
    select
        #foreach ($columnToInclude in $columns)
            $columnToInclude
            #if($velocityCount <= $columns.size())
            ,
            #end
        #end
        $imsiColumn,
    count(*) as $counterColumn
    from dc.$rawTable tmpTable,
        (
            select $groupcolumns from $sourcetable group1
            full outer join
            $targettable group2
            on
            #foreach ($groupTable in $groupTables)
                ${groupTable}.GROUP_NAME
                #if($velocityCount < $groupTables.size())
                =
                #end
            #end
) as  tmpgroupview
    where
        $groupCondition
        #GET_DATETIME_RANGE()
        #if ($useExclusiveTACs == "no")
        and #GET_TAC_EXCLUSION_BY_TABLE("tmpTable")
        #elseif ($useExclusiveTACs == "yes")
        and tmpTable.TAC is not null
        #end
        $whereClause
    group by
        $imsiColumn ,
        #foreach ($columnToInclude in $columns)
            $columnToInclude
            #if($velocityCount < $columns.size())
            ,
            #end
        #end

        #if($velocityCount < $rawTables.size())
        union all
        #end
    #end
) as tempTable
group by
    #foreach ($columnToInclude in $columnsOuter)
    tempTable.${columnToInclude}
        #if($velocityCount < $columnsOuter.size())
        ,
        #end
    #end
) as $rawView
#end
